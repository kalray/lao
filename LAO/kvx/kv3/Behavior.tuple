/*
 * kv3/Behavior.tuple
 * Automatically generated from the Machine Description System (MDS).
 *  (c) Copyright 2010-2018 Kalray SA.
 */

#ifdef Behavior_FETCH
static void
fetch_v1_AWAIT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_AWAIT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.1.idle
  (CONST.0))
*/


  HELPER(idle)(this,
    
    Int256_fromUInt64(0LL));

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_AWAIT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLEEP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.1.idle
  (CONST.1))
*/


  HELPER(idle)(this,
    
    Int256_fromUInt64(0x1LL));

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_STOP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(IF
  (TEST.stop_owner)
  (EFFECT.1.idle
    (CONST.2))
  (SKIP))
*/


  if (
    HELPER(stop_owner)(this)
  )
  {
    HELPER(idle)(this,
      
      Int256_fromUInt64(0x2LL));
  };

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_BARRIER_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.1.barrier)
*/


  HELPER(barrier)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_TLBREAD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(IF
  (TEST.mmi_owner)
  (EFFECT.1.readtlb)
  (SKIP))
*/


  if (
    HELPER(mmi_owner)(this)
  )
  {
    HELPER(readtlb)(this);
  };

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_TLBPROBE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(IF
  (TEST.mmi_owner)
  (EFFECT.1.probetlb)
  (SKIP))
*/


  if (
    HELPER(mmi_owner)(this)
  )
  {
    HELPER(probetlb)(this);
  };

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_TLBWRITE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(IF
  (TEST.mmi_owner)
  (EFFECT.1.writetlb)
  (SKIP))
*/


  if (
    HELPER(mmi_owner)(this)
  )
  {
    HELPER(writetlb)(this);
  };

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_TLBDINVAL_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.1.invaldtlb)
*/


  HELPER(invaldtlb)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_TLBIINVAL_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.1.invalitlb)
*/


  HELPER(invalitlb)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ERROP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(THROW.0.OPCODE)
*/


  HELPER(throw_OPCODE)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RET_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(STORE.0
  (AGGL.NPC
    (CONST.0)
    (CONST.1))
  (LOAD.0
    (AGGL.SFR
      (CONST.3)
      (CONST.1))))
*/


  HELPER(writeToStorage_NPC)(this, 0, 0, 1, 64, 
    HELPER(readFromStorage_SFR)(this, 0, 3, 1, 64)
  );

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RFE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(IF
  (TEST.rfe_owner)
  (EFFECT.1.rfe)
  (SKIP))
*/


  if (
    HELPER(rfe_owner)(this)
  )
  {
    HELPER(rfe)(this);
  };

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_IGOTO_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_IGOTO_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (STORE.1
    (AGGL.NPC
      (CONST.0)
      (CONST.1))
    (I2F.64
      (READ.argument1))))
*/
  Int256_ argument1 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  HELPER(writeToStorage_NPC)(this, 1, 0, 1, 64, 
    Int256_zx(
      argument1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ICALL_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.next
    (F2I.64
      (LOAD.0
        (AGGL.NPC
          (CONST.0)
          (CONST.1)))))
  (STORE.1
    (AGGL.NPC
      (CONST.0)
      (CONST.1))
    (I2F.64
      (READ.argument1)))
  (STORE.1
    (AGGL.SFR
      (CONST.3)
      (CONST.1))
    (I2F.64
      (READ.next))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ next = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  next = 
    Int256_zx(
      HELPER(readFromStorage_NPC)(this, 0, 0, 1, 64), 64
    );
  HELPER(writeToStorage_NPC)(this, 1, 0, 1, 64, 
    Int256_zx(
      argument1, 64
    )
  );
  HELPER(writeToStorage_SFR)(this, 1, 3, 1, 64, 
    Int256_zx(
      next, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SCALL_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (EFFECT.0.syscall
    (READ.argument1)))
*/
  Int256_ argument1 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  HELPER(syscall)(this,
    
    argument1);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SCALL_sysnumber_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SCALL_sysnumber_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.12
      (METHOD.%1)))
  (EFFECT.0.syscall
    (READ.argument1)))
*/
  Int256_ argument1 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 12
    );
  HELPER(syscall)(this,
    
    argument1);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LOOPDO_registerZ_pcrel17_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 2, 1, Int256_fromInt64((ImmediateValue)decoded[2-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LOOPDO_registerZ_pcrel17_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument2
    (SX.19
      (METHOD.%2)))
  (IF
    (I2B
      (F2I.1
        (LOAD.0
          (AGGL.PS
            (CONST.5)
            (CONST.1)))))
    (SEQ
      (STORE.0
        (AGGL.SFR
          (CONST.7)
          (CONST.1))
        (LOAD.0
          (AGGL.NPC
            (CONST.0)
            (CONST.1))))
      (STORE.0
        (AGGL.SFR
          (CONST.8)
          (CONST.1))
        (I2F.64
          (ADD
            (F2I.64
              (LOAD.0
                (AGGL.PC
                  (CONST.0)
                  (CONST.1))))
            (SX.32
              (READ.argument2)))))
      (STORE.0
        (AGGL.SFR
          (CONST.9)
          (CONST.1))
        (I2F.64
          (READ.argument1))))
    (THROW.0.OPCODE)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 19
    );
  if (
    Int256_toBool(
      Int256_zx(
        HELPER(readFromStorage_PS)(this, 0, 5, 1, 1), 1
      )
    )
  )
  {
    HELPER(writeToStorage_SFR)(this, 0, 7, 1, 64, 
      HELPER(readFromStorage_NPC)(this, 0, 0, 1, 64)
    );
    HELPER(writeToStorage_SFR)(this, 0, 8, 1, 64, 
      Int256_zx(
        Int256_add(
          Int256_zx(
            HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
          ), 
          Int256_sx(
            argument2, 32
          )
        ), 64
      )
    );
    HELPER(writeToStorage_SFR)(this, 0, 9, 1, 64, 
      Int256_zx(
        argument1, 64
      )
    );
    ;
  }
  else {
    HELPER(throw_OPCODE)(this);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_WFXL_systemT2_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 2, 1, decoded[1] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_WFXL_systemT2_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.wfxl_check_access
      (METHOD.%1)
      (ZX.64
        (READ.argument2)))
    (WRITE.result1
      (APPLY.wfxl
        (METHOD.%1)
        (ZX.64
          (READ.argument2))))
    (SKIP))
  (STORE.5
    (AGGL.SFR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(wfxl_check_access)(this,
      
      Int256_fromInt64(decoded[0] - Register_kv3_PC),
      
      Int256_zx(
        argument2, 64
      ))
  )
  {
    result1 = 
      HELPER(wfxl)(this,
        
        Int256_fromInt64(decoded[0] - Register_kv3_PC),
        
        Int256_zx(
          argument2, 64
        ));
  }
;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_WFXL_systemT2_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_SFR)(this, 5, 1, 0, decoded[0] - Register_kv3_PC);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_COMMIT
static void
commit_v1_WFXL_systemAlone_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_SFR)(this, 0, 1, 0, decoded[0] - Register_kv3_PC);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_WFXM_systemT2_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.wfxm_check_access
      (METHOD.%1)
      (ZX.64
        (READ.argument2)))
    (WRITE.result1
      (APPLY.wfxm
        (METHOD.%1)
        (ZX.64
          (READ.argument2))))
    (SKIP))
  (STORE.5
    (AGGL.SFR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(wfxm_check_access)(this,
      
      Int256_fromInt64(decoded[0] - Register_kv3_PC),
      
      Int256_zx(
        argument2, 64
      ))
  )
  {
    result1 = 
      HELPER(wfxm)(this,
        
        Int256_fromInt64(decoded[0] - Register_kv3_PC),
        
        Int256_zx(
          argument2, 64
        ));
  }
;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_GET_registerZ_systemS2_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_SFR)(this, 0, 2, 1, decoded[1] - Register_kv3_PC);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_GET_registerZ_systemS2_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.SFR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.get_check_access
      (METHOD.%2)
      (METHOD.%1))
    (WRITE.result1
      (APPLY.get
        (METHOD.%2)
        (ZX.64
          (READ.argument2))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(get_check_access)(this,
      
      Int256_fromInt64(decoded[1] - Register_kv3_PC),
      
      Int256_fromInt64(decoded[0] - Register_kv3_R0))
  )
  {
    result1 = 
      HELPER(get)(this,
        
        Int256_fromInt64(decoded[1] - Register_kv3_PC),
        
        Int256_zx(
          argument2, 64
        ));
  }
;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_GET_registerZ_systemS2_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 2, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_IGET_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (ZX.9
      (F2I.64
        (LOAD.0
          (AGGL.GPR
            (METHOD.%1)
            (CONST.1))))))
  (IF
    (TEST.get_check_access
      (READ.index)
      (METHOD.%1))
    (WRITE.result1
      (APPLY.get
        (READ.index)
        (F2I.64
          (LOAD.1
            (AGGL.SFR
              (READ.index)
              (CONST.1))))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;


  index = 
    Int256_zx(
      Int256_zx(
        HELPER(operandRead)(this, 0), 64
      ), 9
    );
  if (
    HELPER(get_check_access)(this,
      
      index,
      
      Int256_fromInt64(decoded[0] - Register_kv3_R0))
  )
  {
    result1 = 
      HELPER(get)(this,
        
        index,
        
        Int256_zx(
          HELPER(readFromStorage_SFR)(this, 1, 
            Int256_toUInt32(
            index
          ), 1, 64), 64
        ));
  }
;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SET_systemT3_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.set_check_access
      (METHOD.%1)
      (ZX.64
        (READ.argument2))
      (METHOD.%2))
    (SEQ
      (WRITE.result1
        (ZX.64
          (READ.argument2)))
      (STORE.4
        (AGGL.SFR
          (METHOD.%1)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(set_check_access)(this,
      
      Int256_fromInt64(decoded[0] - Register_kv3_PC),
      
      Int256_zx(
        argument2, 64
      ),
      
      Int256_fromInt64(decoded[1] - Register_kv3_R0))
  )
  {
    result1 = 
      Int256_zx(
        argument2, 64
      );
    HELPER(operandFromValue)(this, 1, 0, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_SET_systemT3_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_SFR)(this, 4, 1, 0, decoded[0] - Register_kv3_PC);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_RSWAP_registerZ_systemS4_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_SFR)(this, 0, 2, 1, decoded[1] - Register_kv3_PC);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_RSWAP_registerZ_systemS4_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.SFR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (IF
    (ANDL
      (TEST.get_check_access
        (METHOD.%2)
        (METHOD.%1))
      (TEST.set_check_access
        (METHOD.%2)
        (ZX.64
          (READ.argument1))
        (METHOD.%1)))
    (SEQ
      (WRITE.result2
        (ZX.64
          (READ.argument1)))
      (WRITE.result1
        (ZX.64
          (READ.argument2)))
      (STORE.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1))
        (I2F.64
          (READ.result1)))
      (STORE.2
        (AGGL.SFR
          (METHOD.%2)
          (CONST.1))
        (I2F.64
          (READ.result2))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  if (
    (
      HELPER(get_check_access)(this,
        
        Int256_fromInt64(decoded[1] - Register_kv3_PC),
        
        Int256_fromInt64(decoded[0] - Register_kv3_R0))
       && 
      HELPER(set_check_access)(this,
        
        Int256_fromInt64(decoded[1] - Register_kv3_PC),
        
        Int256_zx(
          argument1, 64
        ),
        
        Int256_fromInt64(decoded[0] - Register_kv3_R0))
    )
  )
  {
    result2 = 
      Int256_zx(
        argument1, 64
      );
    result1 = 
      Int256_zx(
        argument2, 64
      );
    HELPER(operandFromValue)(this, 1, 0, 
      Int256_zx(
        result1, 64
      )
    );
    HELPER(operandFromValue)(this, 2, 1, 
      Int256_zx(
        result2, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_RSWAP_registerZ_systemS4_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 2, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandToRegFile_SFR)(this, 2, 2, 1, decoded[1] - Register_kv3_PC);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_WAITIT_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.ormask
    (AND
      (READ.argument1)
      (CONST.4294967295)))
  (WRITE.andmask
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.result1
    (APPLY.waitit
      (READ.ormask)
      (READ.andmask)))
  (STORE.1
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ andmask = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ ormask = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  ormask = 
    Int256_and(
      argument1, 
      Int256_fromUInt64(0xffffffffLL)
    );
  andmask = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    HELPER(waitit)(this,
      
      ormask,
      
      andmask);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_WAITIT_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 1, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_SYNCGROUP_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (IF
    (TEST.syncgroup_owner)
    (SEQ
      (WRITE.waitclrF
        (AND
          (READ.argument1)
          (CONST.65535)))
      (WRITE.waitclrB
        (AND
          (SHR
            (READ.argument1)
            (CONST.16))
          (CONST.65535)))
      (WRITE.notifyF
        (AND
          (SHR
            (READ.argument1)
            (CONST.32))
          (CONST.65535)))
      (WRITE.notifyB
        (AND
          (SHR
            (READ.argument1)
            (CONST.48))
          (CONST.65535)))
      (EFFECT.1.syncgroup
        (READ.waitclrF)
        (READ.waitclrB)
        (READ.notifyF)
        (READ.notifyB)))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ notifyB = Int256_zero;
  Int256_ notifyF = Int256_zero;
  Int256_ waitclrB = Int256_zero;
  Int256_ waitclrF = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  if (
    HELPER(syncgroup_owner)(this)
  )
  {
    waitclrF = 
      Int256_and(
        argument1, 
        Int256_fromUInt64(0xffffLL)
      );
    waitclrB = 
      Int256_and(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_fromUInt64(0xffffLL)
      );
    notifyF = 
      Int256_and(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_fromUInt64(0xffffLL)
      );
    notifyB = 
      Int256_and(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_fromUInt64(0xffffLL)
      );
    HELPER(syncgroup)(this,
      
      waitclrF,
      
      waitclrB,
      
      notifyF,
      
      notifyB);
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_GOTO_pcrel27_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (SX.29
      (METHOD.%1)))
  (STORE.0
    (AGGL.NPC
      (CONST.0)
      (CONST.1))
    (I2F.64
      (ADD
        (F2I.64
          (LOAD.0
            (AGGL.PC
              (CONST.0)
              (CONST.1))))
        (SX.32
          (READ.argument1))))))
*/
  Int256_ argument1 = Int256_zero;


  argument1 = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 29
    );
  HELPER(writeToStorage_NPC)(this, 0, 0, 1, 64, 
    Int256_zx(
      Int256_add(
        Int256_zx(
          HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
        ), 
        Int256_sx(
          argument1, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CALL_pcrel27_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (SX.29
      (METHOD.%1)))
  (WRITE.next
    (F2I.64
      (LOAD.0
        (AGGL.NPC
          (CONST.0)
          (CONST.1)))))
  (STORE.0
    (AGGL.NPC
      (CONST.0)
      (CONST.1))
    (I2F.64
      (ADD
        (F2I.64
          (LOAD.0
            (AGGL.PC
              (CONST.0)
              (CONST.1))))
        (SX.32
          (READ.argument1)))))
  (STORE.1
    (AGGL.SFR
      (CONST.3)
      (CONST.1))
    (I2F.64
      (READ.next))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ next = Int256_zero;


  argument1 = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 29
    );
  next = 
    Int256_zx(
      HELPER(readFromStorage_NPC)(this, 0, 0, 1, 64), 64
    );
  HELPER(writeToStorage_NPC)(this, 0, 0, 1, 64, 
    Int256_zx(
      Int256_add(
        Int256_zx(
          HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
        ), 
        Int256_sx(
          argument1, 32
        )
      ), 64
    )
  );
  HELPER(writeToStorage_SFR)(this, 1, 3, 1, 64, 
    Int256_zx(
      next, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_CB_branchcond_registerZ_pcrel17_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_CB_branchcond_registerZ_pcrel17_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3
    (SX.19
      (METHOD.%3)))
  (IF
    (TEST.scalarcond
      (READ.argument1)
      (READ.argument2))
    (STORE.1
      (AGGL.NPC
        (CONST.0)
        (CONST.1))
      (I2F.64
        (ADD
          (F2I.64
            (LOAD.1
              (AGGL.PC
                (CONST.0)
                (CONST.1))))
          (READ.argument3))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 19
    );
  if (
    HELPER(scalarcond)(this,
      
      argument1,
      
      argument2)
  )
  {
    HELPER(writeToStorage_NPC)(this, 1, 0, 1, 64, 
      Int256_zx(
        Int256_add(
          Int256_zx(
            HELPER(readFromStorage_PC)(this, 1, 0, 1, 64), 64
          ), 
          argument3
        ), 64
      )
    );
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LBZ_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 4, 2, 1, decoded[1] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 4, 4, 3, decoded[3] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 6, 5, decoded[5] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 5, 4, Int256_fromInt64((ImmediateValue)decoded[5-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.1)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (ZX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x1LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 4, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.8
          (APPLY.MEM_load
            (READ.address)
            (CONST.1)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x1LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 8
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LBS_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.1)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (SX.8
      (APPLY.MEM_load
        (READ.address)
        (CONST.1)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x1LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x1LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 8
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHZ_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.2)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (ZX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x2LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.16
          (APPLY.MEM_load
            (READ.address)
            (CONST.2)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x2LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 16
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LHS_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.2)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (SX.16
      (APPLY.MEM_load
        (READ.address)
        (CONST.2)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x2LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x2LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 16
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWZ_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (SX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (SX.32
          (APPLY.MEM_load
            (READ.address)
            (CONST.4)
            (READ.variant)
            (METHOD.%4))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_sx(
        HELPER(MEM_load)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          variant,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LWS_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (SX.32
      (APPLY.MEM_load
        (READ.address)
        (CONST.4)
        (READ.variant)
        (METHOD.%3))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_sx(
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        variant,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.8)
      (READ.variant)
      (METHOD.%2)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      variant,
      
      Int256_fromInt64(decoded[1] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.8)
      (READ.variant)
      (METHOD.%2)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      variant,
      
      Int256_fromInt64(decoded[1] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.8)
      (READ.variant)
      (METHOD.%2)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      variant,
      
      Int256_fromInt64(decoded[1] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.8)
          (READ.variant)
          (METHOD.%4)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        variant,
        
        Int256_fromInt64(decoded[3] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.8)
          (READ.variant)
          (METHOD.%4)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        variant,
        
        Int256_fromInt64(decoded[3] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.8)
          (READ.variant)
          (METHOD.%4)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        variant,
        
        Int256_fromInt64(decoded[3] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LD_variant_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.8)
      (READ.variant)
      (METHOD.%3)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      variant,
      
      Int256_fromInt64(decoded[2] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_registerM_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.16)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.1))))
  (STORE.4
    (AGGL.PGR
      (METHOD.%2)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LQ_variant_registerM_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 4, 2, 1, decoded[1] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_registerM_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.16)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.1))))
  (STORE.4
    (AGGL.PGR
      (METHOD.%2)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_registerM_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.16)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.1))))
  (STORE.4
    (AGGL.PGR
      (METHOD.%2)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.16)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.1))))
      (STORE.4
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1))
        (I2F.128
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x10LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 4, 4, 3, decoded[3] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_lsucond_registerY_registerM_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.16)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.1))))
      (STORE.4
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1))
        (I2F.128
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x10LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_lsucond_registerY_registerM_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.16)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.1))))
      (STORE.4
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1))
        (I2F.128
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x10LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.16)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.16)
      (READ.variant)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (STORE.4
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x10LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 4, 3, 2, decoded[2] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_registerN_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.2))))
  (STORE.4
    (AGGL.QGR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LO_variant_registerN_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_QGR)(this, 4, 2, 1, decoded[1] - Register_kv3_Q0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_registerN_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.2))))
  (STORE.4
    (AGGL.QGR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_registerN_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (SHL
        (METHOD.%2)
        (CONST.2))))
  (STORE.4
    (AGGL.QGR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[1] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.2))))
      (STORE.4
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_Q0), 
          Int256_fromUInt64(0x2LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_QGR)(this, 4, 4, 3, decoded[3] - Register_kv3_Q0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_lsucond_registerY_registerN_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.2))))
      (STORE.4
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_Q0), 
          Int256_fromUInt64(0x2LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_lsucond_registerY_registerN_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (SHL
            (METHOD.%4)
            (CONST.2))))
      (STORE.4
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_Q0), 
          Int256_fromUInt64(0x2LL)
        ));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LO_variant_doscale_registerN_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.variant
    (ZX.2
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.32)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (SHL
        (METHOD.%3)
        (CONST.2))))
  (STORE.4
    (AGGL.QGR
      (METHOD.%3)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ variant = Int256_zero;


  variant = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x20LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LO_variant_doscale_registerN_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_QGR)(this, 4, 3, 2, decoded[2] - Register_kv3_Q0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_registerA_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.offset
    (SX.10
      (METHOD.%3)))
  (WRITE.dri
    (METHOD.%2))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  dri = 
    Int256_fromInt64(decoded[1] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_speculate_registerA_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 2, 1, decoded[1] - Register_kv3_A0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_registerA_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.offset
    (SX.37
      (METHOD.%3)))
  (WRITE.dri
    (METHOD.%2))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  dri = 
    Int256_fromInt64(decoded[1] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_registerA_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.offset
    (SX.64
      (METHOD.%3)))
  (WRITE.dri
    (METHOD.%2))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  dri = 
    Int256_fromInt64(decoded[1] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.dri
    (METHOD.%4))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  dri = 
    Int256_fromInt64(decoded[3] - Register_kv3_A0);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 4, 3, decoded[3] - Register_kv3_A0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_lsucond_registerY_registerA_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.dri
    (METHOD.%4))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  dri = 
    Int256_fromInt64(decoded[3] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_lsucond_registerY_registerA_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%5)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.dri
    (METHOD.%4))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1))
        (I2F.256
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 4), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  dri = 
    Int256_fromInt64(decoded[3] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result1, 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.speculate
    (ZX.1
      (METHOD.%1)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.dri
    (METHOD.%3))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.32)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  dri = 
    Int256_fromInt64(decoded[2] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x20LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 3, 2, decoded[2] - Register_kv3_A0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 4, 3, 5, ((decoded[2] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 4, 3, 6, ((decoded[2] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 4, 3, 7, ((decoded[2] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 4, 3, 8, ((decoded[2] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_registerAq_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.offset
    (SX.10
      (METHOD.%4)))
  (WRITE.dri
    (SHL
      (METHOD.%3)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (WRITE.result1_0
    (ZX.64
      (READ.result1)))
  (WRITE.result1_1
    (SHR
      (READ.result1)
      (CONST.64)))
  (WRITE.result1_2
    (SHR
      (READ.result1)
      (CONST.128)))
  (WRITE.result1_3
    (SHR
      (READ.result1)
      (CONST.192)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:0)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:0)
              (CONST.1))))
        (READ.result1_0)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:1)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:1)
              (CONST.1))))
        (READ.result1_1)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:2)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:2)
              (CONST.1))))
        (READ.result1_2)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:3)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:3)
              (CONST.1))))
        (READ.result1_3)
        (READ.column)))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 10
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  result1_0 = 
    Int256_zx(
      result1, 64
    );
  result1_1 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x40LL)
    );
  result1_2 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x80LL)
    );
  result1_3 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0xc0LL)
    );
  HELPER(operandFromValue)(this, 3, 5, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 5), 256
        ),
        
        result1_0,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 6, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 6), 256
        ),
        
        result1_1,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 7, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 7), 256
        ),
        
        result1_2,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 8, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 8), 256
        ),
        
        result1_3,
        
        column), 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 3, 5, ((decoded[2] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 3, 6, ((decoded[2] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 3, 7, ((decoded[2] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 3, 8, ((decoded[2] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_registerAq_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.offset
    (SX.37
      (METHOD.%4)))
  (WRITE.dri
    (SHL
      (METHOD.%3)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (WRITE.result1_0
    (ZX.64
      (READ.result1)))
  (WRITE.result1_1
    (SHR
      (READ.result1)
      (CONST.64)))
  (WRITE.result1_2
    (SHR
      (READ.result1)
      (CONST.128)))
  (WRITE.result1_3
    (SHR
      (READ.result1)
      (CONST.192)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:0)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:0)
              (CONST.1))))
        (READ.result1_0)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:1)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:1)
              (CONST.1))))
        (READ.result1_1)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:2)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:2)
              (CONST.1))))
        (READ.result1_2)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:3)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:3)
              (CONST.1))))
        (READ.result1_3)
        (READ.column)))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 37
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  result1_0 = 
    Int256_zx(
      result1, 64
    );
  result1_1 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x40LL)
    );
  result1_2 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x80LL)
    );
  result1_3 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0xc0LL)
    );
  HELPER(operandFromValue)(this, 3, 5, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 5), 256
        ),
        
        result1_0,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 6, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 6), 256
        ),
        
        result1_1,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 7, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 7), 256
        ),
        
        result1_2,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 8, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 8), 256
        ),
        
        result1_3,
        
        column), 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_registerAq_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.offset
    (SX.64
      (METHOD.%4)))
  (WRITE.dri
    (SHL
      (METHOD.%3)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (WRITE.result1_0
    (ZX.64
      (READ.result1)))
  (WRITE.result1_1
    (SHR
      (READ.result1)
      (CONST.64)))
  (WRITE.result1_2
    (SHR
      (READ.result1)
      (CONST.128)))
  (WRITE.result1_3
    (SHR
      (READ.result1)
      (CONST.192)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:0)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:0)
              (CONST.1))))
        (READ.result1_0)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:1)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:1)
              (CONST.1))))
        (READ.result1_1)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:2)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:2)
              (CONST.1))))
        (READ.result1_2)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3:3)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%3:3)
              (CONST.1))))
        (READ.result1_3)
        (READ.column)))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 64
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  result1_0 = 
    Int256_zx(
      result1, 64
    );
  result1_1 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x40LL)
    );
  result1_2 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x80LL)
    );
  result1_3 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0xc0LL)
    );
  HELPER(operandFromValue)(this, 3, 5, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 5), 256
        ),
        
        result1_0,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 6, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 6), 256
        ),
        
        result1_1,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 7, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 7), 256
        ),
        
        result1_2,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 3, 8, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 8), 256
        ),
        
        result1_3,
        
        column), 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 6, ((decoded[4] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 7, ((decoded[4] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 8, ((decoded[4] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 9, ((decoded[4] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_GPR)(this, 1, 6, 5, decoded[5] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%3)))
  (WRITE.dri
    (SHL
      (METHOD.%5)
      (CONST.2)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (WRITE.result1_0
        (ZX.64
          (READ.result1)))
      (WRITE.result1_1
        (SHR
          (READ.result1)
          (CONST.64)))
      (WRITE.result1_2
        (SHR
          (READ.result1)
          (CONST.128)))
      (WRITE.result1_3
        (SHR
          (READ.result1)
          (CONST.192)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:0)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:0)
                  (CONST.1))))
            (READ.result1_0)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:1)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:1)
                  (CONST.1))))
            (READ.result1_1)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:2)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:2)
                  (CONST.1))))
            (READ.result1_2)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:3)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:3)
                  (CONST.1))))
            (READ.result1_3)
            (READ.column)))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 4
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[4] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    result1_0 = 
      Int256_zx(
        result1, 64
      );
    result1_1 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      );
    result1_2 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x80LL)
      );
    result1_3 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0xc0LL)
      );
    HELPER(operandFromValue)(this, 5, 6, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 6), 256
          ),
          
          result1_0,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 7, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 7), 256
          ),
          
          result1_1,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 8, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 8), 256
          ),
          
          result1_2,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 9, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 9), 256
          ),
          
          result1_3,
          
          column), 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 5, 6, ((decoded[4] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 7, ((decoded[4] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 8, ((decoded[4] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 9, ((decoded[4] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 7, ((decoded[4] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 8, ((decoded[4] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 9, ((decoded[4] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 4, 5, 10, ((decoded[4] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_GPR)(this, 1, 7, 6, decoded[6] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
  HELPER(operandFromValue)(this, 6, 5, Int256_fromInt64((ImmediateValue)decoded[6-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%6)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%3)))
  (WRITE.dri
    (SHL
      (METHOD.%5)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%7)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (WRITE.result1_0
        (ZX.64
          (READ.result1)))
      (WRITE.result1_1
        (SHR
          (READ.result1)
          (CONST.64)))
      (WRITE.result1_2
        (SHR
          (READ.result1)
          (CONST.128)))
      (WRITE.result1_3
        (SHR
          (READ.result1)
          (CONST.192)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:0)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:0)
                  (CONST.1))))
            (READ.result1_0)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:1)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:1)
                  (CONST.1))))
            (READ.result1_1)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:2)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:2)
                  (CONST.1))))
            (READ.result1_2)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:3)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:3)
                  (CONST.1))))
            (READ.result1_3)
            (READ.column)))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 5), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 4
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[4] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    result1_0 = 
      Int256_zx(
        result1, 64
      );
    result1_1 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      );
    result1_2 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x80LL)
      );
    result1_3 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0xc0LL)
      );
    HELPER(operandFromValue)(this, 5, 7, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 7), 256
          ),
          
          result1_0,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 8, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 8), 256
          ),
          
          result1_1,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 9, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 9), 256
          ),
          
          result1_2,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 10, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 10), 256
          ),
          
          result1_3,
          
          column), 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 5, 7, ((decoded[4] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 8, ((decoded[4] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 9, ((decoded[4] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 5, 10, ((decoded[4] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_lsucond_registerY_registerAq_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%6)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%3)))
  (WRITE.dri
    (SHL
      (METHOD.%5)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%7)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_load
          (READ.address)
          (CONST.32)
          (READ.variant)
          (READ.dri)))
      (WRITE.result1_0
        (ZX.64
          (READ.result1)))
      (WRITE.result1_1
        (SHR
          (READ.result1)
          (CONST.64)))
      (WRITE.result1_2
        (SHR
          (READ.result1)
          (CONST.128)))
      (WRITE.result1_3
        (SHR
          (READ.result1)
          (CONST.192)))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:0)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:0)
                  (CONST.1))))
            (READ.result1_0)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:1)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:1)
                  (CONST.1))))
            (READ.result1_1)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:2)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:2)
                  (CONST.1))))
            (READ.result1_2)
            (READ.column))))
      (STORE.4
        (AGGL.XVR
          (METHOD.%5:3)
          (CONST.1))
        (I2F.256
          (APPLY.insert_64
            (F2I.256
              (LOAD.4
                (AGGL.XVR
                  (METHOD.%5:3)
                  (CONST.1))))
            (READ.result1_3)
            (READ.column)))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 5), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 4
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[4] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_load)(this,
        
        address,
        
        Int256_fromUInt64(0x20LL),
        
        variant,
        
        dri);
    result1_0 = 
      Int256_zx(
        result1, 64
      );
    result1_1 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      );
    result1_2 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x80LL)
      );
    result1_3 = 
      Int256_shru(
        result1, 
        Int256_fromUInt64(0xc0LL)
      );
    HELPER(operandFromValue)(this, 5, 7, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 7), 256
          ),
          
          result1_0,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 8, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 8), 256
          ),
          
          result1_1,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 9, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 9), 256
          ),
          
          result1_2,
          
          column), 256
      )
    );
    HELPER(operandFromValue)(this, 5, 10, 
      Int256_zx(
        HELPER(insert_64)(this,
          
          Int256_zx(
            HELPER(operandRead)(this, 10), 256
          ),
          
          result1_3,
          
          column), 256
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 4, 4, 6, ((decoded[3] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 4, 4, 7, ((decoded[3] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 4, 4, 8, ((decoded[3] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 4, 4, 9, ((decoded[3] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 6, 5, decoded[5] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.column
    (ZX.2
      (METHOD.%1)))
  (WRITE.speculate
    (ZX.1
      (METHOD.%2)))
  (WRITE.doscale
    (ZX.1
      (METHOD.%3)))
  (WRITE.dri
    (SHL
      (METHOD.%4)
      (CONST.2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.variant
    (IOR
      (CONST.2)
      (READ.speculate)))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.32)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (WRITE.result1
    (APPLY.MEM_load
      (READ.address)
      (CONST.32)
      (READ.variant)
      (READ.dri)))
  (WRITE.result1_0
    (ZX.64
      (READ.result1)))
  (WRITE.result1_1
    (SHR
      (READ.result1)
      (CONST.64)))
  (WRITE.result1_2
    (SHR
      (READ.result1)
      (CONST.128)))
  (WRITE.result1_3
    (SHR
      (READ.result1)
      (CONST.192)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%4:0)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%4:0)
              (CONST.1))))
        (READ.result1_0)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%4:1)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%4:1)
              (CONST.1))))
        (READ.result1_1)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%4:2)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%4:2)
              (CONST.1))))
        (READ.result1_2)
        (READ.column))))
  (STORE.4
    (AGGL.XVR
      (METHOD.%4:3)
      (CONST.1))
    (I2F.256
      (APPLY.insert_64
        (F2I.256
          (LOAD.4
            (AGGL.XVR
              (METHOD.%4:3)
              (CONST.1))))
        (READ.result1_3)
        (READ.column)))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ column = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ speculate = Int256_zero;
  Int256_ variant = Int256_zero;


  column = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  speculate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  dri = 
    Int256_shl(
      Int256_fromInt64(decoded[3] - Register_kv3_X0), 
      Int256_fromUInt64(0x2LL)
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  variant = 
    Int256_or(
      Int256_fromUInt64(0x2LL), 
      speculate
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x20LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  result1 = 
    HELPER(MEM_load)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      variant,
      
      dri);
  result1_0 = 
    Int256_zx(
      result1, 64
    );
  result1_1 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x40LL)
    );
  result1_2 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0x80LL)
    );
  result1_3 = 
    Int256_shru(
      result1, 
      Int256_fromUInt64(0xc0LL)
    );
  HELPER(operandFromValue)(this, 4, 6, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 6), 256
        ),
        
        result1_0,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 4, 7, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 7), 256
        ),
        
        result1_1,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 4, 8, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 8), 256
        ),
        
        result1_2,
        
        column), 256
    )
  );
  HELPER(operandFromValue)(this, 4, 9, 
    Int256_zx(
      HELPER(insert_64)(this,
        
        Int256_zx(
          HELPER(operandRead)(this, 9), 256
        ),
        
        result1_3,
        
        column), 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 4, 6, ((decoded[3] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 4, 7, ((decoded[3] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 4, 8, ((decoded[3] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 4, 9, ((decoded[3] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_SB_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 2, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.1)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.1)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.1)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SB_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 2, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.1)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.1)
    (READ.argument3)
    (METHOD.%4)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x1LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL),
    
    argument3,
    
    Int256_fromInt64(decoded[3] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.1)
      (READ.argument3)
      (METHOD.%4))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL),
      
      argument3,
      
      Int256_fromInt64(decoded[3] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 2, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.1)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SB_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.1)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.2)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x2LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.2)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x2LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.2)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x2LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.2)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.2)
    (READ.argument3)
    (METHOD.%4)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x2LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x2LL),
    
    argument3,
    
    Int256_fromInt64(decoded[3] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.2)
      (READ.argument3)
      (METHOD.%4))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x2LL),
      
      argument3,
      
      Int256_fromInt64(decoded[3] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.2)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x2LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SH_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.2)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x2LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.4)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x4LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.4)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x4LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.4)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x4LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.4)
    (READ.argument3)
    (METHOD.%4)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x4LL),
    
    argument3,
    
    Int256_fromInt64(decoded[3] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.4)
      (READ.argument3)
      (METHOD.%4))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      argument3,
      
      Int256_fromInt64(decoded[3] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.4)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.4)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.8)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x8LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.8)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x8LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.8)
    (READ.argument3)
    (METHOD.%3)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x8LL),
    
    argument3,
    
    Int256_fromInt64(decoded[2] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.8)
    (READ.argument3)
    (METHOD.%4)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x8LL),
    
    argument3,
    
    Int256_fromInt64(decoded[3] - Register_kv3_R0));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.8)
      (READ.argument3)
      (METHOD.%4))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      argument3,
      
      Int256_fromInt64(decoded[3] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.8)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.8)
      (READ.argument3)
      (METHOD.%5))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      argument3,
      
      Int256_fromInt64(decoded[4] - Register_kv3_R0));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SQ_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 3, 2, decoded[2] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.16)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.1))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x10LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_P0), 
      Int256_fromUInt64(0x1LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_upper27_lower10_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.16)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.1))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x10LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_P0), 
      Int256_fromUInt64(0x1LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_extend27_upper27_lower10_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.16)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.1))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x10LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_P0), 
      Int256_fromUInt64(0x1LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.16)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.16)
    (READ.argument3)
    (SHL
      (METHOD.%4)
      (CONST.1))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x10LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x10LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[3] - Register_kv3_P0), 
      Int256_fromUInt64(0x1LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_lsucond_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.16)
      (READ.argument3)
      (SHL
        (METHOD.%4)
        (CONST.1)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.16)
      (READ.argument3)
      (SHL
        (METHOD.%5)
        (CONST.1)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SQ_lsucond_registerY_extend27_offset27_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.16)
      (READ.argument3)
      (SHL
        (METHOD.%5)
        (CONST.1)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x10LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SO_signed10_registerZ_registerV_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_QGR)(this, 2, 3, 2, decoded[2] - Register_kv3_Q0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_signed10_registerZ_registerV_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.2))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_Q0), 
      Int256_fromUInt64(0x2LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_upper27_lower10_registerZ_registerV_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.2))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_Q0), 
      Int256_fromUInt64(0x2LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_extend27_upper27_lower10_registerZ_registerV_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%3)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (SHL
      (METHOD.%3)
      (CONST.2))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[2] - Register_kv3_Q0), 
      Int256_fromUInt64(0x2LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SO_doscale_registerY_registerZ_registerV_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_QGR)(this, 2, 4, 3, decoded[3] - Register_kv3_Q0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_doscale_registerY_registerZ_registerV_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.32)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (SHL
      (METHOD.%4)
      (CONST.2))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x20LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    Int256_shl(
      Int256_fromInt64(decoded[3] - Register_kv3_Q0), 
      Int256_fromUInt64(0x2LL)
    ));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_lsucond_registerY_registerZ_registerV_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (SHL
        (METHOD.%4)
        (CONST.2)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_QGR)(this, 2, 5, 4, decoded[4] - Register_kv3_Q0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (SHL
        (METHOD.%5)
        (CONST.2)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SO_lsucond_registerY_extend27_offset27_registerZ_registerV_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (SHL
        (METHOD.%5)
        (CONST.2)))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_Q0), 
        Int256_fromUInt64(0x2LL)
      ));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SV_signed10_registerZ_registerE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_XVR)(this, 2, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_signed10_registerZ_registerE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.dri
    (METHOD.%3))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (READ.dri)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  dri = 
    Int256_fromInt64(decoded[2] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    dri);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_upper27_lower10_registerZ_registerE_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.dri
    (METHOD.%3))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (READ.dri)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  dri = 
    Int256_fromInt64(decoded[2] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    dri);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_extend27_upper27_lower10_registerZ_registerE_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.dri
    (METHOD.%3))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (READ.dri)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  dri = 
    Int256_fromInt64(decoded[2] - Register_kv3_A0);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    dri);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SV_doscale_registerY_registerZ_registerE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_XVR)(this, 2, 4, 3, decoded[3] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_doscale_registerY_registerZ_registerE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.dri
    (METHOD.%4))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.32)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (EFFECT.4.MEM_store
    (READ.address)
    (CONST.32)
    (READ.argument3)
    (READ.dri)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  dri = 
    Int256_fromInt64(decoded[3] - Register_kv3_A0);
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x20LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(MEM_store)(this,
    
    address,
    
    Int256_fromUInt64(0x20LL),
    
    argument3,
    
    dri);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_lsucond_registerY_registerZ_registerE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.dri
    (METHOD.%4))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (READ.dri))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ dri = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  dri = 
    Int256_fromInt64(decoded[3] - Register_kv3_A0);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      dri);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_XVR)(this, 2, 5, 4, decoded[4] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.dri
    (METHOD.%5))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%5)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (READ.dri))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  dri = 
    Int256_fromInt64(decoded[4] - Register_kv3_A0);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      dri);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SV_lsucond_registerY_extend27_offset27_registerZ_registerE_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.dri
    (METHOD.%5))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.256
      (LOAD.2
        (AGGL.XVR
          (METHOD.%5)
          (CONST.1)))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (EFFECT.4.MEM_store
      (READ.address)
      (CONST.32)
      (READ.argument3)
      (READ.dri))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ dri = Int256_zero;
  Int256_ offset = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  dri = 
    Int256_fromInt64(decoded[4] - Register_kv3_A0);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    HELPER(MEM_store)(this,
      
      address,
      
      Int256_fromUInt64(0x20LL),
      
      argument3,
      
      dri);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ACSWAPW_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 14, 3, 2, decoded[2] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_upper27_lower10_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_extend27_upper27_lower10_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 14, 4, 3, decoded[3] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_lsucond_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%4)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 14, 5, 4, decoded[4] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPW_lsucond_registerY_extend27_offset27_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_upper27_lower10_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_extend27_upper27_lower10_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%3)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[2] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_lsucond_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%4)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[3] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ACSWAPD_lsucond_registerY_extend27_offset27_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.boolcas
    (CONST.1))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  boolcas = 
    Int256_fromUInt64(0x1LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ALCLRW_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 2, 1, Int256_fromInt64((ImmediateValue)decoded[2-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_swap
        (READ.address)
        (CONST.4)
        (CONST.0)
        (METHOD.%1))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[0] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ALCLRW_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 4, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_swap
        (READ.address)
        (CONST.4)
        (CONST.0)
        (METHOD.%1))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[0] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_swap
        (READ.address)
        (CONST.4)
        (CONST.0)
        (METHOD.%1))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[0] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (ZX.32
      (APPLY.MEM_swap
        (READ.address)
        (CONST.4)
        (CONST.0)
        (METHOD.%2))))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    Int256_zx(
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[1] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_swap
            (READ.address)
            (CONST.4)
            (CONST.0)
            (METHOD.%3))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_swap)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          Int256_fromUInt64(0LL),
          
          Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_swap
            (READ.address)
            (CONST.4)
            (CONST.0)
            (METHOD.%3))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_swap)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          Int256_fromUInt64(0LL),
          
          Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRW_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (ZX.32
          (APPLY.MEM_swap
            (READ.address)
            (CONST.4)
            (CONST.0)
            (METHOD.%3))))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      Int256_zx(
        HELPER(MEM_swap)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          Int256_fromUInt64(0LL),
          
          Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_registerW_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_swap
      (READ.address)
      (CONST.8)
      (CONST.0)
      (METHOD.%1)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_swap)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      Int256_fromUInt64(0LL),
      
      Int256_fromInt64(decoded[0] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_registerW_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_swap
      (READ.address)
      (CONST.8)
      (CONST.0)
      (METHOD.%1)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_swap)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      Int256_fromUInt64(0LL),
      
      Int256_fromInt64(decoded[0] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_registerW_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%2)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.result1
    (APPLY.MEM_swap
      (READ.address)
      (CONST.8)
      (CONST.0)
      (METHOD.%1)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  result1 = 
    HELPER(MEM_swap)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      Int256_fromUInt64(0LL),
      
      Int256_fromInt64(decoded[0] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_doscale_registerW_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.result1
    (APPLY.MEM_swap
      (READ.address)
      (CONST.8)
      (CONST.0)
      (METHOD.%2)))
  (STORE.4
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  result1 = 
    HELPER(MEM_swap)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      Int256_fromUInt64(0LL),
      
      Int256_fromInt64(decoded[1] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_lsucond_registerY_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_swap
          (READ.address)
          (CONST.8)
          (CONST.0)
          (METHOD.%3)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_lsucond_registerY_registerW_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_swap
          (READ.address)
          (CONST.8)
          (CONST.0)
          (METHOD.%3)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALCLRD_lsucond_registerY_registerW_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument2))
    (SEQ
      (WRITE.result1
        (APPLY.MEM_swap
          (READ.address)
          (CONST.8)
          (CONST.0)
          (METHOD.%3)))
      (STORE.4
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result1))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result1 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument2)
  )
  {
    result1 = 
      HELPER(MEM_swap)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        Int256_fromUInt64(0LL),
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result1, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.32
      (READ.argument3)))
  (WRITE.result3
    (ZX.32
      (APPLY.MEM_faa
        (READ.address)
        (CONST.4)
        (READ.addend)
        (METHOD.%3))))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 32
    );
  result3 = 
    Int256_zx(
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        addend,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ALADDW_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 14, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.32
      (READ.argument3)))
  (WRITE.result3
    (ZX.32
      (APPLY.MEM_faa
        (READ.address)
        (CONST.4)
        (READ.addend)
        (METHOD.%3))))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 32
    );
  result3 = 
    Int256_zx(
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        addend,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.32
      (READ.argument3)))
  (WRITE.result3
    (ZX.32
      (APPLY.MEM_faa
        (READ.address)
        (CONST.4)
        (READ.addend)
        (METHOD.%3))))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 32
    );
  result3 = 
    Int256_zx(
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        addend,
        
        Int256_fromInt64(decoded[2] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.addend
    (SX.32
      (READ.argument3)))
  (WRITE.result3
    (ZX.32
      (APPLY.MEM_faa
        (READ.address)
        (CONST.4)
        (READ.addend)
        (METHOD.%4))))
  (STORE.14
    (AGGL.GPR
      (METHOD.%4)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  addend = 
    Int256_sx(
      argument3, 32
    );
  result3 = 
    Int256_zx(
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        addend,
        
        Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 14, 4, 3, decoded[3] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.32
          (READ.argument3)))
      (WRITE.result3
        (ZX.32
          (APPLY.MEM_faa
            (READ.address)
            (CONST.4)
            (READ.addend)
            (METHOD.%4))))
      (STORE.14
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 32
      );
    result3 = 
      Int256_zx(
        HELPER(MEM_faa)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          addend,
          
          Int256_fromInt64(decoded[3] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.32
          (READ.argument3)))
      (WRITE.result3
        (ZX.32
          (APPLY.MEM_faa
            (READ.address)
            (CONST.4)
            (READ.addend)
            (METHOD.%5))))
      (STORE.14
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 32
      );
    result3 = 
      Int256_zx(
        HELPER(MEM_faa)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          addend,
          
          Int256_fromInt64(decoded[4] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 14, 5, 4, decoded[4] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.32
          (READ.argument3)))
      (WRITE.result3
        (ZX.32
          (APPLY.MEM_faa
            (READ.address)
            (CONST.4)
            (READ.addend)
            (METHOD.%5))))
      (STORE.14
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 32
      );
    result3 = 
      Int256_zx(
        HELPER(MEM_faa)(this,
          
          address,
          
          Int256_fromUInt64(0x4LL),
          
          addend,
          
          Int256_fromInt64(decoded[4] - Register_kv3_R0)), 32
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_signed10_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.64
      (READ.argument3)))
  (WRITE.result3
    (APPLY.MEM_faa
      (READ.address)
      (CONST.8)
      (READ.addend)
      (METHOD.%3)))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 64
    );
  result3 = 
    HELPER(MEM_faa)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      addend,
      
      Int256_fromInt64(decoded[2] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_upper27_lower10_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.64
      (READ.argument3)))
  (WRITE.result3
    (APPLY.MEM_faa
      (READ.address)
      (CONST.8)
      (READ.addend)
      (METHOD.%3)))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 64
    );
  result3 = 
    HELPER(MEM_faa)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      addend,
      
      Int256_fromInt64(decoded[2] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_extend27_upper27_lower10_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.addend
    (SX.64
      (READ.argument3)))
  (WRITE.result3
    (APPLY.MEM_faa
      (READ.address)
      (CONST.8)
      (READ.addend)
      (METHOD.%3)))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  addend = 
    Int256_sx(
      argument3, 64
    );
  result3 = 
    HELPER(MEM_faa)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      addend,
      
      Int256_fromInt64(decoded[2] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_doscale_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.addend
    (SX.64
      (READ.argument3)))
  (WRITE.result3
    (APPLY.MEM_faa
      (READ.address)
      (CONST.8)
      (READ.addend)
      (METHOD.%4)))
  (STORE.14
    (AGGL.GPR
      (METHOD.%4)
      (CONST.1))
    (I2F.64
      (READ.result3))))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  addend = 
    Int256_sx(
      argument3, 64
    );
  result3 = 
    HELPER(MEM_faa)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      addend,
      
      Int256_fromInt64(decoded[3] - Register_kv3_R0));
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_lsucond_registerY_registerZ_registerT_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.64
          (READ.argument3)))
      (WRITE.result3
        (APPLY.MEM_faa
          (READ.address)
          (CONST.8)
          (READ.addend)
          (METHOD.%4)))
      (STORE.14
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 64
      );
    result3 = 
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        addend,
        
        Int256_fromInt64(decoded[3] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 4, 3, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_lsucond_registerY_offset27_registerZ_registerT_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.64
          (READ.argument3)))
      (WRITE.result3
        (APPLY.MEM_faa
          (READ.address)
          (CONST.8)
          (READ.addend)
          (METHOD.%5)))
      (STORE.14
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 64
      );
    result3 = 
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        addend,
        
        Int256_fromInt64(decoded[4] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALADDD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.addend
        (SX.64
          (READ.argument3)))
      (WRITE.result3
        (APPLY.MEM_faa
          (READ.address)
          (CONST.8)
          (READ.addend)
          (METHOD.%5)))
      (STORE.14
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1))
        (I2F.64
          (READ.result3))))
    (SKIP)))
*/
  Int256_ addend = Int256_zero;
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    addend = 
      Int256_sx(
        argument3, 64
      );
    result3 = 
      HELPER(MEM_faa)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        addend,
        
        Int256_fromInt64(decoded[4] - Register_kv3_R0));
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_DTOUCHL_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromInt64((ImmediateValue)decoded[1-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_DTOUCHL_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_DTOUCHL_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DTOUCHL_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVALL_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dzerol
    (READ.address)
    (CONST.1)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dzerol)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dzerol
    (READ.address)
    (CONST.1)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dzerol)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dzerol
    (READ.address)
    (CONST.1)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dzerol)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_dzerol
    (READ.address)
    (CONST.1)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_dzerol)(this,
    
    address,
    
    Int256_fromUInt64(0x1LL));;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dzerol
      (READ.address)
      (CONST.1))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dzerol)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dzerol
      (READ.address)
      (CONST.1))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dzerol)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DZEROL_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dzerol
      (READ.address)
      (CONST.1))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dzerol)(this,
      
      address,
      
      Int256_fromUInt64(0x1LL));
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 10
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 37
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.27
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 27
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVALS_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%1)))
  (WRITE.offset
    (SX.54
      (METHOD.%3)))
  (WRITE.cachelev
    (CONST.0))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 54
    );
  cachelev = 
    Int256_fromUInt64(0LL);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DINVAL_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.4.MEM_dinval)
*/


  HELPER(MEM_dinval)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_IINVAL_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.4.MEM_iinval)
*/


  HELPER(MEM_iinval)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FENCE_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(EFFECT.4.MEM_fence)
*/


  HELPER(MEM_fence)(this);

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NOP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SKIP)
*/

;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_STSUD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_STSUD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SELECT
      (GE
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))
      (IOR
        (SHL
          (SUB
            (ZX.64
              (READ.argument3))
            (ZX.64
              (READ.argument2)))
          (CONST.1))
        (CONST.1))
      (SHL
        (ZX.64
          (READ.argument3))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) >= 0
    ?
    Int256_or(
      Int256_shl(
        Int256_sub(
          Int256_zx(
            argument3, 64
          ), 
          Int256_zx(
            argument2, 64
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_shl(
      Int256_zx(
        argument3, 64
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MIND_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 64
    )
    :
    Int256_sx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MIND_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 64
    )
    :
    Int256_sx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MIND_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 64
    )
    :
    Int256_sx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MIND_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 64
    )
    :
    Int256_sx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    Int256_zx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    Int256_zx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    Int256_zx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    Int256_zx(
      argument3, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 64
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 64
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 64
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 64
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 64
    )
    :
    Int256_zx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 64
    )
    :
    Int256_zx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 64
    )
    :
    Int256_zx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 64
    )
    :
    Int256_zx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDND_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDND_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDND_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDND_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDND_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORND_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORND_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORND_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORND_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORND_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMM8_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMM_8
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMM_8)(this,
      
      Int256_zx(
        argument3, 64
      ),
      
      Int256_zx(
        argument2, 64
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMM8_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMM_8
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMM_8)(this,
      
      Int256_zx(
        argument3, 64
      ),
      
      Int256_zx(
        argument2, 64
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMM8_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMM_8
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMM_8)(this,
      
      Int256_zx(
        argument3, 64
      ),
      
      Int256_zx(
        argument2, 64
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMM8_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMM_8
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMM_8)(this,
      
      Int256_zx(
        argument3, 64
      ),
      
      Int256_zx(
        argument2, 64
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMM8_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMM_8
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMM_8)(this,
      
      Int256_zx(
        argument3, 64
      ),
      
      Int256_zx(
        argument2, 64
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMMT8_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMT_8
      (APPLY.64._BMM_8
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMT_8)(this,
      
      HELPER(_BMM_8)(this,
        
        Int256_zx(
          argument3, 64
        ),
        
        Int256_zx(
          argument2, 64
        )));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMMT8_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (IOR
      (SHL
        (SX.32
          (METHOD.%3))
        (CONST.32))
      (ZX.32
        (METHOD.%3))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMT_8
      (APPLY.64._BMM_8
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 2), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 2), 32
      )
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMT_8)(this,
      
      HELPER(_BMM_8)(this,
        
        Int256_zx(
          argument3, 64
        ),
        
        Int256_zx(
          argument2, 64
        )));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMMT8_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMT_8
      (APPLY.64._BMM_8
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMT_8)(this,
      
      HELPER(_BMM_8)(this,
        
        Int256_zx(
          argument3, 64
        ),
        
        Int256_zx(
          argument2, 64
        )));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMMT8_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMT_8
      (APPLY.64._BMM_8
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMT_8)(this,
      
      HELPER(_BMM_8)(this,
        
        Int256_zx(
          argument3, 64
        ),
        
        Int256_zx(
          argument2, 64
        )));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBMMT8_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.64._BMT_8
      (APPLY.64._BMM_8
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(_BMT_8)(this,
      
      HELPER(_BMM_8)(this,
        
        Int256_zx(
          argument3, 64
        ),
        
        Int256_zx(
          argument2, 64
        )));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (ADD
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (ADD
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (ADD
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (ADD
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.64
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 2, 2, 1, decoded[1] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16D_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16D_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDWD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFWD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDUWD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFUWD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (ANDL
        (I2B
          (ZX.64
            (READ.argument3)))
        (I2B
          (ZX.64
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (ANDL
        (I2B
          (ZX.64
            (READ.argument3)))
        (I2B
          (ZX.64
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.64
              (READ.argument3)))
          (I2B
            (ZX.64
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.64
              (READ.argument3)))
          (I2B
            (ZX.64
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (IORL
        (I2B
          (ZX.64
            (READ.argument3)))
        (I2B
          (ZX.64
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (IORL
        (I2B
          (ZX.64
            (READ.argument3)))
        (I2B
          (ZX.64
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.64
              (READ.argument3)))
          (I2B
            (ZX.64
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORD_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%4)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.64
              (READ.argument3)))
          (I2B
            (ZX.64
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 64
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 64
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_STSUW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SELECT
      (GE
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))
      (IOR
        (SHL
          (SUB
            (ZX.32
              (READ.argument3))
            (ZX.32
              (READ.argument2)))
          (CONST.1))
        (CONST.1))
      (SHL
        (ZX.32
          (READ.argument3))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) >= 0
    ?
    Int256_or(
      Int256_shl(
        Int256_sub(
          Int256_zx(
            argument3, 32
          ), 
          Int256_zx(
            argument2, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_shl(
      Int256_zx(
        argument3, 32
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 32
    )
    :
    Int256_sx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 32
    )
    :
    Int256_sx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2, 32
    )
    :
    Int256_sx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 32
    )
    :
    Int256_zx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 32
    )
    :
    Int256_zx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MIN
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 32
    )
    :
    Int256_zx(
      argument3, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 32
    )
    :
    Int256_sx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 32
    )
    :
    Int256_sx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3, 32
    )
    :
    Int256_sx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 32
    )
    :
    Int256_zx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 32
    )
    :
    Int256_zx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MAX
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_cmp(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 32
    )
    :
    Int256_zx(
      argument2, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NANDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (AND
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_and(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (IOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_or(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_XORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NXORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (NOT
      (XOR
        (READ.argument2)
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_not(
      Int256_xor(
        argument2, 
        argument3
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDNW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDNW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ANDNW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORNW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORNW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ORNW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (NOT
        (READ.argument2))
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_not(
        argument2
      ), 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16W_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (SHL
        (READ.argument2)
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      Int256_shl(
        argument2, 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3))
          (SX.32
            (READ.argument2)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3, 32
          ), 
          Int256_sx(
            argument2, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3))
          (SX.32
            (READ.argument2)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3, 32
          ), 
          Int256_sx(
            argument2, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3))
          (ZX.32
            (READ.argument2)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3, 32
          ), 
          Int256_zx(
            argument2, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3))
          (ZX.32
            (READ.argument2)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3, 32
          ), 
          Int256_zx(
            argument2, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3)))
        (I2B
          (ZX.32
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3)))
        (I2B
          (ZX.32
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3)))
          (I2B
            (ZX.32
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3)))
          (I2B
            (ZX.32
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3)))
        (I2B
          (ZX.32
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3)))
        (I2B
          (ZX.32
            (READ.argument2))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3)))
          (I2B
            (ZX.32
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3)))
          (I2B
            (ZX.32
              (READ.argument2)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ABS
      (SUB
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ABS
      (SUB
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ABS
      (SUB
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ABS
      (SUB
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MIN
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MIN
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2_l, 32
    )
    :
    Int256_sx(
      argument3_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2_m, 32
    )
    :
    Int256_sx(
      argument3_m, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MIN
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MIN
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2_l, 32
    )
    :
    Int256_sx(
      argument3_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument2_m, 32
    )
    :
    Int256_sx(
      argument3_m, 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MIN
      (ZX.32
        (READ.argument3_l))
      (ZX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MIN
      (ZX.32
        (READ.argument3_m))
      (ZX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_zx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2_l, 32
    )
    :
    Int256_zx(
      argument3_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_zx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2_m, 32
    )
    :
    Int256_zx(
      argument3_m, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MIN
      (ZX.32
        (READ.argument3_l))
      (ZX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MIN
      (ZX.32
        (READ.argument3_m))
      (ZX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_zx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2_l, 32
    )
    :
    Int256_zx(
      argument3_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_zx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument2_m, 32
    )
    :
    Int256_zx(
      argument3_m, 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MAX
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MAX
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3_l, 32
    )
    :
    Int256_sx(
      argument2_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3_m, 32
    )
    :
    Int256_sx(
      argument2_m, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MAX
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MAX
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3_l, 32
    )
    :
    Int256_sx(
      argument2_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_sx(
      argument3_m, 32
    )
    :
    Int256_sx(
      argument2_m, 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MAX
      (ZX.32
        (READ.argument3_l))
      (ZX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MAX
      (ZX.32
        (READ.argument3_m))
      (ZX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_zx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3_l, 32
    )
    :
    Int256_zx(
      argument2_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_zx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3_m, 32
    )
    :
    Int256_zx(
      argument2_m, 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MAX
      (ZX.32
        (READ.argument3_l))
      (ZX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MAX
      (ZX.32
        (READ.argument3_m))
      (ZX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_cmp(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_zx(
        argument2_l, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3_l, 32
    )
    :
    Int256_zx(
      argument2_l, 32
    );
  result1_m = 
    Int256_cmp(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_zx(
        argument2_m, 32
      )
    ) > 0
    ?
    Int256_zx(
      argument3_m, 32
    )
    :
    Int256_zx(
      argument2_m, 32
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCWC_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCWC_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCWC_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCWC_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SAT.32
      (ADD
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SAT.32
      (SUB
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 32);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.1))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.1))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.2))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.2))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.3))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.3))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.4))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.4))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.1))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.1))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.2))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.2))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.3))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.3))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16WP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.4))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16WP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SHL
        (SX.32
          (READ.argument2_l))
        (CONST.4))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SHL
        (SX.32
          (READ.argument2_m))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3_l))
          (SX.32
            (READ.argument2_l)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3_m))
          (SX.32
            (READ.argument2_m)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_l, 32
          ), 
          Int256_sx(
            argument2_l, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_m, 32
          ), 
          Int256_sx(
            argument2_m, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3_l))
          (SX.32
            (READ.argument2_l)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ADD
          (SX.32
            (READ.argument3_m))
          (SX.32
            (READ.argument2_m)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_l, 32
          ), 
          Int256_sx(
            argument2_l, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_m, 32
          ), 
          Int256_sx(
            argument2_m, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3_l))
          (ZX.32
            (READ.argument2_l)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3_m))
          (ZX.32
            (READ.argument2_m)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_l, 32
          ), 
          Int256_zx(
            argument2_l, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_m, 32
          ), 
          Int256_zx(
            argument2_m, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3_l))
          (ZX.32
            (READ.argument2_l)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_m
    (SHR
      (ADD
        (ADD
          (ZX.32
            (READ.argument3_m))
          (ZX.32
            (READ.argument2_m)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_l, 32
          ), 
          Int256_zx(
            argument2_l, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_m, 32
          ), 
          Int256_zx(
            argument2_m, 32
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3_l)))
        (I2B
          (ZX.32
            (READ.argument2_l))))))
  (WRITE.result1_m
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3_m)))
        (I2B
          (ZX.32
            (READ.argument2_m))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
    );
  result1_m = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3_l)))
        (I2B
          (ZX.32
            (READ.argument2_l))))))
  (WRITE.result1_m
    (B2I
      (ANDL
        (I2B
          (ZX.32
            (READ.argument3_m)))
        (I2B
          (ZX.32
            (READ.argument2_m))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
    );
  result1_m = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3_l)))
          (I2B
            (ZX.32
              (READ.argument2_l)))))))
  (WRITE.result1_m
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3_m)))
          (I2B
            (ZX.32
              (READ.argument2_m)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
      )
    );
  result1_m = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3_l)))
          (I2B
            (ZX.32
              (READ.argument2_l)))))))
  (WRITE.result1_m
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.32
              (READ.argument3_m)))
          (I2B
            (ZX.32
              (READ.argument2_m)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
      )
    );
  result1_m = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3_l)))
        (I2B
          (ZX.32
            (READ.argument2_l))))))
  (WRITE.result1_m
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3_m)))
        (I2B
          (ZX.32
            (READ.argument2_m))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
    );
  result1_m = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3_l)))
        (I2B
          (ZX.32
            (READ.argument2_l))))))
  (WRITE.result1_m
    (B2I
      (IORL
        (I2B
          (ZX.32
            (READ.argument3_m)))
        (I2B
          (ZX.32
            (READ.argument2_m))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
    );
  result1_m = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3_l)))
          (I2B
            (ZX.32
              (READ.argument2_l)))))))
  (WRITE.result1_m
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3_m)))
          (I2B
            (ZX.32
              (READ.argument2_m)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
      )
    );
  result1_m = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORWP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3_l)))
          (I2B
            (ZX.32
              (READ.argument2_l)))))))
  (WRITE.result1_m
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.32
              (READ.argument3_m)))
          (I2B
            (ZX.32
              (READ.argument2_m)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_l, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_l, 32
          )
        )
      )
      )
    );
  result1_m = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_m, 32
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_m, 32
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ABS
      (SUB
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ABS
      (SUB
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ABS
      (SUB
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ABS
      (SUB
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABDHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ABS
      (SUB
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ABS
      (SUB
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ABS
      (SUB
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ABS
      (SUB
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MIN
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MIN
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MIN
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MIN
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_x, 16
    )
    :
    Int256_sx(
      argument3_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_y, 16
    )
    :
    Int256_sx(
      argument3_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_z, 16
    )
    :
    Int256_sx(
      argument3_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_t, 16
    )
    :
    Int256_sx(
      argument3_t, 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MIN
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MIN
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MIN
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MIN
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_x, 16
    )
    :
    Int256_sx(
      argument3_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_y, 16
    )
    :
    Int256_sx(
      argument3_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_z, 16
    )
    :
    Int256_sx(
      argument3_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument2_t, 16
    )
    :
    Int256_sx(
      argument3_t, 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MIN
      (ZX.16
        (READ.argument3_x))
      (ZX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MIN
      (ZX.16
        (READ.argument3_y))
      (ZX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MIN
      (ZX.16
        (READ.argument3_z))
      (ZX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MIN
      (ZX.16
        (READ.argument3_t))
      (ZX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_zx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_x, 16
    )
    :
    Int256_zx(
      argument3_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_zx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_y, 16
    )
    :
    Int256_zx(
      argument3_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_zx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_z, 16
    )
    :
    Int256_zx(
      argument3_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_zx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_t, 16
    )
    :
    Int256_zx(
      argument3_t, 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MINUHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MIN
      (ZX.16
        (READ.argument3_x))
      (ZX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MIN
      (ZX.16
        (READ.argument3_y))
      (ZX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MIN
      (ZX.16
        (READ.argument3_z))
      (ZX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MIN
      (ZX.16
        (READ.argument3_t))
      (ZX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_zx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_x, 16
    )
    :
    Int256_zx(
      argument3_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_zx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_y, 16
    )
    :
    Int256_zx(
      argument3_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_zx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_z, 16
    )
    :
    Int256_zx(
      argument3_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_zx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument2_t, 16
    )
    :
    Int256_zx(
      argument3_t, 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MAX
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MAX
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MAX
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MAX
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_x, 16
    )
    :
    Int256_sx(
      argument2_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_y, 16
    )
    :
    Int256_sx(
      argument2_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_z, 16
    )
    :
    Int256_sx(
      argument2_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_t, 16
    )
    :
    Int256_sx(
      argument2_t, 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MAX
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MAX
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MAX
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MAX
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_x, 16
    )
    :
    Int256_sx(
      argument2_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_y, 16
    )
    :
    Int256_sx(
      argument2_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_z, 16
    )
    :
    Int256_sx(
      argument2_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_sx(
      argument3_t, 16
    )
    :
    Int256_sx(
      argument2_t, 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MAX
      (ZX.16
        (READ.argument3_x))
      (ZX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MAX
      (ZX.16
        (READ.argument3_y))
      (ZX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MAX
      (ZX.16
        (READ.argument3_z))
      (ZX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MAX
      (ZX.16
        (READ.argument3_t))
      (ZX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_zx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_x, 16
    )
    :
    Int256_zx(
      argument2_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_zx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_y, 16
    )
    :
    Int256_zx(
      argument2_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_zx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_z, 16
    )
    :
    Int256_zx(
      argument2_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_zx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_t, 16
    )
    :
    Int256_zx(
      argument2_t, 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAXUHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MAX
      (ZX.16
        (READ.argument3_x))
      (ZX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MAX
      (ZX.16
        (READ.argument3_y))
      (ZX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MAX
      (ZX.16
        (READ.argument3_z))
      (ZX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MAX
      (ZX.16
        (READ.argument3_t))
      (ZX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_cmp(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_zx(
        argument2_x, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_x, 16
    )
    :
    Int256_zx(
      argument2_x, 16
    );
  result1_y = 
    Int256_cmp(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_zx(
        argument2_y, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_y, 16
    )
    :
    Int256_zx(
      argument2_y, 16
    );
  result1_z = 
    Int256_cmp(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_zx(
        argument2_z, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_z, 16
    )
    :
    Int256_zx(
      argument2_z, 16
    );
  result1_t = 
    Int256_cmp(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_zx(
        argument2_t, 16
      )
    ) > 0
    ?
    Int256_zx(
      argument3_t, 16
    )
    :
    Int256_zx(
      argument2_t, 16
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCHCP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCHCP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCHCP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCHCP_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 16);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDSHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SAT.16
      (ADD
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_add(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 16);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 16);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFSHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SAT.16
      (SUB
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_sub(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 16);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.1))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.1))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.1))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.1))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.1))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.1))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.2))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.2))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.2))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.2))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.2))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.2))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.3))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.3))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.3))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.3))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.3))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.3))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.4))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.4))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.4))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.4))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.4))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.4))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.1))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.1))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.1))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.1))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.1))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.1))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.2))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.2))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.2))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.2))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.2))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.2))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.3))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.3))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.3))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.3))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.3))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.3))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16HQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.4))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.4))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.4))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16HQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SHL
        (SX.16
          (READ.argument2_x))
        (CONST.4))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SHL
        (SX.16
          (READ.argument2_y))
        (CONST.4))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SHL
        (SX.16
          (READ.argument2_z))
        (CONST.4))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SHL
        (SX.16
          (READ.argument2_t))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_x))
        (ZX.16
          (READ.argument2_x)))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_y))
        (ZX.16
          (READ.argument2_y)))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_z))
        (ZX.16
          (READ.argument2_z)))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_t))
        (ZX.16
          (READ.argument2_t)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_zx(
          argument2_x, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_zx(
          argument2_y, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_zx(
          argument2_z, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_zx(
          argument2_t, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGUHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_x))
        (ZX.16
          (READ.argument2_x)))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_y))
        (ZX.16
          (READ.argument2_y)))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_z))
        (ZX.16
          (READ.argument2_z)))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ZX.16
          (READ.argument3_t))
        (ZX.16
          (READ.argument2_t)))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_zx(
          argument2_x, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_zx(
          argument2_y, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_zx(
          argument2_z, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_zx(
          argument2_t, 16
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_x))
          (SX.16
            (READ.argument2_x)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_y))
          (SX.16
            (READ.argument2_y)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_z))
          (SX.16
            (READ.argument2_z)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_t))
          (SX.16
            (READ.argument2_t)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_x, 16
          ), 
          Int256_sx(
            argument2_x, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_y, 16
          ), 
          Int256_sx(
            argument2_y, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_z, 16
          ), 
          Int256_sx(
            argument2_z, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_t, 16
          ), 
          Int256_sx(
            argument2_t, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_x))
          (SX.16
            (READ.argument2_x)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_y))
          (SX.16
            (READ.argument2_y)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_z))
          (SX.16
            (READ.argument2_z)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ADD
          (SX.16
            (READ.argument3_t))
          (SX.16
            (READ.argument2_t)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_x, 16
          ), 
          Int256_sx(
            argument2_x, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_y, 16
          ), 
          Int256_sx(
            argument2_y, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_z, 16
          ), 
          Int256_sx(
            argument2_z, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_sx(
            argument3_t, 16
          ), 
          Int256_sx(
            argument2_t, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_x))
          (ZX.16
            (READ.argument2_x)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_y))
          (ZX.16
            (READ.argument2_y)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_z))
          (ZX.16
            (READ.argument2_z)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_t))
          (ZX.16
            (READ.argument2_t)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_x, 16
          ), 
          Int256_zx(
            argument2_x, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_y, 16
          ), 
          Int256_zx(
            argument2_y, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_z, 16
          ), 
          Int256_zx(
            argument2_z, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_t, 16
          ), 
          Int256_zx(
            argument2_t, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_AVGRUHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_x))
          (ZX.16
            (READ.argument2_x)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_y
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_y))
          (ZX.16
            (READ.argument2_y)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_z
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_z))
          (ZX.16
            (READ.argument2_z)))
        (CONST.1))
      (CONST.1)))
  (WRITE.result1_t
    (SHR
      (ADD
        (ADD
          (ZX.16
            (READ.argument3_t))
          (ZX.16
            (READ.argument2_t)))
        (CONST.1))
      (CONST.1)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_x, 16
          ), 
          Int256_zx(
            argument2_x, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_y, 16
          ), 
          Int256_zx(
            argument2_y, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_z, 16
          ), 
          Int256_zx(
            argument2_z, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_add(
          Int256_zx(
            argument3_t, 16
          ), 
          Int256_zx(
            argument2_t, 16
          )
        ), 
        Int256_fromUInt64(0x1LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_x)))
        (I2B
          (ZX.16
            (READ.argument2_x))))))
  (WRITE.result1_y
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_y)))
        (I2B
          (ZX.16
            (READ.argument2_y))))))
  (WRITE.result1_z
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_z)))
        (I2B
          (ZX.16
            (READ.argument2_z))))))
  (WRITE.result1_t
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_t)))
        (I2B
          (ZX.16
            (READ.argument2_t))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
    );
  result1_y = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
    );
  result1_z = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
    );
  result1_t = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LANDHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_x)))
        (I2B
          (ZX.16
            (READ.argument2_x))))))
  (WRITE.result1_y
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_y)))
        (I2B
          (ZX.16
            (READ.argument2_y))))))
  (WRITE.result1_z
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_z)))
        (I2B
          (ZX.16
            (READ.argument2_z))))))
  (WRITE.result1_t
    (B2I
      (ANDL
        (I2B
          (ZX.16
            (READ.argument3_t)))
        (I2B
          (ZX.16
            (READ.argument2_t))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
    );
  result1_y = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
    );
  result1_z = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
    );
  result1_t = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_x)))
          (I2B
            (ZX.16
              (READ.argument2_x)))))))
  (WRITE.result1_y
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_y)))
          (I2B
            (ZX.16
              (READ.argument2_y)))))))
  (WRITE.result1_z
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_z)))
          (I2B
            (ZX.16
              (READ.argument2_z)))))))
  (WRITE.result1_t
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_t)))
          (I2B
            (ZX.16
              (READ.argument2_t)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
      )
    );
  result1_y = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
      )
    );
  result1_z = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
      )
    );
  result1_t = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNANDHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_x)))
          (I2B
            (ZX.16
              (READ.argument2_x)))))))
  (WRITE.result1_y
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_y)))
          (I2B
            (ZX.16
              (READ.argument2_y)))))))
  (WRITE.result1_z
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_z)))
          (I2B
            (ZX.16
              (READ.argument2_z)))))))
  (WRITE.result1_t
    (B2I
      (NOTL
        (ANDL
          (I2B
            (ZX.16
              (READ.argument3_t)))
          (I2B
            (ZX.16
              (READ.argument2_t)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
      )
    );
  result1_y = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
      )
    );
  result1_z = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
      )
    );
  result1_t = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         && 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_x)))
        (I2B
          (ZX.16
            (READ.argument2_x))))))
  (WRITE.result1_y
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_y)))
        (I2B
          (ZX.16
            (READ.argument2_y))))))
  (WRITE.result1_z
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_z)))
        (I2B
          (ZX.16
            (READ.argument2_z))))))
  (WRITE.result1_t
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_t)))
        (I2B
          (ZX.16
            (READ.argument2_t))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
    );
  result1_y = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
    );
  result1_z = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
    );
  result1_t = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LORHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_x)))
        (I2B
          (ZX.16
            (READ.argument2_x))))))
  (WRITE.result1_y
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_y)))
        (I2B
          (ZX.16
            (READ.argument2_y))))))
  (WRITE.result1_z
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_z)))
        (I2B
          (ZX.16
            (READ.argument2_z))))))
  (WRITE.result1_t
    (B2I
      (IORL
        (I2B
          (ZX.16
            (READ.argument3_t)))
        (I2B
          (ZX.16
            (READ.argument2_t))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
    );
  result1_y = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
    );
  result1_z = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
    );
  result1_t = 
    Int256_fromBool(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_x)))
          (I2B
            (ZX.16
              (READ.argument2_x)))))))
  (WRITE.result1_y
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_y)))
          (I2B
            (ZX.16
              (READ.argument2_y)))))))
  (WRITE.result1_z
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_z)))
          (I2B
            (ZX.16
              (READ.argument2_z)))))))
  (WRITE.result1_t
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_t)))
          (I2B
            (ZX.16
              (READ.argument2_t)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
      )
    );
  result1_y = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
      )
    );
  result1_z = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
      )
    );
  result1_t = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_LNORHQ_splat32_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (IOR
        (SHL
          (SX.32
            (METHOD.%4))
          (CONST.32))
        (ZX.32
          (METHOD.%4)))
      (SX.32
        (METHOD.%4))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_x)))
          (I2B
            (ZX.16
              (READ.argument2_x)))))))
  (WRITE.result1_y
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_y)))
          (I2B
            (ZX.16
              (READ.argument2_y)))))))
  (WRITE.result1_z
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_z)))
          (I2B
            (ZX.16
              (READ.argument2_z)))))))
  (WRITE.result1_t
    (B2I
      (NOTL
        (IORL
          (I2B
            (ZX.16
              (READ.argument3_t)))
          (I2B
            (ZX.16
              (READ.argument2_t)))))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_or(
      Int256_shl(
        Int256_sx(
          HELPER(operandRead)(this, 3), 32
        ), 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        HELPER(operandRead)(this, 3), 32
      )
    )
    :
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_x, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_x, 16
          )
        )
      )
      )
    );
  result1_y = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_y, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_y, 16
          )
        )
      )
      )
    );
  result1_z = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_z, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_z, 16
          )
        )
      )
      )
    );
  result1_t = 
    Int256_fromBool(
      !(
      (
        Int256_toBool(
          Int256_zx(
            argument3_t, 16
          )
        )
         || 
        Int256_toBool(
          Int256_zx(
            argument2_t, 16
          )
        )
      )
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16WD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (SX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX2UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX4UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX8UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDX16UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX2UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.1))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x1LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX4UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x2LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX8UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x3LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFX16UWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument3))
      (SHL
        (ZX.32
          (READ.argument2))
        (CONST.4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument3, 64
      ), 
      Int256_shl(
        Int256_zx(
          argument2, 32
        ), 
        Int256_fromUInt64(0x4LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (READ.argument2))
        (ZX.64
          (READ.argument3)))
      (F2I.1
        (LOAD.1
          (AGGL.CS
            (CONST.0)
            (CONST.1))))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          argument2, 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 0, 1, 1), 1
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (READ.argument2))
        (ZX.64
          (READ.argument3)))
      (F2I.1
        (LOAD.1
          (AGGL.CS
            (CONST.0)
            (CONST.1))))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          argument2, 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 0, 1, 1), 1
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (NOT
            (READ.argument2)))
        (ZX.64
          (READ.argument3)))
      (F2I.1
        (LOAD.1
          (AGGL.CS
            (CONST.0)
            (CONST.1))))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          Int256_not(
            argument2
          ), 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 0, 1, 1), 1
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (NOT
            (READ.argument2)))
        (ZX.64
          (READ.argument3)))
      (F2I.1
        (LOAD.1
          (AGGL.CS
            (CONST.0)
            (CONST.1))))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          Int256_not(
            argument2
          ), 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 0, 1, 1), 1
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCD_I_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument2))
      (ZX.64
        (READ.argument3))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 64
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ADDCD_I_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument2))
      (ZX.64
        (READ.argument3))))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 64
      )
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCD_I_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (NOT
            (READ.argument2)))
        (ZX.64
          (READ.argument3)))
      (CONST.1)))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          Int256_not(
            argument2
          ), 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SBFCD_I_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ADD
        (ZX.64
          (NOT
            (READ.argument2)))
        (ZX.64
          (READ.argument3)))
      (CONST.1)))
  (WRITE.carry
    (AND
      (SHR
        (READ.result1)
        (CONST.64))
      (CONST.1)))
  (STORE.2
    (AGGL.CS
      (CONST.0)
      (CONST.1))
    (I2F.1
      (READ.carry)))
  (WRITE.counter
    (F2I.16
      (LOAD.2
        (AGGL.CS
          (CONST.32)
          (CONST.16)))))
  (STORE.2
    (AGGL.CS
      (CONST.32)
      (CONST.16))
    (I2F.16
      (ADD
        (READ.counter)
        (READ.carry))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ carry = Int256_zero;
  Int256_ counter = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_add(
        Int256_zx(
          Int256_not(
            argument2
          ), 64
        ), 
        Int256_zx(
          argument3, 64
        )
      ), 
      Int256_fromUInt64(0x1LL)
    );
  carry = 
    Int256_and(
      Int256_shru(
        result1, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_fromUInt64(0x1LL)
    );
  HELPER(writeToStorage_CS)(this, 2, 0, 1, 1, 
    Int256_zx(
      carry, 1
    )
  );
  counter = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 2, 32, 16, 1), 16
    );
  HELPER(writeToStorage_CS)(this, 2, 32, 16, 1,
    Int256_zx(
      Int256_add(
        counter, 
        carry
      ), 16
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FNEGD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNEGD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (CONST.9223372036854775808)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      Int256_fromUInt64(0x8000000000000000LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FABSD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (CONST.9223372036854775807)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      Int256_fromUInt64(0x7fffffffffffffffLL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FSRECD_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRECD_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrec_64
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fsrec_64)(this,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRSRD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrsr_64
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fsrsr_64)(this,
      
      argument2);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENLWD_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_32_64
      (ZX.32
        (READ.argument2))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_32_64)(this,
      
      Int256_zx(
        argument2, 32
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENMWD_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_32_64
      (ZX.32
        (SHR
          (READ.argument2)
          (CONST.32)))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_32_64)(this,
      
      Int256_zx(
        Int256_shru(
          argument2, 
          Int256_fromUInt64(0x20LL)
        ), 32
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fnarrow_64_32
      (READ.RM)
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fnarrow_64_32)(this,
      
      RM,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 2, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNEGW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (XOR
        (READ.argument2)
        (CONST.2147483648))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_xor(
        argument2, 
        Int256_fromUInt64(0x80000000LL)
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FABSW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (AND
        (READ.argument2)
        (CONST.2147483647))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_and(
        argument2, 
        Int256_fromUInt64(0x7fffffffLL)
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FRECW_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.frec_32
      (READ.RM)
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(frec_32)(this,
      
      RM,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FRSRW_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.frsq_32
      (READ.RM)
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.14
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(frsq_32)(this,
      
      RM,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRECW_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrec_32
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fsrec_32)(this,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRSRW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrsr_32
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fsrsr_32)(this,
      
      argument2);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENLHW_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_16_32
      (ZX.16
        (READ.argument2))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_16_32)(this,
      
      Int256_zx(
        argument2, 16
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENMHW_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_16_32
      (ZX.16
        (SHR
          (READ.argument2)
          (CONST.16)))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_16_32)(this,
      
      Int256_zx(
        Int256_shru(
          argument2, 
          Int256_fromUInt64(0x10LL)
        ), 16
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNARROWWH_rounding2_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fnarrow_32_16
      (READ.RM)
      (ZX.32
        (READ.argument2))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fnarrow_32_16)(this,
      
      RM,
      
      Int256_zx(
        argument2, 32
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNEGWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (CONST.9223372039002259456)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      Int256_fromUInt64(0x8000000080000000LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FABSWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (CONST.9223372034707292159)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      Int256_fromUInt64(0x7fffffff7fffffffLL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRECWP_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrec_32_x2
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fsrec_32_x2)(this,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSRSRWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fsrsr_32_x2
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fsrsr_32_x2)(this,
      
      argument2);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENLHWP_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_16_32_x2
      (ZX.32
        (READ.argument2))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_16_32_x2)(this,
      
      Int256_zx(
        argument2, 32
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FWIDENMHWP_silent2_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fwiden_16_32_x2
      (ZX.32
        (SHR
          (READ.argument2)
          (CONST.32)))))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_io = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result1 = 
    HELPER(fwiden_16_32_x2)(this,
      
      Int256_zx(
        Int256_shru(
          argument2, 
          Int256_fromUInt64(0x20LL)
        ), 32
      ));
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fnarrow_64_32_x2
      (READ.RM)
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fnarrow_64_32_x2)(this,
      
      RM,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNEGHQ_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (CONST.9223512776490647552)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      Int256_fromUInt64(0x8000800080008000LL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FABSHQ_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (CONST.9223231297218904063)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      Int256_fromUInt64(0x7fff7fff7fff7fffLL)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNARROWWHQ_rounding2_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fnarrow_32_16_x4
      (READ.RM)
      (READ.argument2)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fnarrow_32_16_x4)(this,
      
      RM,
      
      argument2);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (ZX.6
      (METHOD.%4)))
  (WRITE.stopbit
    (ZX.6
      (METHOD.%3)))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (AND
        (SHL
          (READ.argument2)
          (READ.startbit))
        (READ.mask))
      (AND
        (READ.argument1)
        (NOT
          (READ.mask)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 6
    );
  stopbit = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_or(
      Int256_and(
        Int256_shl(
          argument2, 
          startbit
        ), 
        mask
      ), 
      Int256_and(
        argument1, 
        Int256_not(
          mask
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (ZX.6
      (METHOD.%4)))
  (WRITE.stopbit
    (ZX.6
      (METHOD.%3)))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked
    (AND
      (READ.argument2)
      (READ.mask)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 6
    );
  stopbit = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked = 
    Int256_and(
      argument2, 
      mask
    );
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_EXTFS_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (ZX.6
      (METHOD.%4)))
  (WRITE.stopbit
    (ZX.6
      (METHOD.%3)))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked1
    (ZX.64
      (AND
        (READ.argument2)
        (READ.mask))))
  (WRITE.masked2
    (SX.64
      (IOR
        (READ.argument2)
        (NOT
          (READ.mask)))))
  (WRITE.negative
    (AND
      (READ.argument2)
      (AND
        (READ.mask)
        (NOT
          (SHR
            (READ.mask)
            (CONST.1))))))
  (WRITE.masked
    (SELECT
      (EQ
        (READ.negative)
        (CONST.0))
      (READ.masked1)
      (READ.masked2)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ masked1 = Int256_zero;
  Int256_ masked2 = Int256_zero;
  Int256_ negative = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 6
    );
  stopbit = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked1 = 
    Int256_zx(
      Int256_and(
        argument2, 
        mask
      ), 64
    );
  masked2 = 
    Int256_sx(
      Int256_or(
        argument2, 
        Int256_not(
          mask
        )
      ), 64
    );
  negative = 
    Int256_and(
      argument2, 
      Int256_and(
        mask, 
        Int256_not(
          Int256_shru(
            mask, 
            Int256_fromUInt64(0x1LL)
          )
        )
      )
    );
  masked = 
    Int256_cmp(
      negative, 
      Int256_fromUInt64(0LL)
    ) == 0
    ?
    masked1
    :
    masked2;
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLRF_registerW_registerZ_stopbit2_stopbit4_startbit_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (ZX.6
      (METHOD.%4)))
  (WRITE.stopbit
    (ZX.6
      (METHOD.%3)))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (NOT
        (READ.mask))
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 6
    );
  stopbit = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      Int256_not(
        mask
      ), 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SATD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (SUB
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.result1
    (SELECT
      (GT
        (READ.shift)
        (CONST.0))
      (SHR
        (SAT.64
          (SHL
            (SX.64
              (READ.argument2))
            (READ.shift)))
        (READ.shift))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_sub(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    );
  result1 = 
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0LL)
    ) > 0
    ?
    Int256_shru(
      Int256_sat(
        Int256_shl(
          Int256_sx(
            argument2, 64
          ), 
          shift
        ), 64), 
      shift
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SATD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (SUB
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.result1
    (SELECT
      (GT
        (READ.shift)
        (CONST.0))
      (SHR
        (SAT.64
          (SHL
            (SX.64
              (READ.argument2))
            (READ.shift)))
        (READ.shift))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_sub(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    );
  result1 = 
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0LL)
    ) > 0
    ?
    Int256_shru(
      Int256_sat(
        Int256_shl(
          Int256_sx(
            argument2, 64
          ), 
          shift
        ), 64), 
      shift
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.6
      (READ.argument3)))
  (WRITE.bias
    (SELECT
      (LT
        (SX.64
          (READ.argument2))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1
    (SHR
      (ADD
        (SX.64
          (READ.argument2))
        (READ.bias))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 6
    );
  bias = 
    Int256_cmp(
      Int256_sx(
        argument2, 64
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2, 64
        ), 
        bias
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.6
      (READ.argument3)))
  (WRITE.bias
    (SELECT
      (LT
        (SX.64
          (READ.argument2))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1
    (SHR
      (ADD
        (SX.64
          (READ.argument2))
        (READ.bias))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 6
    );
  bias = 
    Int256_cmp(
      Int256_sx(
        argument2, 64
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2, 64
        ), 
        bias
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHL
      (ZX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shl(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHL
      (ZX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shl(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (SX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_sx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (SX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_sx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ZX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ZX.64
        (READ.argument2))
      (ZX.6
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_zx(
        argument2, 64
      ), 
      Int256_zx(
        argument3, 6
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.6
      (READ.argument3)))
  (WRITE.result1
    (SAT.64
      (SHL
        (SX.64
          (READ.argument2))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 6
    );
  result1 = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2, 64
        ), 
        shift
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.6
      (READ.argument3)))
  (WRITE.result1
    (SAT.64
      (SHL
        (SX.64
          (READ.argument2))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 6
    );
  result1 = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2, 64
        ), 
        shift
      ), 64);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.bias
    (SELECT
      (LT
        (SX.32
          (READ.argument2))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1
    (SHR
      (ADD
        (SX.32
          (READ.argument2))
        (READ.bias))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  bias = 
    Int256_cmp(
      Int256_sx(
        argument2, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2, 32
        ), 
        bias
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.bias
    (SELECT
      (LT
        (SX.32
          (READ.argument2))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1
    (SHR
      (ADD
        (SX.32
          (READ.argument2))
        (READ.bias))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  bias = 
    Int256_cmp(
      Int256_sx(
        argument2, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1 = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2, 32
        ), 
        bias
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHL
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shl(
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHL
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shl(
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (SX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_sx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (SX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_sx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SHR
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_shru(
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.result1
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  result1 = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        shift
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.result1
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  result1 = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2, 32
        ), 
        shift
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ROLW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ROL.32
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ROLW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ROL.32
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RORW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ROR.32
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RORW_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ROR.32
      (ZX.32
        (READ.argument2))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.bias_l
    (SELECT
      (LT
        (SX.32
          (READ.argument2_l))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m
    (SELECT
      (LT
        (SX.32
          (READ.argument2_m))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1_l
    (SHR
      (ADD
        (SX.32
          (READ.argument2_l))
        (READ.bias_l))
      (READ.shift)))
  (WRITE.result1_m
    (SHR
      (ADD
        (SX.32
          (READ.argument2_m))
        (READ.bias_m))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias_l = Int256_zero;
  Int256_ bias_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  bias_l = 
    Int256_cmp(
      Int256_sx(
        argument2_l, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m = 
    Int256_cmp(
      Int256_sx(
        argument2_m, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_l, 32
        ), 
        bias_l
      ), 
      shift
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_m, 32
        ), 
        bias_m
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.bias_l
    (SELECT
      (LT
        (SX.32
          (READ.argument2_l))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m
    (SELECT
      (LT
        (SX.32
          (READ.argument2_m))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1_l
    (SHR
      (ADD
        (SX.32
          (READ.argument2_l))
        (READ.bias_l))
      (READ.shift)))
  (WRITE.result1_m
    (SHR
      (ADD
        (SX.32
          (READ.argument2_m))
        (READ.bias_m))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias_l = Int256_zero;
  Int256_ bias_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  bias_l = 
    Int256_cmp(
      Int256_sx(
        argument2_l, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m = 
    Int256_cmp(
      Int256_sx(
        argument2_m, 32
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1_l = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_l, 32
        ), 
        bias_l
      ), 
      shift
    );
  result1_m = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_m, 32
        ), 
        bias_m
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHL
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHL
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shl(
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shl(
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHL
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHL
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shl(
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shl(
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (SX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHR
      (SX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_sx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shru(
      Int256_sx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (SX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHR
      (SX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_sx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shru(
      Int256_sx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHR
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shru(
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SHR
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (SHR
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_shru(
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_shru(
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.result1_l
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2_l))
        (READ.shift))))
  (WRITE.result1_m
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2_m))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  result1_l = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        shift
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        shift
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.shift
    (ZX.5
      (READ.argument3)))
  (WRITE.result1_l
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2_l))
        (READ.shift))))
  (WRITE.result1_m
    (SAT.32
      (SHL
        (SX.32
          (READ.argument2_m))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  shift = 
    Int256_zx(
      argument3, 5
    );
  result1_l = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_l, 32
        ), 
        shift
      ), 32);
  result1_m = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_m, 32
        ), 
        shift
      ), 32);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ROLWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ROL.32
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (ROL.32
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ROLWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ROL.32
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (ROL.32
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_rol(
      32, 
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RORWPS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ROR.32
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (ROR.32
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_RORWPS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ROR.32
      (ZX.32
        (READ.argument2_l))
      (ZX.5
        (READ.argument3))))
  (WRITE.result1_m
    (ROR.32
      (ZX.32
        (READ.argument2_m))
      (ZX.5
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2_l, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  result1_m = 
    Int256_ror(
      32, 
      Int256_zx(
        argument2_m, 32
      ), 
      Int256_zx(
        argument3, 5
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSHQS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.shift
    (ZX.4
      (READ.argument3)))
  (WRITE.bias_l_b
    (SELECT
      (LT
        (SX.16
          (READ.argument2_x))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_l_t
    (SELECT
      (LT
        (SX.16
          (READ.argument2_y))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m_b
    (SELECT
      (LT
        (SX.16
          (READ.argument2_z))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m_t
    (SELECT
      (LT
        (SX.16
          (READ.argument2_t))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1_x
    (SHR
      (ADD
        (SX.16
          (READ.argument2_x))
        (READ.bias_l_b))
      (READ.shift)))
  (WRITE.result1_y
    (SHR
      (ADD
        (SX.16
          (READ.argument2_y))
        (READ.bias_l_t))
      (READ.shift)))
  (WRITE.result1_z
    (SHR
      (ADD
        (SX.16
          (READ.argument2_z))
        (READ.bias_m_b))
      (READ.shift)))
  (WRITE.result1_t
    (SHR
      (ADD
        (SX.16
          (READ.argument2_t))
        (READ.bias_m_t))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias_l_b = Int256_zero;
  Int256_ bias_l_t = Int256_zero;
  Int256_ bias_m_b = Int256_zero;
  Int256_ bias_m_t = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  shift = 
    Int256_zx(
      argument3, 4
    );
  bias_l_b = 
    Int256_cmp(
      Int256_sx(
        argument2_x, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_l_t = 
    Int256_cmp(
      Int256_sx(
        argument2_y, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m_b = 
    Int256_cmp(
      Int256_sx(
        argument2_z, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m_t = 
    Int256_cmp(
      Int256_sx(
        argument2_t, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_x, 16
        ), 
        bias_l_b
      ), 
      shift
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_y, 16
        ), 
        bias_l_t
      ), 
      shift
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_z, 16
        ), 
        bias_m_b
      ), 
      shift
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_t, 16
        ), 
        bias_m_t
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRSHQS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.shift
    (ZX.4
      (READ.argument3)))
  (WRITE.bias_l_b
    (SELECT
      (LT
        (SX.16
          (READ.argument2_x))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_l_t
    (SELECT
      (LT
        (SX.16
          (READ.argument2_y))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m_b
    (SELECT
      (LT
        (SX.16
          (READ.argument2_z))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.bias_m_t
    (SELECT
      (LT
        (SX.16
          (READ.argument2_t))
        (CONST.0))
      (SUB
        (SHL
          (CONST.1)
          (READ.shift))
        (CONST.1))
      (CONST.0)))
  (WRITE.result1_x
    (SHR
      (ADD
        (SX.16
          (READ.argument2_x))
        (READ.bias_l_b))
      (READ.shift)))
  (WRITE.result1_y
    (SHR
      (ADD
        (SX.16
          (READ.argument2_y))
        (READ.bias_l_t))
      (READ.shift)))
  (WRITE.result1_z
    (SHR
      (ADD
        (SX.16
          (READ.argument2_z))
        (READ.bias_m_b))
      (READ.shift)))
  (WRITE.result1_t
    (SHR
      (ADD
        (SX.16
          (READ.argument2_t))
        (READ.bias_m_t))
      (READ.shift)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ bias_l_b = Int256_zero;
  Int256_ bias_l_t = Int256_zero;
  Int256_ bias_m_b = Int256_zero;
  Int256_ bias_m_t = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  shift = 
    Int256_zx(
      argument3, 4
    );
  bias_l_b = 
    Int256_cmp(
      Int256_sx(
        argument2_x, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_l_t = 
    Int256_cmp(
      Int256_sx(
        argument2_y, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m_b = 
    Int256_cmp(
      Int256_sx(
        argument2_z, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  bias_m_t = 
    Int256_cmp(
      Int256_sx(
        argument2_t, 16
      ), 
      Int256_fromUInt64(0LL)
    ) < 0
    ?
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    )
    :
    Int256_fromUInt64(0LL);
  result1_x = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_x, 16
        ), 
        bias_l_b
      ), 
      shift
    );
  result1_y = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_y, 16
        ), 
        bias_l_t
      ), 
      shift
    );
  result1_z = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_z, 16
        ), 
        bias_m_b
      ), 
      shift
    );
  result1_t = 
    Int256_shru(
      Int256_add(
        Int256_sx(
          argument2_t, 16
        ), 
        bias_m_t
      ), 
      shift
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLHQS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHL
      (ZX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHL
      (ZX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHL
      (ZX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHL
      (ZX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shl(
      Int256_zx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shl(
      Int256_zx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shl(
      Int256_zx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shl(
      Int256_zx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLLHQS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHL
      (ZX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHL
      (ZX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHL
      (ZX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHL
      (ZX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shl(
      Int256_zx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shl(
      Int256_zx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shl(
      Int256_zx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shl(
      Int256_zx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAHQS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (SX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHR
      (SX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHR
      (SX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHR
      (SX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_sx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shru(
      Int256_sx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shru(
      Int256_sx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shru(
      Int256_sx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRAHQS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (SX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHR
      (SX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHR
      (SX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHR
      (SX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_sx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shru(
      Int256_sx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shru(
      Int256_sx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shru(
      Int256_sx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLHQS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ZX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHR
      (ZX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHR
      (ZX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHR
      (ZX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_zx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shru(
      Int256_zx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shru(
      Int256_zx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shru(
      Int256_zx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SRLHQS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SHR
      (ZX.16
        (READ.argument2_x))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_y
    (SHR
      (ZX.16
        (READ.argument2_y))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_z
    (SHR
      (ZX.16
        (READ.argument2_z))
      (ZX.4
        (READ.argument3))))
  (WRITE.result1_t
    (SHR
      (ZX.16
        (READ.argument2_t))
      (ZX.4
        (READ.argument3))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_shru(
      Int256_zx(
        argument2_x, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_y = 
    Int256_shru(
      Int256_zx(
        argument2_y, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_z = 
    Int256_shru(
      Int256_zx(
        argument2_z, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  result1_t = 
    Int256_shru(
      Int256_zx(
        argument2_t, 16
      ), 
      Int256_zx(
        argument3, 4
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSHQS_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.shift
    (ZX.4
      (READ.argument3)))
  (WRITE.result1_x
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_x))
        (READ.shift))))
  (WRITE.result1_y
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_y))
        (READ.shift))))
  (WRITE.result1_z
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_z))
        (READ.shift))))
  (WRITE.result1_t
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_t))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  shift = 
    Int256_zx(
      argument3, 4
    );
  result1_x = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        shift
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        shift
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        shift
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        shift
      ), 16);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SLSHQS_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.shift
    (ZX.4
      (READ.argument3)))
  (WRITE.result1_x
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_x))
        (READ.shift))))
  (WRITE.result1_y
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_y))
        (READ.shift))))
  (WRITE.result1_z
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_z))
        (READ.shift))))
  (WRITE.result1_t
    (SAT.16
      (SHL
        (SX.16
          (READ.argument2_t))
        (READ.shift))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  shift = 
    Int256_zx(
      argument3, 4
    );
  result1_x = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_x, 16
        ), 
        shift
      ), 16);
  result1_y = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_y, 16
        ), 
        shift
      ), 16);
  result1_z = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_z, 16
        ), 
        shift
      ), 16);
  result1_t = 
    Int256_sat(
      Int256_shl(
        Int256_sx(
          argument2_t, 16
        ), 
        shift
      ), 16);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPD_comparison_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.10
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 10
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPD_comparison_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.37
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 37
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPD_comparison_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.64
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPD_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPW_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_32
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_32)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPW_comparison_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.32
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_32
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_32)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPWD_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (SX.32
          (READ.argument3))
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        Int256_sx(
          argument3, 32
        ),
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPUWD_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.comparison_64
        (READ.argument1)
        (ZX.32
          (READ.argument3))
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(comparison_64)(this,
        
        argument1,
        
        Int256_zx(
          argument3, 32
        ),
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPNWP_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument4_l
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_m
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.result2_l
    (NEG
      (B2I
        (TEST.comparison_32
          (READ.argument1)
          (READ.argument3_l)
          (READ.argument4_l)))))
  (WRITE.result2_m
    (NEG
      (B2I
        (TEST.comparison_32
          (READ.argument1)
          (READ.argument3_m)
          (READ.argument4_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result2_m)
          (CONST.32))
        (ZX.32
          (READ.result2_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_l = Int256_zero;
  Int256_ argument4_m = Int256_zero;
  Int256_ result2_l = Int256_zero;
  Int256_ result2_m = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument4_l = 
    Int256_zx(
      argument4, 32
    );
  argument4_m = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result2_l = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_32)(this,
          
          argument1,
          
          argument3_l,
          
          argument4_l)
      )
    );
  result2_m = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_32)(this,
          
          argument1,
          
          argument3_m,
          
          argument4_m)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result2_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result2_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COMPNHQ_comparison_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument4_x
    (ZX.16
      (READ.argument4)))
  (WRITE.argument4_y
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.16))))
  (WRITE.argument4_z
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_t
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.48))))
  (WRITE.result2_x
    (NEG
      (B2I
        (TEST.comparison_16
          (READ.argument1)
          (READ.argument3_x)
          (READ.argument4_x)))))
  (WRITE.result2_y
    (NEG
      (B2I
        (TEST.comparison_16
          (READ.argument1)
          (READ.argument3_y)
          (READ.argument4_y)))))
  (WRITE.result2_z
    (NEG
      (B2I
        (TEST.comparison_16
          (READ.argument1)
          (READ.argument3_z)
          (READ.argument4_z)))))
  (WRITE.result2_t
    (NEG
      (B2I
        (TEST.comparison_16
          (READ.argument1)
          (READ.argument3_t)
          (READ.argument4_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result2_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result2_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result2_y))
            (CONST.16))
          (ZX.16
            (READ.result2_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_t = Int256_zero;
  Int256_ argument4_x = Int256_zero;
  Int256_ argument4_y = Int256_zero;
  Int256_ argument4_z = Int256_zero;
  Int256_ result2_t = Int256_zero;
  Int256_ result2_x = Int256_zero;
  Int256_ result2_y = Int256_zero;
  Int256_ result2_z = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument4_x = 
    Int256_zx(
      argument4, 16
    );
  argument4_y = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument4_z = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument4_t = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result2_x = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_16)(this,
          
          argument1,
          
          argument3_x,
          
          argument4_x)
      )
    );
  result2_y = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_16)(this,
          
          argument1,
          
          argument3_y,
          
          argument4_y)
      )
    );
  result2_z = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_16)(this,
          
          argument1,
          
          argument3_z,
          
          argument4_z)
      )
    );
  result2_t = 
    Int256_neg(
      Int256_fromBool(
        HELPER(comparison_16)(this,
          
          argument1,
          
          argument3_t,
          
          argument4_t)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result2_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result2_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result2_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result2_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.10
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument1)
      (READ.argument3))
    (SEQ
      (WRITE.result2
        (READ.argument4))
      (STORE.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result2))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 10
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument1,
      
      argument3)
  )
  {
    result2 = 
      argument4;
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result2, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVED_scalarcond_registerZ_registerW_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.37
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument1)
      (READ.argument3))
    (SEQ
      (WRITE.result2
        (READ.argument4))
      (STORE.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result2))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 37
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument1,
      
      argument3)
  )
  {
    result2 = 
      argument4;
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result2, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVED_scalarcond_registerZ_registerW_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (SX.64
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument1)
      (READ.argument3))
    (SEQ
      (WRITE.result2
        (READ.argument4))
      (STORE.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result2))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument1,
      
      argument3)
  )
  {
    result2 = 
      argument4;
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result2, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVED_scalarcond_registerZ_registerW_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.4
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument1)
      (READ.argument3))
    (SEQ
      (WRITE.result2
        (READ.argument4))
      (STORE.2
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1))
        (I2F.64
          (READ.result2))))
    (SKIP)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 4
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument1,
      
      argument3)
  )
  {
    result2 = 
      argument4;
    HELPER(operandFromValue)(this, 3, 2, 
      Int256_zx(
        result2, 64
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument4_l
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_m
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.result2_l
    (SELECT
      (TEST.simplecond_32
        (READ.argument1)
        (READ.argument3_l))
      (READ.argument4_l)
      (READ.argument2_l)))
  (WRITE.result2_m
    (SELECT
      (TEST.simplecond_32
        (READ.argument1)
        (READ.argument3_m))
      (READ.argument4_m)
      (READ.argument2_m)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result2_m)
          (CONST.32))
        (ZX.32
          (READ.result2_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_l = Int256_zero;
  Int256_ argument4_m = Int256_zero;
  Int256_ result2_l = Int256_zero;
  Int256_ result2_m = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument4_l = 
    Int256_zx(
      argument4, 32
    );
  argument4_m = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result2_l = 
    HELPER(simplecond_32)(this,
      
      argument1,
      
      argument3_l)
    ?
    argument4_l
    :
    argument2_l;
  result2_m = 
    HELPER(simplecond_32)(this,
      
      argument1,
      
      argument3_m)
    ?
    argument4_m
    :
    argument2_m;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result2_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result2_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MAKE_registerW_signed16_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromValue)(this, 2, 1, Int256_fromInt64((ImmediateValue)decoded[2-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAKE_registerW_signed16_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.16
      (METHOD.%2)))
  (WRITE.result1
    (SX.64
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 16
    );
  result1 = 
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAKE_registerW_extend6_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.43
      (METHOD.%2)))
  (WRITE.result1
    (SX.64
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 43
    );
  result1 = 
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MAKE_registerW_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.64
      (METHOD.%2)))
  (WRITE.result1
    (SX.64
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_PCREL_registerW_signed16_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.16
      (METHOD.%2)))
  (WRITE.result1
    (ADD
      (F2I.64
        (LOAD.0
          (AGGL.PC
            (CONST.0)
            (CONST.1))))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 16
    );
  result1 = 
    Int256_add(
      Int256_zx(
        HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_PCREL_registerW_extend6_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.43
      (METHOD.%2)))
  (WRITE.result1
    (ADD
      (F2I.64
        (LOAD.0
          (AGGL.PC
            (CONST.0)
            (CONST.1))))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 43
    );
  result1 = 
    Int256_add(
      Int256_zx(
        HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_PCREL_registerW_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (SX.64
      (METHOD.%2)))
  (WRITE.result1
    (ADD
      (F2I.64
        (LOAD.0
          (AGGL.PC
            (CONST.0)
            (CONST.1))))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        HELPER(readFromStorage_PC)(this, 0, 0, 1, 64), 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLZW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (CLZ.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_clz(
        argument2, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLSW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (CLS.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_cls(
        argument2, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CBSW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (CBS.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_cbs(
        argument2, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CTZW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (CTZ.32
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_ctz(
        argument2, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLZD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.64
      (CLZ.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_clz(
        argument2, 64
      )), 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLSD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.64
      (CLS.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_cls(
        argument2, 64
      )), 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CBSD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.64
      (CBS.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_cbs(
        argument2, 64
      )), 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CTZD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.64
      (CTZ.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_fromUInt32(Int256_ctz(
        argument2, 64
      )), 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLZWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ZX.32
      (CLZ.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ZX.32
      (CLZ.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_zx(
      Int256_fromUInt32(Int256_clz(
        argument2_l, 32
      )), 32
    );
  result1_m = 
    Int256_zx(
      Int256_fromUInt32(Int256_clz(
        argument2_m, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CLSWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ZX.32
      (CLS.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ZX.32
      (CLS.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_zx(
      Int256_fromUInt32(Int256_cls(
        argument2_l, 32
      )), 32
    );
  result1_m = 
    Int256_zx(
      Int256_fromUInt32(Int256_cls(
        argument2_m, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CBSWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ZX.32
      (CBS.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ZX.32
      (CBS.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_zx(
      Int256_fromUInt32(Int256_cbs(
        argument2_l, 32
      )), 32
    );
  result1_m = 
    Int256_zx(
      Int256_fromUInt32(Int256_cbs(
        argument2_m, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CTZWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ZX.32
      (CTZ.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (ZX.32
      (CTZ.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_zx(
      Int256_fromUInt32(Int256_ctz(
        argument2_l, 32
      )), 32
    );
  result1_m = 
    Int256_zx(
      Int256_fromUInt32(Int256_ctz(
        argument2_m, 32
      )), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXLHWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1_l
    (SX.16
      (READ.argument2)))
  (WRITE.result1_m
    (SX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1_l = 
    Int256_sx(
      argument2, 16
    );
  result1_m = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXMHWP_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1_l
    (SX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_m
    (SX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1_l = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  result1_m = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXLBHQ_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1_x
    (SX.8
      (READ.argument2)))
  (WRITE.result1_y
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.8))))
  (WRITE.result1_z
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.result1_t
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.24))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1_x = 
    Int256_sx(
      argument2, 8
    );
  result1_y = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x8LL)
      ), 8
    );
  result1_z = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 8
    );
  result1_t = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x18LL)
      ), 8
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXMBHQ_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1_x
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_y
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.40))))
  (WRITE.result1_z
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_t
    (SX.8
      (SHR
        (READ.argument2)
        (CONST.56))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1_x = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 8
    );
  result1_y = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x28LL)
      ), 8
    );
  result1_z = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 8
    );
  result1_t = 
    Int256_sx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x38LL)
      ), 8
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMOVEHQ_simdcond_registerZ_registerW_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument4_x
    (ZX.16
      (READ.argument4)))
  (WRITE.argument4_y
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.16))))
  (WRITE.argument4_z
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_t
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.48))))
  (WRITE.result2_x
    (SELECT
      (TEST.simplecond_16
        (READ.argument1)
        (READ.argument3_x))
      (READ.argument4_x)
      (READ.argument2_x)))
  (WRITE.result2_y
    (SELECT
      (TEST.simplecond_16
        (READ.argument1)
        (READ.argument3_y))
      (READ.argument4_y)
      (READ.argument2_y)))
  (WRITE.result2_z
    (SELECT
      (TEST.simplecond_16
        (READ.argument1)
        (READ.argument3_z))
      (READ.argument4_z)
      (READ.argument2_z)))
  (WRITE.result2_t
    (SELECT
      (TEST.simplecond_16
        (READ.argument1)
        (READ.argument3_t))
      (READ.argument4_t)
      (READ.argument2_t)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result2_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result2_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result2_y))
            (CONST.16))
          (ZX.16
            (READ.result2_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_t = Int256_zero;
  Int256_ argument4_x = Int256_zero;
  Int256_ argument4_y = Int256_zero;
  Int256_ argument4_z = Int256_zero;
  Int256_ result2_t = Int256_zero;
  Int256_ result2_x = Int256_zero;
  Int256_ result2_y = Int256_zero;
  Int256_ result2_z = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument4_x = 
    Int256_zx(
      argument4, 16
    );
  argument4_y = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument4_z = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument4_t = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result2_x = 
    HELPER(simplecond_16)(this,
      
      argument1,
      
      argument3_x)
    ?
    argument4_x
    :
    argument2_x;
  result2_y = 
    HELPER(simplecond_16)(this,
      
      argument1,
      
      argument3_y)
    ?
    argument4_y
    :
    argument2_y;
  result2_z = 
    HELPER(simplecond_16)(this,
      
      argument1,
      
      argument3_z)
    ?
    argument4_z
    :
    argument2_z;
  result2_t = 
    HELPER(simplecond_16)(this,
      
      argument1,
      
      argument3_t)
    ?
    argument4_t
    :
    argument2_t;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result2_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result2_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result2_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result2_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPW_floatcomp_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.floatcomp_32
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(floatcomp_32)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPW_floatcomp_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument4
    (SX.32
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.floatcomp_32
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(floatcomp_32)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPD_floatcomp_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.floatcomp_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(floatcomp_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPD_floatcomp_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument4
    (SX.32
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.result2
    (B2I
      (TEST.floatcomp_64
        (READ.argument1)
        (READ.argument3)
        (READ.argument4))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result2))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result2 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument4 = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  result2 = 
    Int256_fromBool(
      HELPER(floatcomp_64)(this,
        
        argument1,
        
        argument3,
        
        argument4)
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPNWP_floatcomp_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument4_l
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_m
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.result2_l
    (NEG
      (B2I
        (TEST.floatcomp_32
          (READ.argument1)
          (READ.argument3_l)
          (READ.argument4_l)))))
  (WRITE.result2_m
    (NEG
      (B2I
        (TEST.floatcomp_32
          (READ.argument1)
          (READ.argument3_m)
          (READ.argument4_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result2_m)
          (CONST.32))
        (ZX.32
          (READ.result2_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_l = Int256_zero;
  Int256_ argument4_m = Int256_zero;
  Int256_ result2_l = Int256_zero;
  Int256_ result2_m = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument4_l = 
    Int256_zx(
      argument4, 32
    );
  argument4_m = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result2_l = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_32)(this,
          
          argument1,
          
          argument3_l,
          
          argument4_l)
      )
    );
  result2_m = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_32)(this,
          
          argument1,
          
          argument3_m,
          
          argument4_m)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result2_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result2_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCOMPNHQ_floatcomp_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument4
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument4_x
    (ZX.16
      (READ.argument4)))
  (WRITE.argument4_y
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.16))))
  (WRITE.argument4_z
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_t
    (ZX.16
      (SHR
        (READ.argument4)
        (CONST.48))))
  (WRITE.result2_x
    (NEG
      (B2I
        (TEST.floatcomp_16
          (READ.argument1)
          (READ.argument3_x)
          (READ.argument4_x)))))
  (WRITE.result2_y
    (NEG
      (B2I
        (TEST.floatcomp_16
          (READ.argument1)
          (READ.argument3_y)
          (READ.argument4_y)))))
  (WRITE.result2_z
    (NEG
      (B2I
        (TEST.floatcomp_16
          (READ.argument1)
          (READ.argument3_z)
          (READ.argument4_z)))))
  (WRITE.result2_t
    (NEG
      (B2I
        (TEST.floatcomp_16
          (READ.argument1)
          (READ.argument3_t)
          (READ.argument4_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result2_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result2_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result2_y))
            (CONST.16))
          (ZX.16
            (READ.result2_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_t = Int256_zero;
  Int256_ argument4_x = Int256_zero;
  Int256_ argument4_y = Int256_zero;
  Int256_ argument4_z = Int256_zero;
  Int256_ result2_t = Int256_zero;
  Int256_ result2_x = Int256_zero;
  Int256_ result2_y = Int256_zero;
  Int256_ result2_z = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument4_x = 
    Int256_zx(
      argument4, 16
    );
  argument4_y = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument4_z = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument4_t = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result2_x = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_16)(this,
          
          argument1,
          
          argument3_x,
          
          argument4_x)
      )
    );
  result2_y = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_16)(this,
          
          argument1,
          
          argument3_y,
          
          argument4_y)
      )
    );
  result2_z = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_16)(this,
          
          argument1,
          
          argument3_z,
          
          argument4_z)
      )
    );
  result2_t = 
    Int256_neg(
      Int256_fromBool(
        HELPER(floatcomp_16)(this,
          
          argument1,
          
          argument3_t,
          
          argument4_t)
      )
    );
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result2_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result2_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result2_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result2_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FSDIVD_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 3, 2, decoded[2] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSDIVD_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fsdiv_64
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1 = 
    HELPER(fsdiv_64)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCDIVD_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fcdiv_64
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1 = 
    HELPER(fcdiv_64)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSDIVW_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fsdiv_32
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 32
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  result1 = 
    HELPER(fsdiv_32)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCDIVW_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fcdiv_32
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 32
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  result1 = 
    HELPER(fcdiv_32)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSDIVWP_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fsdiv_32_x2
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1 = 
    HELPER(fsdiv_32_x2)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FCDIVWP_silent2_registerW_registerP_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.result1
    (APPLY.fcdiv_32_x2
      (READ.argument2_0)
      (READ.argument2_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_dz
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.2)
              (CONST.1)))))
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.2)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.fdivbyzero)
            (READ.CS_dz))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov)))))
    (SKIP))
  (STORE.2
    (AGGL.GPR
      (METHOD.%2)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_dz = Int256_zero;
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1 = 
    HELPER(fcdiv_32_x2)(this,
      
      argument2_0,
      
      argument2_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_dz = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 2, 1, 1), 1
      );
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 2, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(fdivbyzero)(this), 
          CS_dz
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMIND_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmin_64
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmin_64)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMAXD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmax_64
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmax_64)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMINW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmin_32
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmin_32)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMAXW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmax_32
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmax_32)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMINWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmin_32_x2
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmin_32_x2)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMAXWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmax_32_x2
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmax_32_x2)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMINHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmin_16_x4
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmin_16_x4)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMAXHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.fmax_16_x4
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(fmax_16_x4)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 5, 4, Int256_fromInt64((ImmediateValue)decoded[5-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.float_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(float_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 5, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATWP_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.float_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(float_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATW_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.float_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(float_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATUD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.floatu_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(floatu_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATUWP_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.floatu_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(floatu_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FLOATUW_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.floatu_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(floatu_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixed_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixed_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDWP_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixed_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixed_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDW_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixed_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixed_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDUD_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixedu_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixedu_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDUWP_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixedu_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixedu_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FIXEDUW_rounding_silent_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (ZX.6
      (METHOD.%5)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fixedu_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fixedu_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 2, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 3, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MADDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 2, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument1))
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_l
    (READ.argument3))
  (WRITE.argument3_m
    (SHR
      (READ.argument3)
      (CONST.32)))
  (WRITE.argument2_l
    (READ.argument2))
  (WRITE.argument2_m
    (SHR
      (READ.argument2)
      (CONST.32)))
  (WRITE.argument1_l
    (READ.argument1))
  (WRITE.argument1_m
    (SHR
      (READ.argument1)
      (CONST.32)))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_l = 
    argument3;
  argument3_m = 
    Int256_shru(
      argument3, 
      Int256_fromUInt64(0x20LL)
    );
  argument2_l = 
    argument2;
  argument2_m = 
    Int256_shru(
      argument2, 
      Int256_fromUInt64(0x20LL)
    );
  argument1_l = 
    argument1;
  argument1_m = 
    Int256_shru(
      argument1, 
      Int256_fromUInt64(0x20LL)
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument1_l, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument1_m, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_l
    (READ.argument3))
  (WRITE.argument3_m
    (SHR
      (READ.argument3)
      (CONST.32)))
  (WRITE.argument2_l
    (READ.argument2))
  (WRITE.argument2_m
    (SHR
      (READ.argument2)
      (CONST.32)))
  (WRITE.argument1_l
    (READ.argument1))
  (WRITE.argument1_m
    (SHR
      (READ.argument1)
      (CONST.32)))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_l = 
    argument3;
  argument3_m = 
    Int256_shru(
      argument3, 
      Int256_fromUInt64(0x20LL)
    );
  argument2_l = 
    argument2;
  argument2_m = 
    Int256_shru(
      argument2, 
      Int256_fromUInt64(0x20LL)
    );
  argument1_l = 
    argument1;
  argument1_m = 
    Int256_shru(
      argument1, 
      Int256_fromUInt64(0x20LL)
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument1_l, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument1_m, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_l
    (READ.argument3))
  (WRITE.argument3_m
    (SHR
      (READ.argument3)
      (CONST.32)))
  (WRITE.argument2_l
    (READ.argument2))
  (WRITE.argument2_m
    (SHR
      (READ.argument2)
      (CONST.32)))
  (WRITE.argument1_l
    (READ.argument1))
  (WRITE.argument1_m
    (SHR
      (READ.argument1)
      (CONST.32)))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_l = 
    argument3;
  argument3_m = 
    Int256_shru(
      argument3, 
      Int256_fromUInt64(0x20LL)
    );
  argument2_l = 
    argument2;
  argument2_m = 
    Int256_shru(
      argument2, 
      Int256_fromUInt64(0x20LL)
    );
  argument1_l = 
    argument1;
  argument1_m = 
    Int256_shru(
      argument1, 
      Int256_fromUInt64(0x20LL)
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument1_l, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument1_m, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_l
    (READ.argument3))
  (WRITE.argument3_m
    (SHR
      (READ.argument3)
      (CONST.32)))
  (WRITE.argument2_l
    (READ.argument2))
  (WRITE.argument2_m
    (SHR
      (READ.argument2)
      (CONST.32)))
  (WRITE.argument1_l
    (READ.argument1))
  (WRITE.argument1_m
    (SHR
      (READ.argument1)
      (CONST.32)))
  (WRITE.result1_l
    (ADD
      (SX.32
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (SX.32
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_l = 
    argument3;
  argument3_m = 
    Int256_shru(
      argument3, 
      Int256_fromUInt64(0x20LL)
    );
  argument2_l = 
    argument2;
  argument2_m = 
    Int256_shru(
      argument2, 
      Int256_fromUInt64(0x20LL)
    );
  argument1_l = 
    argument1;
  argument1_m = 
    Int256_shru(
      argument1, 
      Int256_fromUInt64(0x20LL)
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument1_l, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument1_m, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_l
    (READ.argument3))
  (WRITE.argument3_m
    (SHR
      (READ.argument3)
      (CONST.32)))
  (WRITE.argument2_l
    (READ.argument2))
  (WRITE.argument2_m
    (SHR
      (READ.argument2)
      (CONST.32)))
  (WRITE.argument1_l
    (READ.argument1))
  (WRITE.argument1_m
    (SHR
      (READ.argument1)
      (CONST.32)))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_l = 
    argument3;
  argument3_m = 
    Int256_shru(
      argument3, 
      Int256_fromUInt64(0x20LL)
    );
  argument2_l = 
    argument2;
  argument2_m = 
    Int256_shru(
      argument2, 
      Int256_fromUInt64(0x20LL)
    );
  argument1_l = 
    argument1;
  argument1_m = 
    Int256_shru(
      argument1, 
      Int256_fromUInt64(0x20LL)
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument1_l, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument1_m, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1_x
    (ZX.16
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.16))))
  (WRITE.argument1_z
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_t
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1_x = 
    Int256_zx(
      argument1, 16
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument1_x, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument1_y, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument1_z, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument1_t, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1_x
    (ZX.16
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.16))))
  (WRITE.argument1_z
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_t
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1_x = 
    Int256_zx(
      argument1, 16
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument1_x, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument1_y, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument1_z, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument1_t, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1_x
    (ZX.16
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.16))))
  (WRITE.argument1_z
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_t
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1_x = 
    Int256_zx(
      argument1, 16
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument1_x, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument1_y, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument1_z, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument1_t, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1_x
    (ZX.16
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.16))))
  (WRITE.argument1_z
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_t
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.48))))
  (WRITE.result1_x
    (ADD
      (SX.16
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (SX.16
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (SX.16
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (SX.16
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1_x = 
    Int256_zx(
      argument1, 16
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument1_x, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument1_y, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument1_z, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument1_t, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1_x
    (ZX.16
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.16))))
  (WRITE.argument1_z
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_t
    (ZX.16
      (SHR
        (READ.argument1)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1_x = 
    Int256_zx(
      argument1, 16
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument1_x, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument1_y, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument1_z, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument1_t, 16
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 2, 1, 0, decoded[0] - Register_kv3_P0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (ADD
      (SX.32
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (SX.32
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (SX.32
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (SX.32
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_add(
      Int256_sx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_sx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_sx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_sx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MADDHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 3, 1, 0, decoded[0] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (SUB
      (SX.32
        (READ.argument1_x))
      (MUL
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SUB
      (SX.32
        (READ.argument1_y))
      (MUL
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SUB
      (SX.32
        (READ.argument1_z))
      (MUL
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SUB
      (SX.32
        (READ.argument1_t))
      (MUL
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (ADD
      (ZX.32
        (READ.argument1_x))
      (MUL
        (ZX.16
          (READ.argument3_x))
        (ZX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (ZX.32
        (READ.argument1_y))
      (MUL
        (ZX.16
          (READ.argument3_y))
        (ZX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (ZX.32
        (READ.argument1_z))
      (MUL
        (ZX.16
          (READ.argument3_z))
        (ZX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (ZX.32
        (READ.argument1_t))
      (MUL
        (ZX.16
          (READ.argument3_t))
        (ZX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_add(
      Int256_zx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_zx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_zx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_zx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_zx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_zx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_zx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_zx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (SUB
      (ZX.32
        (READ.argument1_x))
      (MUL
        (ZX.16
          (READ.argument3_x))
        (ZX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SUB
      (ZX.32
        (READ.argument1_y))
      (MUL
        (ZX.16
          (READ.argument3_y))
        (ZX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SUB
      (ZX.32
        (READ.argument1_z))
      (MUL
        (ZX.16
          (READ.argument3_z))
        (ZX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SUB
      (ZX.32
        (READ.argument1_t))
      (MUL
        (ZX.16
          (READ.argument3_t))
        (ZX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_sub(
      Int256_zx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_zx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_sub(
      Int256_zx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_zx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_sub(
      Int256_zx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_zx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_sub(
      Int256_zx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_zx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (ADD
      (ZX.32
        (READ.argument1_x))
      (MUL
        (ZX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ADD
      (ZX.32
        (READ.argument1_y))
      (MUL
        (ZX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ADD
      (ZX.32
        (READ.argument1_z))
      (MUL
        (ZX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ADD
      (ZX.32
        (READ.argument1_t))
      (MUL
        (ZX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_add(
      Int256_zx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_add(
      Int256_zx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_add(
      Int256_zx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_add(
      Int256_zx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFSUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.result1_x
    (SUB
      (ZX.32
        (READ.argument1_x))
      (MUL
        (ZX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (SUB
      (ZX.32
        (READ.argument1_y))
      (MUL
        (ZX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (SUB
      (ZX.32
        (READ.argument1_z))
      (MUL
        (ZX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (SUB
      (ZX.32
        (READ.argument1_t))
      (MUL
        (ZX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_x = 
    Int256_zx(
      argument1, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_sub(
      Int256_zx(
        argument1_x, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_sub(
      Int256_zx(
        argument1_y, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_sub(
      Int256_zx(
        argument1_z, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_sub(
      Int256_zx(
        argument1_t, 32
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MADDDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 1, 0, decoded[0] - Register_kv3_P0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MADDDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 1, 0, decoded[0] - Register_kv3_P0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUZDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (SHR
          (READ.argument1)
          (CONST.64)))
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      Int256_zx(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x40LL)
        ), 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUZDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (SHR
          (READ.argument1)
          (CONST.64)))
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      Int256_zx(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x40LL)
        ), 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUZDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (SHR
          (READ.argument1)
          (CONST.64)))
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      Int256_zx(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x40LL)
        ), 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUZDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (SHR
          (READ.argument1)
          (CONST.64)))
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_add(
      Int256_zx(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x40LL)
        ), 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument1)
      (MUL
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_sub(
      argument1, 
      Int256_mul(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_sub(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFSUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument1)
      (MUL
        (ZX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_sub(
      argument1, 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUZDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (ZX.64
        (SHR
          (READ.argument1)
          (CONST.64)))
      (MUL
        (ZX.64
          (READ.argument3))
        (ZX.64
          (READ.argument2)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_sub(
      Int256_zx(
        Int256_shru(
          argument1, 
          Int256_fromUInt64(0x40LL)
        ), 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 64
        ), 
        Int256_zx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (ZX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_zx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.64
        (READ.argument3))
      (SX.64
        (READ.argument2))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 64
      ), 
      Int256_sx(
        argument2, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULDT_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.clm_64_128
      (READ.argument2)
      (READ.argument3)))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(clm_64_128)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULDT_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.clm_64_128
      (READ.argument2)
      (READ.argument3)))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(clm_64_128)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULDT_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.clm_64_128
      (READ.argument2)
      (READ.argument3)))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(clm_64_128)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (APPLY.clm_64_128
      (READ.argument2)
      (READ.argument3)))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    HELPER(clm_64_128)(this,
      
      argument2,
      
      argument3);
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULXDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument1)
      (APPLY.clm_64_128
        (READ.argument2)
        (READ.argument3))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_xor(
      argument1, 
      HELPER(clm_64_128)(this,
        
        argument2,
        
        argument3)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULGLXDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument1)
      (APPLY.gcm_bb_64_128
        (READ.argument2)
        (READ.argument3))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_xor(
      argument1, 
      HELPER(gcm_bb_64_128)(this,
        
        argument2,
        
        argument3)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULGMXDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument1)
      (APPLY.gcm_bt_64_128
        (READ.argument2)
        (READ.argument3))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_xor(
      argument1, 
      HELPER(gcm_bt_64_128)(this,
        
        argument2,
        
        argument3)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CMULGHXDT_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument1)
      (APPLY.gcm_tt_64_128
        (READ.argument2)
        (READ.argument3))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  result1 = 
    Int256_xor(
      argument1, 
      HELPER(gcm_tt_64_128)(this,
        
        argument2,
        
        argument3)
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCBELMW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (SWAP.16
        (SWAP.8
          (SHR
            (READ.argument2)
            (CONST.32))))))
  (WRITE.result1
    (APPLY.32.crc32_be_u32
      (ZX.32
        (READ.argument1_data))
      (ZX.32
        (READ.argument3))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_swap(
        Int256_swap(
          Int256_shru(
            argument2, 
            Int256_fromUInt64(0x20LL)
          ), 8
        ), 16
      )
    );
  result1 = 
    HELPER(crc32_be_u32)(this,
      
      Int256_zx(
        argument1_data, 32
      ),
      
      Int256_zx(
        argument3, 32
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCBELMW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (SWAP.16
        (SWAP.8
          (SHR
            (READ.argument2)
            (CONST.32))))))
  (WRITE.result1
    (APPLY.32.crc32_be_u32
      (ZX.32
        (READ.argument1_data))
      (ZX.32
        (READ.argument3))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_swap(
        Int256_swap(
          Int256_shru(
            argument2, 
            Int256_fromUInt64(0x20LL)
          ), 8
        ), 16
      )
    );
  result1 = 
    HELPER(crc32_be_u32)(this,
      
      Int256_zx(
        argument1_data, 32
      ),
      
      Int256_zx(
        argument3, 32
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCBELLW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (SWAP.16
        (SWAP.8
          (READ.argument2)))))
  (WRITE.result1
    (APPLY.32.crc32_be_u32
      (ZX.32
        (READ.argument1_data))
      (ZX.32
        (READ.argument3))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_swap(
        Int256_swap(
          argument2, 8
        ), 16
      )
    );
  result1 = 
    HELPER(crc32_be_u32)(this,
      
      Int256_zx(
        argument1_data, 32
      ),
      
      Int256_zx(
        argument3, 32
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCBELLW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (SWAP.16
        (SWAP.8
          (READ.argument2)))))
  (WRITE.result1
    (APPLY.32.crc32_be_u32
      (ZX.32
        (READ.argument1_data))
      (ZX.32
        (READ.argument3))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_swap(
        Int256_swap(
          argument2, 8
        ), 16
      )
    );
  result1 = 
    HELPER(crc32_be_u32)(this,
      
      Int256_zx(
        argument1_data, 32
      ),
      
      Int256_zx(
        argument3, 32
      ));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCLELMW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (ZX.32
        (SHR
          (READ.argument2)
          (CONST.32)))))
  (WRITE.result1
    (APPLY.32.reflect_32
      (APPLY.32.crc32_be_u32
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument1_data)))
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument3))))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_zx(
        Int256_shru(
          argument2, 
          Int256_fromUInt64(0x20LL)
        ), 32
      )
    );
  result1 = 
    HELPER(reflect_32)(this,
      
      HELPER(crc32_be_u32)(this,
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument1_data, 32
          )),
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument3, 32
          ))));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCLELMW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (ZX.32
        (SHR
          (READ.argument2)
          (CONST.32)))))
  (WRITE.result1
    (APPLY.32.reflect_32
      (APPLY.32.crc32_be_u32
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument1_data)))
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument3))))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_zx(
        Int256_shru(
          argument2, 
          Int256_fromUInt64(0x20LL)
        ), 32
      )
    );
  result1 = 
    HELPER(reflect_32)(this,
      
      HELPER(crc32_be_u32)(this,
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument1_data, 32
          )),
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument3, 32
          ))));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCLELLW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (ZX.32
        (READ.argument2))))
  (WRITE.result1
    (APPLY.32.reflect_32
      (APPLY.32.crc32_be_u32
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument1_data)))
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument3))))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  result1 = 
    HELPER(reflect_32)(this,
      
      HELPER(crc32_be_u32)(this,
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument1_data, 32
          )),
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument3, 32
          ))));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CRCLELLW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_data
    (XOR
      (ZX.32
        (READ.argument1))
      (ZX.32
        (READ.argument2))))
  (WRITE.result1
    (APPLY.32.reflect_32
      (APPLY.32.crc32_be_u32
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument1_data)))
        (APPLY.32.reflect_32
          (ZX.32
            (READ.argument3))))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_data = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  argument1_data = 
    Int256_xor(
      Int256_zx(
        argument1, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  result1 = 
    HELPER(reflect_32)(this,
      
      HELPER(crc32_be_u32)(this,
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument1_data, 32
          )),
        
        HELPER(reflect_32)(this,
          
          Int256_zx(
            argument3, 32
          ))));
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2UWD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2UWD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2UWD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2UWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2SUWD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2SUWD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2SUWD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2SUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2W_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_l)
          (READ.argument2_l))
        (MUL
          (READ.argument3_m)
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_l, 
          argument2_l
        ), 
        Int256_mul(
          argument3_m, 
          argument2_m
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2W_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_l)
          (READ.argument2_l))
        (MUL
          (READ.argument3_m)
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_l, 
          argument2_l
        ), 
        Int256_mul(
          argument3_m, 
          argument2_m
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2W_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_l)
          (READ.argument2_l))
        (MUL
          (READ.argument3_m)
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_l, 
          argument2_l
        ), 
        Int256_mul(
          argument3_m, 
          argument2_m
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2W_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_l)
          (READ.argument2_l))
        (MUL
          (READ.argument3_m)
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1 = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_l, 
          argument2_l
        ), 
        Int256_mul(
          argument3_m, 
          argument2_m
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_DOT2WDP_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 2, 1, decoded[1] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 3, 2, decoded[2] - Register_kv3_P0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WDP_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_z
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_t
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.96))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_z
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_t
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.96))))
  (WRITE.result1_l
    (ADD
      (MUL
        (SX.32
          (READ.argument3_x))
        (SX.32
          (READ.argument2_x)))
      (MUL
        (SX.32
          (READ.argument3_y))
        (SX.32
          (READ.argument2_y)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument3_z))
        (SX.32
          (READ.argument2_z)))
      (MUL
        (SX.32
          (READ.argument3_t))
        (SX.32
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument3_x = 
    Int256_zx(
      argument3, 32
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 128
    );
  argument2_x = 
    Int256_zx(
      argument2, 32
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_x, 32
        ), 
        Int256_sx(
          argument2_x, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_y, 32
        ), 
        Int256_sx(
          argument2_y, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument3_z, 32
        ), 
        Int256_sx(
          argument2_z, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument3_t, 32
        ), 
        Int256_sx(
          argument2_t, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2UWDP_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_z
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_t
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.96))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_z
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_t
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.96))))
  (WRITE.result1_l
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_x))
        (ZX.32
          (READ.argument2_x)))
      (MUL
        (ZX.32
          (READ.argument3_y))
        (ZX.32
          (READ.argument2_y)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_z))
        (ZX.32
          (READ.argument2_z)))
      (MUL
        (ZX.32
          (READ.argument3_t))
        (ZX.32
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument3_x = 
    Int256_zx(
      argument3, 32
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 128
    );
  argument2_x = 
    Int256_zx(
      argument2, 32
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_x, 32
        ), 
        Int256_zx(
          argument2_x, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 32
        ), 
        Int256_zx(
          argument2_y, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_z, 32
        ), 
        Int256_zx(
          argument2_z, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 32
        ), 
        Int256_zx(
          argument2_t, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2SUWDP_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_z
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_t
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.96))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_z
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_t
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.96))))
  (WRITE.result1_l
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_x))
        (SX.32
          (READ.argument2_x)))
      (MUL
        (ZX.32
          (READ.argument3_y))
        (SX.32
          (READ.argument2_y)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (ZX.32
          (READ.argument3_z))
        (SX.32
          (READ.argument2_z)))
      (MUL
        (ZX.32
          (READ.argument3_t))
        (SX.32
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument3_x = 
    Int256_zx(
      argument3, 32
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 128
    );
  argument2_x = 
    Int256_zx(
      argument2, 32
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_x, 32
        ), 
        Int256_sx(
          argument2_x, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_y, 32
        ), 
        Int256_sx(
          argument2_y, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_zx(
          argument3_z, 32
        ), 
        Int256_sx(
          argument2_z, 32
        )
      ), 
      Int256_mul(
        Int256_zx(
          argument3_t, 32
        ), 
        Int256_sx(
          argument2_t, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWQ_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_z
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_t
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.96))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_z
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_t
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.96))))
  (WRITE.result1_x
    (ZX.32
      (MUL
        (READ.argument3_x)
        (READ.argument2_x))))
  (WRITE.result1_y
    (ZX.32
      (MUL
        (READ.argument3_y)
        (READ.argument2_y))))
  (WRITE.result1_z
    (ZX.32
      (MUL
        (READ.argument3_z)
        (READ.argument2_z))))
  (WRITE.result1_t
    (ZX.32
      (MUL
        (READ.argument3_t)
        (READ.argument2_t))))
  (WRITE.result1_l
    (IOR
      (SHL
        (READ.result1_y)
        (CONST.32))
      (ZX.32
        (READ.result1_x))))
  (WRITE.result1_m
    (IOR
      (SHL
        (READ.result1_t)
        (CONST.32))
      (ZX.32
        (READ.result1_z))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument3_x = 
    Int256_zx(
      argument3, 32
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 128
    );
  argument2_x = 
    Int256_zx(
      argument2, 32
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_x = 
    Int256_zx(
      Int256_mul(
        argument3_x, 
        argument2_x
      ), 32
    );
  result1_y = 
    Int256_zx(
      Int256_mul(
        argument3_y, 
        argument2_y
      ), 32
    );
  result1_z = 
    Int256_zx(
      Int256_mul(
        argument3_z, 
        argument2_z
      ), 32
    );
  result1_t = 
    Int256_zx(
      Int256_mul(
        argument3_t, 
        argument2_t
      ), 32
    );
  result1_l = 
    Int256_or(
      Int256_shl(
        result1_y, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_x, 32
      )
    );
  result1_m = 
    Int256_or(
      Int256_shl(
        result1_t, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_z, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_DOT2WZP_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_z
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_t
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.96))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_z
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_t
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.96))))
  (WRITE.result1_l
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_x)
          (READ.argument2_x))
        (MUL
          (READ.argument3_y)
          (READ.argument2_y)))))
  (WRITE.result1_m
    (ZX.32
      (ADD
        (MUL
          (READ.argument3_z)
          (READ.argument2_z))
        (MUL
          (READ.argument3_t)
          (READ.argument2_t)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  argument3_x = 
    Int256_zx(
      argument3, 32
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 128
    );
  argument2_x = 
    Int256_zx(
      argument2, 32
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_l = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_x, 
          argument2_x
        ), 
        Int256_mul(
          argument3_y, 
          argument2_y
        )
      ), 32
    );
  result1_m = 
    Int256_zx(
      Int256_add(
        Int256_mul(
          argument3_z, 
          argument2_z
        ), 
        Int256_mul(
          argument3_t, 
          argument2_t
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWP_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULHQ_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (WRITE.result1
    (IOR
      (IOR
        (SHL
          (READ.result1_t)
          (CONST.48))
        (SHL
          (ZX.16
            (READ.result1_z))
          (CONST.32)))
      (IOR
        (SHL
          (ZX.16
            (READ.result1_y))
          (CONST.16))
        (ZX.16
          (READ.result1_x)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  result1 = 
    Int256_or(
      Int256_or(
        Int256_shl(
          result1_t, 
          Int256_fromUInt64(0x30LL)
        ), 
        Int256_shl(
          Int256_zx(
            result1_z, 16
          ), 
          Int256_fromUInt64(0x20LL)
        )
      ), 
      Int256_or(
        Int256_shl(
          Int256_zx(
            result1_y, 16
          ), 
          Int256_fromUInt64(0x10LL)
        ), 
        Int256_zx(
          result1_x, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWC_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWC_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWC_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWC_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULCWC_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.32))
      (ZX.32
        (READ.result1_l))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x20LL)
      ), 
      Int256_zx(
        result1_l, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWDC_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.64))
      (ZX.64
        (READ.result1_l))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_zx(
        result1_l, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULCWDC_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ADD
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_l)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_m)))))
  (WRITE.result1_m
    (SUB
      (MUL
        (SX.32
          (READ.argument2_l))
        (SX.32
          (READ.argument3_m)))
      (MUL
        (SX.32
          (READ.argument2_m))
        (SX.32
          (READ.argument3_l)))))
  (WRITE.result1
    (IOR
      (SHL
        (READ.result1_m)
        (CONST.64))
      (ZX.64
        (READ.result1_l))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_add(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_mul(
        Int256_sx(
          argument2_l, 32
        ), 
        Int256_sx(
          argument3_m, 32
        )
      ), 
      Int256_mul(
        Int256_sx(
          argument2_m, 32
        ), 
        Int256_sx(
          argument3_l, 32
        )
      )
    );
  result1 = 
    Int256_or(
      Int256_shl(
        result1_m, 
        Int256_fromUInt64(0x40LL)
      ), 
      Int256_zx(
        result1_l, 64
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (ZX.16
        (READ.argument3_x))
      (ZX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (ZX.16
        (READ.argument3_y))
      (ZX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (ZX.16
        (READ.argument3_z))
      (ZX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (ZX.16
        (READ.argument3_t))
      (ZX.16
        (READ.argument2_t))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_zx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_zx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_zx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_zx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUHWQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (MUL
      (ZX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (MUL
      (ZX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (MUL
      (ZX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (MUL
      (ZX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.96))
          (SHL
            (ZX.32
              (READ.result1_z))
            (CONST.64)))
        (IOR
          (SHL
            (ZX.32
              (READ.result1_y))
            (CONST.32))
          (ZX.32
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_mul(
      Int256_zx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_mul(
      Int256_zx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_mul(
      Int256_zx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_mul(
      Int256_zx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x60LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 32
            ), 
            Int256_fromUInt64(0x40LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 32
            ), 
            Int256_fromUInt64(0x20LL)
          ), 
          Int256_zx(
            result1_x, 32
          )
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (SX.64
        (READ.argument1))
      (MUL
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ADD
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_add(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (ADD
        (READ.argument1)
        (MUL
          (READ.argument3)
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_zx(
      Int256_add(
        argument1, 
        Int256_mul(
          argument3, 
          argument2
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (ADD
        (READ.argument1)
        (MUL
          (READ.argument3)
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_zx(
      Int256_add(
        argument1, 
        Int256_mul(
          argument3, 
          argument2
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument1))
      (MUL
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (SX.64
        (READ.argument1))
      (MUL
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_sx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (ZX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_zx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFSUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFSUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (ZX.64
        (READ.argument1))
      (MUL
        (ZX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_sub(
      Int256_zx(
        argument1, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (SUB
        (READ.argument1)
        (MUL
          (READ.argument3)
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_zx(
      Int256_sub(
        argument1, 
        Int256_mul(
          argument3, 
          argument2
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.2
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (SUB
        (READ.argument1)
        (MUL
          (READ.argument3)
          (READ.argument2)))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  result1 = 
    Int256_zx(
      Int256_sub(
        argument1, 
        Int256_mul(
          argument3, 
          argument2
        )
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (SX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_sx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.32
        (READ.argument3))
      (ZX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 32
      ), 
      Int256_zx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUWD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUWD_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (MUL
      (ZX.32
        (READ.argument3))
      (SX.32
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_mul(
      Int256_zx(
        argument3, 32
      ), 
      Int256_sx(
        argument2, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULW_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (MUL
        (READ.argument3)
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_mul(
        argument3, 
        argument2
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULW_registerW_registerZ_upper27_lower5_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.32
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ZX.32
      (MUL
        (READ.argument3)
        (READ.argument2))))
  (STORE.3
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_zx(
      Int256_mul(
        argument3, 
        argument2
      ), 32
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (ADD
      (SX.64
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (SX.64
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_add(
      Int256_sx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_sx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (ADD
      (ZX.64
        (READ.argument1_l))
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (ZX.64
        (READ.argument1_m))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_add(
      Int256_zx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_zx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MADDSUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (ADD
      (ZX.64
        (READ.argument1_l))
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ADD
      (ZX.64
        (READ.argument1_m))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_add(
      Int256_zx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_add(
      Int256_zx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA212W_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1_l)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1_l)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (READ.argument1_m)))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1_m)
        (CONST.32))))
  (WRITE.result1_x
    (ZX.32
      (ADD
        (READ.argument1_x)
        (MUL
          (READ.argument2_l)
          (READ.argument3_l)))))
  (WRITE.result1_y
    (ZX.32
      (ADD
        (READ.argument1_y)
        (MUL
          (READ.argument2_l)
          (READ.argument3_m)))))
  (WRITE.result1_z
    (ZX.32
      (ADD
        (READ.argument1_z)
        (MUL
          (READ.argument2_m)
          (READ.argument3_l)))))
  (WRITE.result1_t
    (ZX.32
      (ADD
        (READ.argument1_t)
        (MUL
          (READ.argument2_m)
          (READ.argument3_m)))))
  (WRITE.result1_l
    (IOR
      (READ.result1_x)
      (SHL
        (READ.result1_y)
        (CONST.32))))
  (WRITE.result1_m
    (IOR
      (READ.result1_z)
      (SHL
        (READ.result1_t)
        (CONST.32))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_x = 
    Int256_zx(
      argument1_l, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1_l, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      argument1_m, 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1_m, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_x = 
    Int256_zx(
      Int256_add(
        argument1_x, 
        Int256_mul(
          argument2_l, 
          argument3_l
        )
      ), 32
    );
  result1_y = 
    Int256_zx(
      Int256_add(
        argument1_y, 
        Int256_mul(
          argument2_l, 
          argument3_m
        )
      ), 32
    );
  result1_z = 
    Int256_zx(
      Int256_add(
        argument1_z, 
        Int256_mul(
          argument2_m, 
          argument3_l
        )
      ), 32
    );
  result1_t = 
    Int256_zx(
      Int256_add(
        argument1_t, 
        Int256_mul(
          argument2_m, 
          argument3_m
        )
      ), 32
    );
  result1_l = 
    Int256_or(
      result1_x, 
      Int256_shl(
        result1_y, 
        Int256_fromUInt64(0x20LL)
      )
    );
  result1_m = 
    Int256_or(
      result1_z, 
      Int256_shl(
        result1_t, 
        Int256_fromUInt64(0x20LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (SUB
      (SX.64
        (READ.argument1_l))
      (MUL
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SUB
      (SX.64
        (READ.argument1_m))
      (MUL
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (SUB
      (ZX.64
        (READ.argument1_l))
      (MUL
        (ZX.32
          (READ.argument3_l))
        (ZX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SUB
      (ZX.64
        (READ.argument1_m))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (ZX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_sub(
      Int256_zx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_zx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_zx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_zx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MSBFSUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.result1_l
    (SUB
      (ZX.64
        (READ.argument1_l))
      (MUL
        (ZX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (SUB
      (ZX.64
        (READ.argument1_m))
      (MUL
        (ZX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_l = 
    Int256_sub(
      Int256_zx(
        argument1_l, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_sub(
      Int256_zx(
        argument1_m, 64
      ), 
      Int256_mul(
        Int256_zx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMS212W_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument1
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.argument1_l
    (ZX.64
      (READ.argument1)))
  (WRITE.argument1_m
    (ZX.64
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_x
    (ZX.32
      (READ.argument1_l)))
  (WRITE.argument1_y
    (ZX.32
      (SHR
        (READ.argument1_l)
        (CONST.32))))
  (WRITE.argument1_z
    (ZX.32
      (READ.argument1_m)))
  (WRITE.argument1_t
    (ZX.32
      (SHR
        (READ.argument1_m)
        (CONST.32))))
  (WRITE.result1_x
    (ZX.32
      (SUB
        (READ.argument1_x)
        (MUL
          (READ.argument2_l)
          (READ.argument3_l)))))
  (WRITE.result1_y
    (ZX.32
      (SUB
        (READ.argument1_y)
        (MUL
          (READ.argument2_l)
          (READ.argument3_m)))))
  (WRITE.result1_z
    (ZX.32
      (SUB
        (READ.argument1_z)
        (MUL
          (READ.argument2_m)
          (READ.argument3_l)))))
  (WRITE.result1_t
    (ZX.32
      (SUB
        (READ.argument1_t)
        (MUL
          (READ.argument2_m)
          (READ.argument3_m)))))
  (WRITE.result1_l
    (IOR
      (READ.result1_x)
      (SHL
        (READ.result1_y)
        (CONST.32))))
  (WRITE.result1_m
    (IOR
      (READ.result1_z)
      (SHL
        (READ.result1_t)
        (CONST.32))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_l = Int256_zero;
  Int256_ argument1_m = Int256_zero;
  Int256_ argument1_t = Int256_zero;
  Int256_ argument1_x = Int256_zero;
  Int256_ argument1_y = Int256_zero;
  Int256_ argument1_z = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  argument1_l = 
    Int256_zx(
      argument1, 64
    );
  argument1_m = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument1_x = 
    Int256_zx(
      argument1_l, 32
    );
  argument1_y = 
    Int256_zx(
      Int256_shru(
        argument1_l, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_z = 
    Int256_zx(
      argument1_m, 32
    );
  argument1_t = 
    Int256_zx(
      Int256_shru(
        argument1_m, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_x = 
    Int256_zx(
      Int256_sub(
        argument1_x, 
        Int256_mul(
          argument2_l, 
          argument3_l
        )
      ), 32
    );
  result1_y = 
    Int256_zx(
      Int256_sub(
        argument1_y, 
        Int256_mul(
          argument2_l, 
          argument3_m
        )
      ), 32
    );
  result1_z = 
    Int256_zx(
      Int256_sub(
        argument1_z, 
        Int256_mul(
          argument2_m, 
          argument3_l
        )
      ), 32
    );
  result1_t = 
    Int256_zx(
      Int256_sub(
        argument1_t, 
        Int256_mul(
          argument2_m, 
          argument3_m
        )
      ), 32
    );
  result1_l = 
    Int256_or(
      result1_x, 
      Int256_shl(
        result1_y, 
        Int256_fromUInt64(0x20LL)
      )
    );
  result1_m = 
    Int256_or(
      result1_z, 
      Int256_shl(
        result1_t, 
        Int256_fromUInt64(0x20LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (ZX.32
        (READ.argument3_l))
      (ZX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (ZX.32
        (READ.argument3_m))
      (ZX.32
        (READ.argument2_m))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_zx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_zx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MULSUWDP_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (MUL
      (ZX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (MUL
      (ZX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_mul(
      Int256_zx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_mul(
      Int256_zx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MM212W_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_x
    (ZX.32
      (MUL
        (READ.argument2_l)
        (READ.argument3_l))))
  (WRITE.result1_y
    (ZX.32
      (MUL
        (READ.argument2_l)
        (READ.argument3_m))))
  (WRITE.result1_z
    (ZX.32
      (MUL
        (READ.argument2_m)
        (READ.argument3_l))))
  (WRITE.result1_t
    (ZX.32
      (MUL
        (READ.argument2_m)
        (READ.argument3_m))))
  (WRITE.result1_l
    (IOR
      (READ.result1_x)
      (SHL
        (READ.result1_y)
        (CONST.32))))
  (WRITE.result1_m
    (IOR
      (READ.result1_z)
      (SHL
        (READ.result1_t)
        (CONST.32))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.64))
        (ZX.64
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_x = 
    Int256_zx(
      Int256_mul(
        argument2_l, 
        argument3_l
      ), 32
    );
  result1_y = 
    Int256_zx(
      Int256_mul(
        argument2_l, 
        argument3_m
      ), 32
    );
  result1_z = 
    Int256_zx(
      Int256_mul(
        argument2_m, 
        argument3_l
      ), 32
    );
  result1_t = 
    Int256_zx(
      Int256_mul(
        argument2_m, 
        argument3_m
      ), 32
    );
  result1_l = 
    Int256_or(
      result1_x, 
      Int256_shl(
        result1_y, 
        Int256_fromUInt64(0x20LL)
      )
    );
  result1_m = 
    Int256_or(
      result1_z, 
      Int256_shl(
        result1_t, 
        Int256_fromUInt64(0x20LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_l, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FFMAD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 1, 0, decoded[0] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 3, 2, Int256_fromInt64((ImmediateValue)decoded[3-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FFMAD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 5, 1, 0, decoded[0] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWP_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHQ_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_64_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_64_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWP_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_32_32_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_32_32_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHQ_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_16_16_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_16_16_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWP_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHQ_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDP_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FMULWDP_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 5, 1, 0, decoded[0] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDP_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDP_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_32_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_32_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 5, 3, 2, decoded[2] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHWQ_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHWQ_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHWQ_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHWQ_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_16_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_16_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWC_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWC_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWC_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWC_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmulc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmulc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDC_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDC_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDC_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWDC_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmulc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmulc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWC_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWC_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWC_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWC_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmulcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmulcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWDC_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWDC_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWDC_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmulcc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmulcc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULCWDC_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmulcc_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmulcc_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDWP_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDHQ_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDDP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_64_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_64_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCWC_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.faddcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(faddcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCWC_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.faddcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(faddcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCWC_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.faddcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(faddcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCWC_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.faddcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(faddcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCDC_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.faddcc_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(faddcc_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDCWCP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.128.faddcc_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(faddcc_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFWP_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFWP_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFWP_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFWP_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFHQ_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFHQ_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFHQ_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFHQ_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_16_16_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_16_16_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFDP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_64_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_64_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCWC_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbfcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbfcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCWC_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbfcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbfcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCWC_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbfcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbfcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCWC_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbfcc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbfcc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCDC_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbfcc_64_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbfcc_64_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFCWCP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.128.fsbfcc_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbfcc_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWDP_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWDP_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWDP_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 3, 2, decoded[2] - Register_kv3_P0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHWQ_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHWQ_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHWQ_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffma_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffma_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMAHWQ_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_16_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_16_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_32_32
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_32_32)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_32_64
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_32_64)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWDP_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWDP_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWDP_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSWDP_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_32_64_x2
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_32_64_x2)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHWQ_registerM_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHWQ_registerM_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHWQ_registerM_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%1)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.ffms_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 128
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(ffms_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FFMSHWQ_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_16_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_16_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fadd_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fadd_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FADDW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fsbf_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fsbf_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSBFW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_16_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_16_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULHW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_16_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_16_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULW_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULW_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULW_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fmul_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fmul_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMULWD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2W_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2W_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2W_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2W_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fdot2_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fdot2_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WD_registerW_registerZ_signed10_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.10
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 10
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WD_registerW_registerZ_upper27_lower10_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.37
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 37
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WD_registerW_registerZ_extend27_upper27_lower10_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (SX.64
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.RM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.16)
          (CONST.2)))))
  (WRITE.result1
    (APPLY.fdot2_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.5)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.1)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.3)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.5
        (AGGL.CS
          (CONST.4)
          (CONST.1)))))
  (STORE.5
    (AGGL.CS
      (CONST.5)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.5
    (AGGL.CS
      (CONST.1)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.5
    (AGGL.CS
      (CONST.3)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.5
    (AGGL.CS
      (CONST.4)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.5
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_sx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  RM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    );
  result1 = 
    HELPER(fdot2_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WD_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fdot2_32_64
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fdot2_32_64)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WZP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.128.fdot2_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fdot2_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FDOT2WDP_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fdot2_32_64_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fdot2_32_64_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmm2awq
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmm2awq)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmm2swq
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmm2swq)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMM212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmm2wq
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmm2wq)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COPYQ_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (ZX.64
        (READ.argument2))
      (SHL
        (READ.argument3)
        (CONST.64))))
  (STORE.3
    (AGGL.PGR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_zx(
        argument2, 64
      ), 
      Int256_shl(
        argument3, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_COPYO_registerN_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_QGR)(this, 1, 2, 1, decoded[1] - Register_kv3_Q0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_COPYO_registerN_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (READ.argument2))
  (STORE.4
    (AGGL.QGR
      (METHOD.%1)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  result1 = 
    argument2;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_COPYO_registerN_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_QGR)(this, 4, 1, 0, decoded[0] - Register_kv3_Q0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_MOVETQ_registerAl_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (ZX.64
        (READ.argument2))
      (SHL
        (READ.argument3)
        (CONST.64))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.2
    (AGGL.XBR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      Int256_zx(
        argument2, 64
      ), 
      Int256_shl(
        argument3, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MOVETQ_registerAl_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XBR)(this, 2, 1, 0, decoded[0] - Register_kv3_B0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 1, decoded[1] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.6
      (METHOD.%4)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MUL
      (AND
        (READ.argument4)
        (CONST.63))
      (CONST.8)))
  (WRITE.result1
    (READ.argument2))
  (IF
    (GE
      (READ.shift)
      (CONST.256))
    (WRITE.result1
      (SHR
        (ZX.256
          (READ.argument3))
        (SUB
          (READ.shift)
          (CONST.256))))
    (IF
      (I2B
        (READ.shift))
      (WRITE.result1
        (IOR
          (SHR
            (ZX.256
              (READ.argument2))
            (READ.shift))
          (ZX.256
            (SHL
              (READ.argument3)
              (SUB
                (CONST.256)
                (READ.shift))))))
      (SKIP)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.QGR
      (METHOD.%1)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 6
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  shift = 
    Int256_mul(
      Int256_and(
        argument4, 
        Int256_fromUInt64(0x3fLL)
      ), 
      Int256_fromUInt64(0x8LL)
    );
  result1 = 
    argument2;
  if (
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0x100LL)
    ) >= 0
  )
  {
    result1 = 
      Int256_shru(
        Int256_zx(
          argument3, 256
        ), 
        Int256_sub(
          shift, 
          Int256_fromUInt64(0x100LL)
        )
      );
  }
  else {
    if (
      Int256_toBool(
        shift
      )
    )
    {
      result1 = 
        Int256_or(
          Int256_shru(
            Int256_zx(
              argument2, 256
            ), 
            shift
          ), 
          Int256_zx(
            Int256_shl(
              argument3, 
              Int256_sub(
                Int256_fromUInt64(0x100LL), 
                shift
              )
            ), 256
          )
        );
    }
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 1, decoded[1] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_GPR)(this, 0, 4, 3, decoded[3] - Register_kv3_R0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MUL
      (AND
        (READ.argument4)
        (CONST.63))
      (CONST.8)))
  (WRITE.result1
    (READ.argument2))
  (IF
    (GE
      (READ.shift)
      (CONST.256))
    (WRITE.result1
      (SHR
        (ZX.256
          (READ.argument3))
        (SUB
          (READ.shift)
          (CONST.256))))
    (IF
      (I2B
        (READ.shift))
      (WRITE.result1
        (IOR
          (SHR
            (ZX.256
              (READ.argument2))
            (READ.shift))
          (ZX.256
            (SHL
              (READ.argument3)
              (SUB
                (CONST.256)
                (READ.shift))))))
      (SKIP)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.QGR
      (METHOD.%1)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  shift = 
    Int256_mul(
      Int256_and(
        argument4, 
        Int256_fromUInt64(0x3fLL)
      ), 
      Int256_fromUInt64(0x8LL)
    );
  result1 = 
    argument2;
  if (
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0x100LL)
    ) >= 0
  )
  {
    result1 = 
      Int256_shru(
        Int256_zx(
          argument3, 256
        ), 
        Int256_sub(
          shift, 
          Int256_fromUInt64(0x100LL)
        )
      );
  }
  else {
    if (
      Int256_toBool(
        shift
      )
    )
    {
      result1 = 
        Int256_or(
          Int256_shru(
            Int256_zx(
              argument2, 256
            ), 
            shift
          ), 
          Int256_zx(
            Int256_shl(
              argument3, 
              Int256_sub(
                Int256_fromUInt64(0x100LL), 
                shift
              )
            ), 256
          )
        );
    }
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 0, decoded[0] - Register_kv3_A0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_MT44D_registerAq_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 6, ((decoded[1] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 7, ((decoded[1] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 8, ((decoded[1] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 9, ((decoded[1] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MT44D_registerAq_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0
    (APPLY.transpose_64_4x4_0
      (READ.argument2_0)
      (READ.argument2_1)
      (READ.argument2_2)
      (READ.argument2_3)))
  (WRITE.result1_1
    (APPLY.transpose_64_4x4_1
      (READ.argument2_0)
      (READ.argument2_1)
      (READ.argument2_2)
      (READ.argument2_3)))
  (WRITE.result1_2
    (APPLY.transpose_64_4x4_2
      (READ.argument2_0)
      (READ.argument2_1)
      (READ.argument2_2)
      (READ.argument2_3)))
  (WRITE.result1_3
    (APPLY.transpose_64_4x4_3
      (READ.argument2_0)
      (READ.argument2_1)
      (READ.argument2_2)
      (READ.argument2_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_3 = Int256_zero;


  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  result1_0 = 
    HELPER(transpose_64_4x4_0)(this,
      
      argument2_0,
      
      argument2_1,
      
      argument2_2,
      
      argument2_3);
  result1_1 = 
    HELPER(transpose_64_4x4_1)(this,
      
      argument2_0,
      
      argument2_1,
      
      argument2_2,
      
      argument2_3);
  result1_2 = 
    HELPER(transpose_64_4x4_2)(this,
      
      argument2_0,
      
      argument2_1,
      
      argument2_2,
      
      argument2_3);
  result1_3 = 
    HELPER(transpose_64_4x4_3)(this,
      
      argument2_0,
      
      argument2_1,
      
      argument2_2,
      
      argument2_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 2, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MT44D_registerAq_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 2, ((decoded[0] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 3, ((decoded[0] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 4, ((decoded[0] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 5, ((decoded[0] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 6, ((decoded[1] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 7, ((decoded[1] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 3, decoded[3] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.32.dot8_8_32
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot8_8_32
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot8_8_32
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot8_8_32
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot8_8_32
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot8_8_32
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot8_8_32
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot8_8_32
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot8_8_32
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot8_8_32
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot8_8_32
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot8_8_32
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot8_8_32
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot8_8_32
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot8_8_32
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot8_8_32
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_32_32_x8
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_32_32_x8
      (READ.argument2_1)
      (READ.result1_1)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  result1_0_0 = 
    HELPER(dot8_8_32)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot8_8_32)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot8_8_32)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot8_8_32)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot8_8_32)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot8_8_32)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot8_8_32)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot8_8_32)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot8_8_32)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot8_8_32)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot8_8_32)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot8_8_32)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot8_8_32)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot8_8_32)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot8_8_32)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot8_8_32)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_1,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 4, ((decoded[0] - Register_kv3_W0) << 1) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 5, ((decoded[0] - Register_kv3_W0) << 1) + 1);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA484UBW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.32.dot8u_8_32
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot8u_8_32
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot8u_8_32
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot8u_8_32
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot8u_8_32
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot8u_8_32
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot8u_8_32
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot8u_8_32
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot8u_8_32
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot8u_8_32
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot8u_8_32
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot8u_8_32
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot8u_8_32
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot8u_8_32
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot8u_8_32
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot8u_8_32
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_32_32_x8
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_32_32_x8
      (READ.argument2_1)
      (READ.result1_1)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  result1_0_0 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot8u_8_32)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_1,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA484SUBW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.32.dot8su_8_32
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot8su_8_32
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot8su_8_32
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot8su_8_32
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot8su_8_32
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot8su_8_32
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot8su_8_32
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot8su_8_32
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot8su_8_32
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot8su_8_32
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot8su_8_32
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot8su_8_32
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot8su_8_32
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot8su_8_32
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot8su_8_32
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot8su_8_32
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_32_32_x8
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_32_32_x8
      (READ.argument2_1)
      (READ.result1_1)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  result1_0_0 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot8su_8_32)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_1,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA484USBW_registerAp_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.32.dot8us_8_32
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot8us_8_32
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot8us_8_32
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot8us_8_32
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot8us_8_32
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot8us_8_32
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot8us_8_32
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot8us_8_32
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot8us_8_32
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot8us_8_32
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot8us_8_32
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot8us_8_32
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot8us_8_32
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot8us_8_32
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot8us_8_32
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot8us_8_32
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_32_32_x8
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_32_32_x8
      (READ.argument2_1)
      (READ.result1_1)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  result1_0_0 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot8us_8_32)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_32_32_x8)(this,
      
      argument2_1,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 8, ((decoded[1] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 9, ((decoded[1] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 10, ((decoded[1] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 11, ((decoded[1] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 3, decoded[3] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 4, ((decoded[0] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 5, ((decoded[0] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 6, ((decoded[0] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 7, ((decoded[0] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444UHBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444SUHBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444USHBD0_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444HBD1_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.96))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.160))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.224))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444UHBD1_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.96))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.160))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.224))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444SUHBD1_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.96))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.160))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.224))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (APPLY.64.zxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      HELPER(zxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444USHBD1_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.32))))
  (WRITE.argument4_1
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.96))))
  (WRITE.argument4_2
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.160))))
  (WRITE.argument4_3
    (ZX.32
      (SHR
        (READ.argument4)
        (CONST.224))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_0_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_0_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_0_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_1_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_1_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_1_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_1_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_2_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_2_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_2_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_2_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_3_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_0))))
  (WRITE.result1_3_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_1))))
  (WRITE.result1_3_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_2))))
  (WRITE.result1_3_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (APPLY.64.sxb_x4
        (READ.argument4_3))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_0_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_0_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_0_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_1_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_1_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_1_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_1_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_2_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_2_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_2_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_2_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_3_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_0));
  result1_3_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_1));
  result1_3_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_2));
  result1_3_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      HELPER(sxb_x4)(this,
        
        argument4_3));
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444HD_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4_16_64
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4_16_64
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4_16_64
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4_16_64
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot4_16_64)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444UHD_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4u_16_64
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444SUHD_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4su_16_64
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_MMA444USHD_registerAq_registerBq_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:2)
          (CONST.1)))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (READ.argument4_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (READ.argument4_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (READ.argument4_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_0)
      (READ.argument4_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (READ.argument4_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (READ.argument4_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (READ.argument4_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_1)
      (READ.argument4_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (READ.argument4_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (READ.argument4_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (READ.argument4_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_2)
      (READ.argument4_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (READ.argument4_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (READ.argument4_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (READ.argument4_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4us_16_64
      (READ.argument3_3)
      (READ.argument4_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument2_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument2_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument2_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument2_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 9), 256
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 10), 256
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 11), 256
    );
  result1_0_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      argument4_0);
  result1_0_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      argument4_1);
  result1_0_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      argument4_2);
  result1_0_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_0,
      
      argument4_3);
  result1_1_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      argument4_0);
  result1_1_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      argument4_1);
  result1_1_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      argument4_2);
  result1_1_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_1,
      
      argument4_3);
  result1_2_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      argument4_0);
  result1_2_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      argument4_1);
  result1_2_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      argument4_2);
  result1_2_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_2,
      
      argument4_3);
  result1_3_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      argument4_0);
  result1_3_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      argument4_1);
  result1_3_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      argument4_2);
  result1_3_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument3_3,
      
      argument4_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument2_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 7, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 4, ((decoded[1] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 3, decoded[3] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.32
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.32))))
  (WRITE.argument2_1_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_1_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.96))))
  (WRITE.XRM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.20)
          (CONST.2)))))
  (WRITE.result1_0_0
    (APPLY.32.fdot4add_16_32_reset
      (READ.XRM)
      (READ.argument3_0)
      (READ.argument4_0)
      (READ.argument2_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_0)
      (READ.argument4_1)
      (READ.argument2_0_1)))
  (WRITE.result1_1_0
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_1)
      (READ.argument4_0)
      (READ.argument2_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_1)
      (READ.argument4_1)
      (READ.argument2_1_1)))
  (WRITE.result1
    (APPLY.join_32_x4
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.13)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.9)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.11)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.12)
          (CONST.1)))))
  (STORE.6
    (AGGL.CS
      (CONST.13)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.6
    (AGGL.CS
      (CONST.9)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.6
    (AGGL.CS
      (CONST.11)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.6
    (AGGL.CS
      (CONST.12)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.6
    (AGGL.XBR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 32
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_1_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  XRM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    );
  result1_0_0 = 
    HELPER(fdot4add_16_32_reset)(this,
      
      XRM,
      
      argument3_0,
      
      argument4_0,
      
      argument2_0_0);
  result1_0_1 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_0,
      
      argument4_1,
      
      argument2_0_1);
  result1_1_0 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_1,
      
      argument4_0,
      
      argument2_1_0);
  result1_1_1 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_1,
      
      argument4_1,
      
      argument2_1_1);
  result1 = 
    HELPER(join_32_x4)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 13, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 9, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 11, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 12, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 6, 13, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 9, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 11, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 12, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XBR)(this, 6, 1, 0, decoded[0] - Register_kv3_B0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMA242HW1_registerA1_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_0
    (ZX.64
      (READ.argument4)))
  (WRITE.argument4_1
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.64))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_2_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_2_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.160))))
  (WRITE.argument2_3_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_3_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.224))))
  (WRITE.XRM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.20)
          (CONST.2)))))
  (WRITE.result1_2_0
    (APPLY.32.fdot4add_16_32_reset
      (READ.XRM)
      (READ.argument3_2)
      (READ.argument4_0)
      (READ.argument2_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_2)
      (READ.argument4_1)
      (READ.argument2_2_1)))
  (WRITE.result1_3_0
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_3)
      (READ.argument4_0)
      (READ.argument2_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_3)
      (READ.argument4_1)
      (READ.argument2_3_1)))
  (WRITE.result1
    (APPLY.join_32_x4
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.13)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.9)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.11)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.12)
          (CONST.1)))))
  (STORE.6
    (AGGL.CS
      (CONST.13)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.6
    (AGGL.CS
      (CONST.9)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.6
    (AGGL.CS
      (CONST.11)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.6
    (AGGL.CS
      (CONST.12)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.6
    (AGGL.XBR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_2_0 = Int256_zero;
  Int256_ argument2_2_1 = Int256_zero;
  Int256_ argument2_3_0 = Int256_zero;
  Int256_ argument2_3_1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_0 = Int256_zero;
  Int256_ argument4_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_0 = 
    Int256_zx(
      argument4, 64
    );
  argument4_1 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_2_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_3_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  XRM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    );
  result1_2_0 = 
    HELPER(fdot4add_16_32_reset)(this,
      
      XRM,
      
      argument3_2,
      
      argument4_0,
      
      argument2_2_0);
  result1_2_1 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_2,
      
      argument4_1,
      
      argument2_2_1);
  result1_3_0 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_3,
      
      argument4_0,
      
      argument2_3_0);
  result1_3_1 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_3,
      
      argument4_1,
      
      argument2_3_1);
  result1 = 
    HELPER(join_32_x4)(this,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 13, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 9, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 11, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 12, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 6, 13, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 9, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 11, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 12, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 4, ((decoded[1] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 3, decoded[3] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_0_2
    (ZX.32
      (READ.argument2_1)))
  (WRITE.argument2_0_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.32))))
  (WRITE.argument2_1_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.96))))
  (WRITE.XRM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.20)
          (CONST.2)))))
  (WRITE.result1_0_2
    (APPLY.32.fdot4add_16_32_reset
      (READ.XRM)
      (READ.argument3_0)
      (READ.argument4_2)
      (READ.argument2_0_2)))
  (WRITE.result1_0_3
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_0)
      (READ.argument4_3)
      (READ.argument2_0_3)))
  (WRITE.result1_1_2
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_1)
      (READ.argument4_2)
      (READ.argument2_1_2)))
  (WRITE.result1_1_3
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_1)
      (READ.argument4_3)
      (READ.argument2_1_3)))
  (WRITE.result1
    (APPLY.join_32_x4
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.13)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.9)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.11)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.12)
          (CONST.1)))))
  (STORE.6
    (AGGL.CS
      (CONST.13)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.6
    (AGGL.CS
      (CONST.9)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.6
    (AGGL.CS
      (CONST.11)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.6
    (AGGL.CS
      (CONST.12)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.6
    (AGGL.XBR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_0_2 = 
    Int256_zx(
      argument2_1, 32
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  XRM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    );
  result1_0_2 = 
    HELPER(fdot4add_16_32_reset)(this,
      
      XRM,
      
      argument3_0,
      
      argument4_2,
      
      argument2_0_2);
  result1_0_3 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_0,
      
      argument4_3,
      
      argument2_0_3);
  result1_1_2 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_1,
      
      argument4_2,
      
      argument2_1_2);
  result1_1_3 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_1,
      
      argument4_3,
      
      argument2_1_3);
  result1 = 
    HELPER(join_32_x4)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 13, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 9, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 11, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 12, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 6, 13, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 9, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 11, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 12, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_FMMA242HW3_registerA3_registerBp_registerC_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument4_2
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.128))))
  (WRITE.argument4_3
    (ZX.64
      (SHR
        (READ.argument4)
        (CONST.192))))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_2_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_2_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.160))))
  (WRITE.argument2_3_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_3_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.224))))
  (WRITE.XRM
    (F2I.2
      (LOAD.1
        (AGGL.CS
          (CONST.20)
          (CONST.2)))))
  (WRITE.result1_2_2
    (APPLY.32.fdot4add_16_32_reset
      (READ.XRM)
      (READ.argument3_2)
      (READ.argument4_2)
      (READ.argument2_2_2)))
  (WRITE.result1_2_3
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_2)
      (READ.argument4_3)
      (READ.argument2_2_3)))
  (WRITE.result1_3_2
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_3)
      (READ.argument4_2)
      (READ.argument2_3_2)))
  (WRITE.result1_3_3
    (APPLY.32.fdot4add_16_32_noreset
      (READ.XRM)
      (READ.argument3_3)
      (READ.argument4_3)
      (READ.argument2_3_3)))
  (WRITE.result1
    (APPLY.join_32_x4
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (WRITE.CS_in
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.13)
          (CONST.1)))))
  (WRITE.CS_io
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.9)
          (CONST.1)))))
  (WRITE.CS_ov
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.11)
          (CONST.1)))))
  (WRITE.CS_un
    (F2I.1
      (LOAD.6
        (AGGL.CS
          (CONST.12)
          (CONST.1)))))
  (STORE.6
    (AGGL.CS
      (CONST.13)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finexact)
        (READ.CS_in))))
  (STORE.6
    (AGGL.CS
      (CONST.9)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.finvalid)
        (READ.CS_io))))
  (STORE.6
    (AGGL.CS
      (CONST.11)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.foverflow)
        (READ.CS_ov))))
  (STORE.6
    (AGGL.CS
      (CONST.12)
      (CONST.1))
    (I2F.1
      (IOR
        (APPLY.funderflow)
        (READ.CS_un))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.6
    (AGGL.XBR
      (METHOD.%1)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2_2 = Int256_zero;
  Int256_ argument2_2_3 = Int256_zero;
  Int256_ argument2_3_2 = Int256_zero;
  Int256_ argument2_3_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ argument4_2 = Int256_zero;
  Int256_ argument4_3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument4_2 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument4_3 = 
    Int256_zx(
      Int256_shru(
        argument4, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_2_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_3_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  XRM = 
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    );
  result1_2_2 = 
    HELPER(fdot4add_16_32_reset)(this,
      
      XRM,
      
      argument3_2,
      
      argument4_2,
      
      argument2_2_2);
  result1_2_3 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_2,
      
      argument4_3,
      
      argument2_2_3);
  result1_3_2 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_3,
      
      argument4_2,
      
      argument2_3_2);
  result1_3_3 = 
    HELPER(fdot4add_16_32_noreset)(this,
      
      XRM,
      
      argument3_3,
      
      argument4_3,
      
      argument2_3_3);
  result1 = 
    HELPER(join_32_x4)(this,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  CS_in = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 13, 1, 1), 1
    );
  CS_io = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 9, 1, 1), 1
    );
  CS_ov = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 11, 1, 1), 1
    );
  CS_un = 
    Int256_zx(
      HELPER(readFromStorage_CS)(this, 6, 12, 1, 1), 1
    );
  HELPER(writeToStorage_CS)(this, 6, 13, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finexact)(this), 
        CS_in
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 9, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(finvalid)(this), 
        CS_io
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 11, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(foverflow)(this), 
        CS_ov
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 6, 12, 1, 1, 
    Int256_zx(
      Int256_or(
        HELPER(funderflow)(this), 
        CS_un
      ), 1
    )
  );
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 4, ((decoded[3] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 5, ((decoded[3] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 6, ((decoded[3] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 7, ((decoded[3] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.6
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_1_0
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_0_1
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_0_2
    (ZX.64
      (READ.argument2_2)))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_2)
        (CONST.64))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_0_3
    (ZX.64
      (READ.argument2_3)))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_3)
        (CONST.64))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.argument2_0_0)
      (READ.argument2_0_1)
      (READ.argument2_0_2)
      (READ.argument2_0_3)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.argument2_1_0)
      (READ.argument2_1_1)
      (READ.argument2_1_2)
      (READ.argument2_1_3)))
  (IF
    (I2B
      (READ.dropbits))
    (SEQ
      (WRITE.result1_0
        (APPLY.256.round_64_x4
          (READ.roundint)
          (READ.dropbits)
          (READ.result1_0)))
      (WRITE.result1_1
        (APPLY.256.round_64_x4
          (READ.roundint)
          (READ.dropbits)
          (READ.result1_1))))
    (SKIP))
  (WRITE.result1_0
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.64.satu_64_16_x4
        (READ.result1_0))
      (APPLY.64.sat_64_16_x4
        (READ.result1_0))))
  (WRITE.result1_1
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.64.satu_64_16_x4
        (READ.result1_1))
      (APPLY.64.sat_64_16_x4
        (READ.result1_1))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XBR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_1)
          (CONST.64))
        (ZX.64
          (READ.result1_0))))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 6
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_1_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_1 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_0_2 = 
    Int256_zx(
      argument2_2, 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_0_3 = 
    Int256_zx(
      argument2_3, 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      argument2_0_0,
      
      argument2_0_1,
      
      argument2_0_2,
      
      argument2_0_3);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      argument2_1_0,
      
      argument2_1_1,
      
      argument2_1_2,
      
      argument2_1_3);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_0 = 
      HELPER(round_64_x4)(this,
        
        roundint,
        
        dropbits,
        
        result1_0);
    result1_1 = 
      HELPER(round_64_x4)(this,
        
        roundint,
        
        dropbits,
        
        result1_1);
    ;
  }
;
  result1_0 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_64_16_x4)(this,
      
      result1_0)
    :
    HELPER(sat_64_16_x4)(this,
      
      result1_0);
  result1_1 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_64_16_x4)(this,
      
      result1_1)
    :
    HELPER(sat_64_16_x4)(this,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_1, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_0, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XBR)(this, 4, 3, 2, decoded[2] - Register_kv3_B0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVDHV1_roundint_saturate_registerAh_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.6
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_2_0
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_3_0
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_2_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_3_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_2_2
    (ZX.64
      (SHR
        (READ.argument2_2)
        (CONST.128))))
  (WRITE.argument2_3_2
    (ZX.64
      (SHR
        (READ.argument2_2)
        (CONST.192))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_2_3
    (ZX.64
      (SHR
        (READ.argument2_3)
        (CONST.128))))
  (WRITE.argument2_3_3
    (ZX.64
      (SHR
        (READ.argument2_3)
        (CONST.192))))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.argument2_2_0)
      (READ.argument2_2_1)
      (READ.argument2_2_2)
      (READ.argument2_2_3)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.argument2_3_0)
      (READ.argument2_3_1)
      (READ.argument2_3_2)
      (READ.argument2_3_3)))
  (IF
    (I2B
      (READ.dropbits))
    (SEQ
      (WRITE.result1_0
        (APPLY.256.round_64_x4
          (READ.roundint)
          (READ.dropbits)
          (READ.result1_0)))
      (WRITE.result1_1
        (APPLY.256.round_64_x4
          (READ.roundint)
          (READ.dropbits)
          (READ.result1_1))))
    (SKIP))
  (WRITE.result1_0
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.64.satu_64_16_x4
        (READ.result1_0))
      (APPLY.64.sat_64_16_x4
        (READ.result1_0))))
  (WRITE.result1_1
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.64.satu_64_16_x4
        (READ.result1_1))
      (APPLY.64.sat_64_16_x4
        (READ.result1_1))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XBR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (IOR
        (SHL
          (READ.result1_1)
          (CONST.64))
        (ZX.64
          (READ.result1_0))))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_2_0 = Int256_zero;
  Int256_ argument2_2_1 = Int256_zero;
  Int256_ argument2_2_2 = Int256_zero;
  Int256_ argument2_2_3 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument2_3_0 = Int256_zero;
  Int256_ argument2_3_1 = Int256_zero;
  Int256_ argument2_3_2 = Int256_zero;
  Int256_ argument2_3_3 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 6
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_2_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_2_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_2_2 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3_2 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_2_3 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3_3 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      argument2_2_0,
      
      argument2_2_1,
      
      argument2_2_2,
      
      argument2_2_3);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      argument2_3_0,
      
      argument2_3_1,
      
      argument2_3_2,
      
      argument2_3_3);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_0 = 
      HELPER(round_64_x4)(this,
        
        roundint,
        
        dropbits,
        
        result1_0);
    result1_1 = 
      HELPER(round_64_x4)(this,
        
        roundint,
        
        dropbits,
        
        result1_1);
    ;
  }
;
  result1_0 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_64_16_x4)(this,
      
      result1_0)
    :
    HELPER(sat_64_16_x4)(this,
      
      result1_0);
  result1_1 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_64_16_x4)(this,
      
      result1_1)
    :
    HELPER(sat_64_16_x4)(this,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_1, 
          Int256_fromUInt64(0x40LL)
        ), 
        Int256_zx(
          result1_0, 64
        )
      ), 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.5
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.32
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.32))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_0_2
    (ZX.32
      (READ.argument2_1)))
  (WRITE.argument2_0_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.32))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_0_4
    (ZX.32
      (READ.argument2_2)))
  (WRITE.argument2_0_5
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.32))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_0_6
    (ZX.32
      (READ.argument2_3)))
  (WRITE.argument2_0_7
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.32))))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.argument2_0_0)
      (READ.argument2_0_1)
      (READ.argument2_0_2)
      (READ.argument2_0_3)
      (READ.argument2_0_4)
      (READ.argument2_0_5)
      (READ.argument2_0_6)
      (READ.argument2_0_7)))
  (IF
    (I2B
      (READ.dropbits))
    (WRITE.result1_0
      (APPLY.256.round_32_x8
        (READ.roundint)
        (READ.dropbits)
        (READ.result1_0)))
    (SKIP))
  (WRITE.result1_0
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.satu_32_8_x8
        (READ.result1_0))
      (APPLY.sat_32_8_x8
        (READ.result1_0))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XCR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1_0))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_0_4 = Int256_zero;
  Int256_ argument2_0_5 = Int256_zero;
  Int256_ argument2_0_6 = Int256_zero;
  Int256_ argument2_0_7 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 5
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 32
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_2 = 
    Int256_zx(
      argument2_1, 32
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_0_4 = 
    Int256_zx(
      argument2_2, 32
    );
  argument2_0_5 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_0_6 = 
    Int256_zx(
      argument2_3, 32
    );
  argument2_0_7 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      argument2_0_0,
      
      argument2_0_1,
      
      argument2_0_2,
      
      argument2_0_3,
      
      argument2_0_4,
      
      argument2_0_5,
      
      argument2_0_6,
      
      argument2_0_7);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_0 = 
      HELPER(round_32_x8)(this,
        
        roundint,
        
        dropbits,
        
        result1_0);
  }
;
  result1_0 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_32_8_x8)(this,
      
      result1_0)
    :
    HELPER(sat_32_8_x8)(this,
      
      result1_0);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1_0, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XCR)(this, 4, 3, 2, decoded[2] - Register_kv3_C0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVWBV1_roundint_saturate_registerAy_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.5
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_1_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.96))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_1_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.96))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_1_4
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.64))))
  (WRITE.argument2_1_5
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.96))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_1_6
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.64))))
  (WRITE.argument2_1_7
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.96))))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.argument2_1_0)
      (READ.argument2_1_1)
      (READ.argument2_1_2)
      (READ.argument2_1_3)
      (READ.argument2_1_4)
      (READ.argument2_1_5)
      (READ.argument2_1_6)
      (READ.argument2_1_7)))
  (IF
    (I2B
      (READ.dropbits))
    (WRITE.result1_1
      (APPLY.256.round_32_x8
        (READ.roundint)
        (READ.dropbits)
        (READ.result1_1)))
    (SKIP))
  (WRITE.result1_1
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.satu_32_8_x8
        (READ.result1_1))
      (APPLY.sat_32_8_x8
        (READ.result1_1))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XCR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1_1))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_1_4 = Int256_zero;
  Int256_ argument2_1_5 = Int256_zero;
  Int256_ argument2_1_6 = Int256_zero;
  Int256_ argument2_1_7 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 5
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_1_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_4 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_5 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_1_6 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_7 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      argument2_1_0,
      
      argument2_1_1,
      
      argument2_1_2,
      
      argument2_1_3,
      
      argument2_1_4,
      
      argument2_1_5,
      
      argument2_1_6,
      
      argument2_1_7);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_1 = 
      HELPER(round_32_x8)(this,
        
        roundint,
        
        dropbits,
        
        result1_1);
  }
;
  result1_1 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_32_8_x8)(this,
      
      result1_1)
    :
    HELPER(sat_32_8_x8)(this,
      
      result1_1);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1_1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVWBV2_roundint_saturate_registerAz_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.5
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_2_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_2_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.160))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_2_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_2_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.160))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_2_4
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.128))))
  (WRITE.argument2_2_5
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.160))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_2_6
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.128))))
  (WRITE.argument2_2_7
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.160))))
  (WRITE.result1_2
    (APPLY.256.join_32_x8
      (READ.argument2_2_0)
      (READ.argument2_2_1)
      (READ.argument2_2_2)
      (READ.argument2_2_3)
      (READ.argument2_2_4)
      (READ.argument2_2_5)
      (READ.argument2_2_6)
      (READ.argument2_2_7)))
  (IF
    (I2B
      (READ.dropbits))
    (WRITE.result1_2
      (APPLY.256.round_32_x8
        (READ.roundint)
        (READ.dropbits)
        (READ.result1_2)))
    (SKIP))
  (WRITE.result1_2
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.satu_32_8_x8
        (READ.result1_2))
      (APPLY.sat_32_8_x8
        (READ.result1_2))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XCR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1_2))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_2_0 = Int256_zero;
  Int256_ argument2_2_1 = Int256_zero;
  Int256_ argument2_2_2 = Int256_zero;
  Int256_ argument2_2_3 = Int256_zero;
  Int256_ argument2_2_4 = Int256_zero;
  Int256_ argument2_2_5 = Int256_zero;
  Int256_ argument2_2_6 = Int256_zero;
  Int256_ argument2_2_7 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 5
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_2_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_2_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_2_4 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_5 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_2_6 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_7 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  result1_2 = 
    HELPER(join_32_x8)(this,
      
      argument2_2_0,
      
      argument2_2_1,
      
      argument2_2_2,
      
      argument2_2_3,
      
      argument2_2_4,
      
      argument2_2_5,
      
      argument2_2_6,
      
      argument2_2_7);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_2 = 
      HELPER(round_32_x8)(this,
        
        roundint,
        
        dropbits,
        
        result1_2);
  }
;
  result1_2 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_32_8_x8)(this,
      
      result1_2)
    :
    HELPER(sat_32_8_x8)(this,
      
      result1_2);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1_2, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_CONVWBV3_roundint_saturate_registerAt_registerBq_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.saturate
    (ZX.1
      (METHOD.%2)))
  (WRITE.roundint
    (ZX.3
      (METHOD.%1)))
  (WRITE.dropbits
    (ZX.5
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.48)
            (CONST.6))))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_3_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_3_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.224))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_3_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_3_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.224))))
  (WRITE.argument2_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:2)
          (CONST.1)))))
  (WRITE.argument2_3_4
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.192))))
  (WRITE.argument2_3_5
    (ZX.32
      (SHR
        (READ.argument2_2)
        (CONST.224))))
  (WRITE.argument2_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:3)
          (CONST.1)))))
  (WRITE.argument2_3_6
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.192))))
  (WRITE.argument2_3_7
    (ZX.32
      (SHR
        (READ.argument2_3)
        (CONST.224))))
  (WRITE.result1_3
    (APPLY.256.join_32_x8
      (READ.argument2_3_0)
      (READ.argument2_3_1)
      (READ.argument2_3_2)
      (READ.argument2_3_3)
      (READ.argument2_3_4)
      (READ.argument2_3_5)
      (READ.argument2_3_6)
      (READ.argument2_3_7)))
  (IF
    (I2B
      (READ.dropbits))
    (WRITE.result1_3
      (APPLY.256.round_32_x8
        (READ.roundint)
        (READ.dropbits)
        (READ.result1_3)))
    (SKIP))
  (WRITE.result1_3
    (SELECT
      (I2B
        (READ.saturate))
      (APPLY.satu_32_8_x8
        (READ.result1_3))
      (APPLY.sat_32_8_x8
        (READ.result1_3))))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XCR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1_3))))
*/
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument2_3_0 = Int256_zero;
  Int256_ argument2_3_1 = Int256_zero;
  Int256_ argument2_3_2 = Int256_zero;
  Int256_ argument2_3_3 = Int256_zero;
  Int256_ argument2_3_4 = Int256_zero;
  Int256_ argument2_3_5 = Int256_zero;
  Int256_ argument2_3_6 = Int256_zero;
  Int256_ argument2_3_7 = Int256_zero;
  Int256_ dropbits = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ roundint = Int256_zero;
  Int256_ saturate = Int256_zero;


  saturate = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  roundint = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  dropbits = 
    Int256_zx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 48, 6, 1), 6
      ), 5
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_3_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_3_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument2_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_3_4 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_5 = 
    Int256_zx(
      Int256_shru(
        argument2_2, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument2_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument2_3_6 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_7 = 
    Int256_zx(
      Int256_shru(
        argument2_3, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  result1_3 = 
    HELPER(join_32_x8)(this,
      
      argument2_3_0,
      
      argument2_3_1,
      
      argument2_3_2,
      
      argument2_3_3,
      
      argument2_3_4,
      
      argument2_3_5,
      
      argument2_3_6,
      
      argument2_3_7);
  if (
    Int256_toBool(
      dropbits
    )
  )
  {
    result1_3 = 
      HELPER(round_32_x8)(this,
        
        roundint,
        
        dropbits,
        
        result1_3);
  }
;
  result1_3 = 
    Int256_toBool(
      saturate
    )
    ?
    HELPER(satu_32_8_x8)(this,
      
      result1_3)
    :
    HELPER(sat_32_8_x8)(this,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1_3, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 5, 4, decoded[4] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.rectify
    (ZX.1
      (METHOD.%3)))
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.pow2scale
    (SX.6
      (F2I.6
        (LOAD.1
          (AGGL.CS
            (CONST.54)
            (CONST.6))))))
  (WRITE.XRM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.20)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.256.fpow2scale_32_32_x8
      (READ.XRM)
      (READ.pow2scale)
      (READ.argument2)))
  (IF
    (I2B
      (READ.rectify))
    (WRITE.result1
      (APPLY.frelu_32_32_x8_noreset
        (READ.result1)))
    (SKIP))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_xun
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.12)
              (CONST.1)))))
      (WRITE.CS_xin
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.13)
              (CONST.1)))))
      (WRITE.CS_xio
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.9)
              (CONST.1)))))
      (WRITE.CS_xov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.11)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.12)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_xun))))
      (STORE.5
        (AGGL.CS
          (CONST.13)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_xin))))
      (STORE.5
        (AGGL.CS
          (CONST.9)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_xio))))
      (STORE.5
        (AGGL.CS
          (CONST.11)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_xov)))))
    (SKIP))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%4)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ CS_xin = Int256_zero;
  Int256_ CS_xio = Int256_zero;
  Int256_ CS_xov = Int256_zero;
  Int256_ CS_xun = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ pow2scale = Int256_zero;
  Int256_ rectify = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  rectify = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  pow2scale = 
    Int256_sx(
      Int256_zx(
          HELPER(readFromStorage_CS)(this, 1, 54, 6, 1), 6
      ), 6
    );
  XRM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fpow2scale_32_32_x8)(this,
      
      XRM,
      
      pow2scale,
      
      argument2);
  if (
    Int256_toBool(
      rectify
    )
  )
  {
    result1 = 
      HELPER(frelu_32_32_x8_noreset)(this,
        
        result1);
  }
;
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_xun = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 12, 1, 1), 1
      );
    CS_xin = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 13, 1, 1), 1
      );
    CS_xio = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 9, 1, 1), 1
      );
    CS_xov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 11, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 12, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_xun
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 13, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_xin
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 9, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_xio
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 11, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_xov
        ), 1
      )
    );
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 4, ((decoded[3] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 5, ((decoded[3] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.32
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.32))))
  (WRITE.argument2_1_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_1_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.96))))
  (WRITE.argument2_2_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_2_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.160))))
  (WRITE.argument2_3_0
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_3_1
    (ZX.32
      (SHR
        (READ.argument2_0)
        (CONST.224))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_0_2
    (ZX.32
      (READ.argument2_1)))
  (WRITE.argument2_0_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.32))))
  (WRITE.argument2_1_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.96))))
  (WRITE.argument2_2_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_2_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.160))))
  (WRITE.argument2_3_2
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_3_3
    (ZX.32
      (SHR
        (READ.argument2_1)
        (CONST.224))))
  (WRITE.XRM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.20)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.argument_0
    (APPLY.256.join_32_x8
      (READ.argument2_0_0)
      (READ.argument2_0_1)
      (READ.argument2_0_2)
      (READ.argument2_0_3)
      (READ.argument2_1_0)
      (READ.argument2_1_1)
      (READ.argument2_1_2)
      (READ.argument2_1_3)))
  (WRITE.argument_1
    (APPLY.256.join_32_x8
      (READ.argument2_2_0)
      (READ.argument2_2_1)
      (READ.argument2_2_2)
      (READ.argument2_2_3)
      (READ.argument2_3_0)
      (READ.argument2_3_1)
      (READ.argument2_3_2)
      (READ.argument2_3_3)))
  (WRITE.result1_0
    (APPLY.128.fnarrow_32_16_x8_reset
      (READ.XRM)
      (READ.argument_0)))
  (WRITE.result1_1
    (APPLY.128.fnarrow_32_16_x8_noreset
      (READ.XRM)
      (READ.argument_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_xun
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.12)
              (CONST.1)))))
      (WRITE.CS_xin
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.13)
              (CONST.1)))))
      (WRITE.CS_xio
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.9)
              (CONST.1)))))
      (WRITE.CS_xov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.11)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.12)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_xun))))
      (STORE.5
        (AGGL.CS
          (CONST.13)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_xin))))
      (STORE.5
        (AGGL.CS
          (CONST.9)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_xio))))
      (STORE.5
        (AGGL.CS
          (CONST.11)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_xov)))))
    (SKIP))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%3)
      (CONST.1))
    (I2F.256
      (IOR
        (SHL
          (READ.result1_1)
          (CONST.128))
        (ZX.128
          (READ.result1_0))))))
*/
  Int256_ CS_xin = Int256_zero;
  Int256_ CS_xio = Int256_zero;
  Int256_ CS_xov = Int256_zero;
  Int256_ CS_xun = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_2_0 = Int256_zero;
  Int256_ argument2_2_1 = Int256_zero;
  Int256_ argument2_2_2 = Int256_zero;
  Int256_ argument2_2_3 = Int256_zero;
  Int256_ argument2_3_0 = Int256_zero;
  Int256_ argument2_3_1 = Int256_zero;
  Int256_ argument2_3_2 = Int256_zero;
  Int256_ argument2_3_3 = Int256_zero;
  Int256_ argument_0 = Int256_zero;
  Int256_ argument_1 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 32
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_1_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2_2_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_3_0 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_2 = 
    Int256_zx(
      argument2_1, 32
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument2_2_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument2_2_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument2_3_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument2_3_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  XRM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    )
    :
    rounding;
  argument_0 = 
    HELPER(join_32_x8)(this,
      
      argument2_0_0,
      
      argument2_0_1,
      
      argument2_0_2,
      
      argument2_0_3,
      
      argument2_1_0,
      
      argument2_1_1,
      
      argument2_1_2,
      
      argument2_1_3);
  argument_1 = 
    HELPER(join_32_x8)(this,
      
      argument2_2_0,
      
      argument2_2_1,
      
      argument2_2_2,
      
      argument2_2_3,
      
      argument2_3_0,
      
      argument2_3_1,
      
      argument2_3_2,
      
      argument2_3_3);
  result1_0 = 
    HELPER(fnarrow_32_16_x8_reset)(this,
      
      XRM,
      
      argument_0);
  result1_1 = 
    HELPER(fnarrow_32_16_x8_noreset)(this,
      
      XRM,
      
      argument_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_xun = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 12, 1, 1), 1
      );
    CS_xin = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 13, 1, 1), 1
      );
    CS_xio = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 9, 1, 1), 1
      );
    CS_xov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 11, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 12, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_xun
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 13, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_xin
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 9, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_xio
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 11, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_xov
        ), 1
      )
    );
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_1, 
          Int256_fromUInt64(0x80LL)
        ), 
        Int256_zx(
          result1_0, 128
        )
      ), 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COPYD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NOTD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.-1))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0xffffffffffffffffLL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NEGD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABSD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.64
          (READ.argument3))
        (SX.64
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 64
        ), 
        Int256_sx(
          argument2, 64
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ZXBD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.255))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0xffLL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXBD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (CONST.0))
  (WRITE.stopbit
    (CONST.7))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked1
    (ZX.64
      (AND
        (READ.argument2)
        (READ.mask))))
  (WRITE.masked2
    (SX.64
      (IOR
        (READ.argument2)
        (NOT
          (READ.mask)))))
  (WRITE.negative
    (AND
      (READ.argument2)
      (AND
        (READ.mask)
        (NOT
          (SHR
            (READ.mask)
            (CONST.1))))))
  (WRITE.masked
    (SELECT
      (EQ
        (READ.negative)
        (CONST.0))
      (READ.masked1)
      (READ.masked2)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ masked1 = Int256_zero;
  Int256_ masked2 = Int256_zero;
  Int256_ negative = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_fromUInt64(0LL);
  stopbit = 
    Int256_fromUInt64(0x7LL);
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked1 = 
    Int256_zx(
      Int256_and(
        argument2, 
        mask
      ), 64
    );
  masked2 = 
    Int256_sx(
      Int256_or(
        argument2, 
        Int256_not(
          mask
        )
      ), 64
    );
  negative = 
    Int256_and(
      argument2, 
      Int256_and(
        mask, 
        Int256_not(
          Int256_shru(
            mask, 
            Int256_fromUInt64(0x1LL)
          )
        )
      )
    );
  masked = 
    Int256_cmp(
      negative, 
      Int256_fromUInt64(0LL)
    ) == 0
    ?
    masked1
    :
    masked2;
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ZXHD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (CONST.0))
  (WRITE.stopbit
    (CONST.15))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked
    (AND
      (READ.argument2)
      (READ.mask)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_fromUInt64(0LL);
  stopbit = 
    Int256_fromUInt64(0xfLL);
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked = 
    Int256_and(
      argument2, 
      mask
    );
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXHD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (CONST.0))
  (WRITE.stopbit
    (CONST.15))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked1
    (ZX.64
      (AND
        (READ.argument2)
        (READ.mask))))
  (WRITE.masked2
    (SX.64
      (IOR
        (READ.argument2)
        (NOT
          (READ.mask)))))
  (WRITE.negative
    (AND
      (READ.argument2)
      (AND
        (READ.mask)
        (NOT
          (SHR
            (READ.mask)
            (CONST.1))))))
  (WRITE.masked
    (SELECT
      (EQ
        (READ.negative)
        (CONST.0))
      (READ.masked1)
      (READ.masked2)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ masked1 = Int256_zero;
  Int256_ masked2 = Int256_zero;
  Int256_ negative = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_fromUInt64(0LL);
  stopbit = 
    Int256_fromUInt64(0xfLL);
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked1 = 
    Int256_zx(
      Int256_and(
        argument2, 
        mask
      ), 64
    );
  masked2 = 
    Int256_sx(
      Int256_or(
        argument2, 
        Int256_not(
          mask
        )
      ), 64
    );
  negative = 
    Int256_and(
      argument2, 
      Int256_and(
        mask, 
        Int256_not(
          Int256_shru(
            mask, 
            Int256_fromUInt64(0x1LL)
          )
        )
      )
    );
  masked = 
    Int256_cmp(
      negative, 
      Int256_fromUInt64(0LL)
    ) == 0
    ?
    masked1
    :
    masked2;
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ZXWD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.-1))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (AND
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0xffffffffffffffffLL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_and(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SXWD_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.startbit
    (CONST.0))
  (WRITE.stopbit
    (CONST.31))
  (WRITE.bias
    (B2I
      (LE
        (READ.startbit)
        (READ.stopbit))))
  (WRITE.mask
    (ZX.64
      (ADD
        (SUB
          (SHL
            (CONST.2)
            (READ.stopbit))
          (SHL
            (SUB
              (CONST.2)
              (READ.bias))
            (READ.startbit)))
        (SUB
          (READ.bias)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.masked1
    (ZX.64
      (AND
        (READ.argument2)
        (READ.mask))))
  (WRITE.masked2
    (SX.64
      (IOR
        (READ.argument2)
        (NOT
          (READ.mask)))))
  (WRITE.negative
    (AND
      (READ.argument2)
      (AND
        (READ.mask)
        (NOT
          (SHR
            (READ.mask)
            (CONST.1))))))
  (WRITE.masked
    (SELECT
      (EQ
        (READ.negative)
        (CONST.0))
      (READ.masked1)
      (READ.masked2)))
  (WRITE.result1
    (SHR
      (READ.masked)
      (READ.startbit)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ bias = Int256_zero;
  Int256_ mask = Int256_zero;
  Int256_ masked = Int256_zero;
  Int256_ masked1 = Int256_zero;
  Int256_ masked2 = Int256_zero;
  Int256_ negative = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ startbit = Int256_zero;
  Int256_ stopbit = Int256_zero;


  startbit = 
    Int256_fromUInt64(0LL);
  stopbit = 
    Int256_fromUInt64(0x1fLL);
  bias = 
    Int256_fromBool(
      Int256_cmp(
        startbit, 
        stopbit
      ) <= 0
    );
  mask = 
    Int256_zx(
      Int256_add(
        Int256_sub(
          Int256_shl(
            Int256_fromUInt64(0x2LL), 
            stopbit
          ), 
          Int256_shl(
            Int256_sub(
              Int256_fromUInt64(0x2LL), 
              bias
            ), 
            startbit
          )
        ), 
        Int256_sub(
          bias, 
          Int256_fromUInt64(0x1LL)
        )
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  masked1 = 
    Int256_zx(
      Int256_and(
        argument2, 
        mask
      ), 64
    );
  masked2 = 
    Int256_sx(
      Int256_or(
        argument2, 
        Int256_not(
          mask
        )
      ), 64
    );
  negative = 
    Int256_and(
      argument2, 
      Int256_and(
        mask, 
        Int256_not(
          Int256_shru(
            mask, 
            Int256_fromUInt64(0x1LL)
          )
        )
      )
    );
  masked = 
    Int256_cmp(
      negative, 
      Int256_fromUInt64(0LL)
    ) == 0
    ?
    masked1
    :
    masked2;
  result1 = 
    Int256_shru(
      masked, 
      startbit
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SATDH_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.16))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (SUB
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.result1
    (SELECT
      (GT
        (READ.shift)
        (CONST.0))
      (SHR
        (SAT.64
          (SHL
            (SX.64
              (READ.argument2))
            (READ.shift)))
        (READ.shift))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0x10LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_sub(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    );
  result1 = 
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0LL)
    ) > 0
    ?
    Int256_shru(
      Int256_sat(
        Int256_shl(
          Int256_sx(
            argument2, 64
          ), 
          shift
        ), 64), 
      shift
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_SATDW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.32))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (SUB
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.result1
    (SELECT
      (GT
        (READ.shift)
        (CONST.0))
      (SHR
        (SAT.64
          (SHL
            (SX.64
              (READ.argument2))
            (READ.shift)))
        (READ.shift))
      (SX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0x20LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_sub(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    );
  result1 = 
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0LL)
    ) > 0
    ?
    Int256_shru(
      Int256_sat(
        Int256_shl(
          Int256_sx(
            argument2, 64
          ), 
          shift
        ), 64), 
      shift
    )
    :
    Int256_sx(
      argument2, 64
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_COPYW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (IOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_or(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NOTW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.-1))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (XOR
      (READ.argument2)
      (READ.argument3)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0xffffffffffffffffLL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_xor(
      argument2, 
      argument3
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NEGW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (SUB
      (READ.argument3)
      (READ.argument2)))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_sub(
      argument3, 
      argument2
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABSW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.0))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.result1
    (ABS
      (SUB
        (SX.32
          (READ.argument3))
        (SX.32
          (READ.argument2)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (AND
        (READ.result1)
        (CONST.4294967295)))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  result1 = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3, 32
        ), 
        Int256_sx(
          argument2, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_and(
        result1, 
        Int256_fromUInt64(0xffffffffLL)
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NEGWP_registerW_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (CONST.0))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (CONST.0)
      (CONST.0)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (SUB
      (SX.32
        (READ.argument3_l))
      (SX.32
        (READ.argument2_l))))
  (WRITE.result1_m
    (SUB
      (SX.32
        (READ.argument3_m))
      (SX.32
        (READ.argument2_m))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_fromUInt64(0LL);
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_fromUInt64(0LL)
    :
    Int256_fromUInt64(0LL);
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_sub(
      Int256_sx(
        argument3_l, 32
      ), 
      Int256_sx(
        argument2_l, 32
      )
    );
  result1_m = 
    Int256_sub(
      Int256_sx(
        argument3_m, 32
      ), 
      Int256_sx(
        argument2_m, 32
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABSWP_registerW_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (CONST.0))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (CONST.0)
      (CONST.0)))
  (WRITE.argument3_l
    (ZX.32
      (READ.argument3)))
  (WRITE.argument3_m
    (ZX.32
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_l
    (ZX.32
      (READ.argument2)))
  (WRITE.argument2_m
    (ZX.32
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.result1_l
    (ABS
      (SUB
        (SX.32
          (READ.argument3_l))
        (SX.32
          (READ.argument2_l)))))
  (WRITE.result1_m
    (ABS
      (SUB
        (SX.32
          (READ.argument3_m))
        (SX.32
          (READ.argument2_m)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (SHL
          (READ.result1_m)
          (CONST.32))
        (ZX.32
          (READ.result1_l))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_l = Int256_zero;
  Int256_ argument2_m = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_l = Int256_zero;
  Int256_ argument3_m = Int256_zero;
  Int256_ result1_l = Int256_zero;
  Int256_ result1_m = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_fromUInt64(0LL);
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_fromUInt64(0LL)
    :
    Int256_fromUInt64(0LL);
  argument3_l = 
    Int256_zx(
      argument3, 32
    );
  argument3_m = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_l = 
    Int256_zx(
      argument2, 32
    );
  argument2_m = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  result1_l = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_l, 32
        ), 
        Int256_sx(
          argument2_l, 32
        )
      )
    );
  result1_m = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_m, 32
        ), 
        Int256_sx(
          argument2_m, 32
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_shl(
          result1_m, 
          Int256_fromUInt64(0x20LL)
        ), 
        Int256_zx(
          result1_l, 32
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_NEGHQ_registerW_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (CONST.0))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (CONST.0)
      (CONST.0)))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (SUB
      (SX.16
        (READ.argument3_x))
      (SX.16
        (READ.argument2_x))))
  (WRITE.result1_y
    (SUB
      (SX.16
        (READ.argument3_y))
      (SX.16
        (READ.argument2_y))))
  (WRITE.result1_z
    (SUB
      (SX.16
        (READ.argument3_z))
      (SX.16
        (READ.argument2_z))))
  (WRITE.result1_t
    (SUB
      (SX.16
        (READ.argument3_t))
      (SX.16
        (READ.argument2_t))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_fromUInt64(0LL);
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_fromUInt64(0LL)
    :
    Int256_fromUInt64(0LL);
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_sub(
      Int256_sx(
        argument3_x, 16
      ), 
      Int256_sx(
        argument2_x, 16
      )
    );
  result1_y = 
    Int256_sub(
      Int256_sx(
        argument3_y, 16
      ), 
      Int256_sx(
        argument2_y, 16
      )
    );
  result1_z = 
    Int256_sub(
      Int256_sx(
        argument3_z, 16
      ), 
      Int256_sx(
        argument2_z, 16
      )
    );
  result1_t = 
    Int256_sub(
      Int256_sx(
        argument3_t, 16
      ), 
      Int256_sx(
        argument2_t, 16
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v1_ABSHQ_registerW_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.splat32
    (CONST.0))
  (WRITE.argument3
    (SELECT
      (I2B
        (READ.splat32))
      (CONST.0)
      (CONST.0)))
  (WRITE.argument3_x
    (ZX.16
      (READ.argument3)))
  (WRITE.argument3_y
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.16))))
  (WRITE.argument3_z
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.32))))
  (WRITE.argument3_t
    (ZX.16
      (SHR
        (READ.argument3)
        (CONST.48))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_x
    (ZX.16
      (READ.argument2)))
  (WRITE.argument2_y
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.16))))
  (WRITE.argument2_z
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.32))))
  (WRITE.argument2_t
    (ZX.16
      (SHR
        (READ.argument2)
        (CONST.48))))
  (WRITE.result1_x
    (ABS
      (SUB
        (SX.16
          (READ.argument3_x))
        (SX.16
          (READ.argument2_x)))))
  (WRITE.result1_y
    (ABS
      (SUB
        (SX.16
          (READ.argument3_y))
        (SX.16
          (READ.argument2_y)))))
  (WRITE.result1_z
    (ABS
      (SUB
        (SX.16
          (READ.argument3_z))
        (SX.16
          (READ.argument2_z)))))
  (WRITE.result1_t
    (ABS
      (SUB
        (SX.16
          (READ.argument3_t))
        (SX.16
          (READ.argument2_t)))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (IOR
        (IOR
          (SHL
            (READ.result1_t)
            (CONST.48))
          (SHL
            (ZX.16
              (READ.result1_z))
            (CONST.32)))
        (IOR
          (SHL
            (ZX.16
              (READ.result1_y))
            (CONST.16))
          (ZX.16
            (READ.result1_x)))))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_t = Int256_zero;
  Int256_ argument2_x = Int256_zero;
  Int256_ argument2_y = Int256_zero;
  Int256_ argument2_z = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_t = Int256_zero;
  Int256_ argument3_x = Int256_zero;
  Int256_ argument3_y = Int256_zero;
  Int256_ argument3_z = Int256_zero;
  Int256_ result1_t = Int256_zero;
  Int256_ result1_x = Int256_zero;
  Int256_ result1_y = Int256_zero;
  Int256_ result1_z = Int256_zero;
  Int256_ splat32 = Int256_zero;


  splat32 = 
    Int256_fromUInt64(0LL);
  argument3 = 
    Int256_toBool(
      splat32
    )
    ?
    Int256_fromUInt64(0LL)
    :
    Int256_fromUInt64(0LL);
  argument3_x = 
    Int256_zx(
      argument3, 16
    );
  argument3_y = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument3_z = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument3_t = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  argument2_x = 
    Int256_zx(
      argument2, 16
    );
  argument2_y = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x10LL)
      ), 16
    );
  argument2_z = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x20LL)
      ), 16
    );
  argument2_t = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x30LL)
      ), 16
    );
  result1_x = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_x, 16
        ), 
        Int256_sx(
          argument2_x, 16
        )
      )
    );
  result1_y = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_y, 16
        ), 
        Int256_sx(
          argument2_y, 16
        )
      )
    );
  result1_z = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_z, 16
        ), 
        Int256_sx(
          argument2_z, 16
        )
      )
    );
  result1_t = 
    Int256_abs(
      Int256_sub(
        Int256_sx(
          argument3_t, 16
        ), 
        Int256_sx(
          argument2_t, 16
        )
      )
    );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      Int256_or(
        Int256_or(
          Int256_shl(
            result1_t, 
            Int256_fromUInt64(0x30LL)
          ), 
          Int256_shl(
            Int256_zx(
              result1_z, 16
            ), 
            Int256_fromUInt64(0x20LL)
          )
        ), 
        Int256_or(
          Int256_shl(
            Int256_zx(
              result1_y, 16
            ), 
            Int256_fromUInt64(0x10LL)
          ), 
          Int256_zx(
            result1_x, 16
          )
        )
      ), 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v1_COPYV_registerA_registerBe_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 1, decoded[1] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v1_COPYV_registerA_registerBe_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (CONST.0))
  (WRITE.argument3
    (CONST.-1))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MUL
      (AND
        (READ.argument4)
        (CONST.63))
      (CONST.8)))
  (WRITE.result1
    (READ.argument2))
  (IF
    (GE
      (READ.shift)
      (CONST.256))
    (WRITE.result1
      (SHR
        (ZX.256
          (READ.argument3))
        (SUB
          (READ.shift)
          (CONST.256))))
    (IF
      (I2B
        (READ.shift))
      (WRITE.result1
        (IOR
          (SHR
            (ZX.256
              (READ.argument2))
            (READ.shift))
          (ZX.256
            (SHL
              (READ.argument3)
              (SUB
                (CONST.256)
                (READ.shift))))))
      (SKIP)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument4 = 
    Int256_fromUInt64(0LL);
  argument3 = 
    Int256_fromUInt64(0xffffffffffffffffLL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  shift = 
    Int256_mul(
      Int256_and(
        argument4, 
        Int256_fromUInt64(0x3fLL)
      ), 
      Int256_fromUInt64(0x8LL)
    );
  result1 = 
    argument2;
  if (
    Int256_cmp(
      shift, 
      Int256_fromUInt64(0x100LL)
    ) >= 0
  )
  {
    result1 = 
      Int256_shru(
        Int256_zx(
          argument3, 256
        ), 
        Int256_sub(
          shift, 
          Int256_fromUInt64(0x100LL)
        )
      );
  }
  else {
    if (
      Int256_toBool(
        shift
      )
    )
    {
      result1 = 
        Int256_or(
          Int256_shru(
            Int256_zx(
              argument2, 256
            ), 
            shift
          ), 
          Int256_zx(
            Int256_shl(
              argument3, 
              Int256_sub(
                Int256_fromUInt64(0x100LL), 
                shift
              )
            ), 256
          )
        );
    }
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_BREAK_brknumber_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument1
    (ZX.2
      (METHOD.%1)))
  (EFFECT.1.break
    (READ.argument1)))
*/
  Int256_ argument1 = Int256_zero;


  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  HELPER(break)(this,
    
    argument1);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromInt64((ImmediateValue)decoded[2-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_upper27_lower10_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.4)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.4)
      (ZX.32
        (READ.update))
      (ZX.32
        (READ.expected))
      (READ.boolcas)
      (SHL
        (METHOD.%5)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%5)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x4LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x4LL),
      
      Int256_zx(
        update, 32
      ),
      
      Int256_zx(
        expected, 32
      ),
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 5, 4, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_lsucond_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 2, 6, 5, decoded[5] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%6)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[5] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 6, 5, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 14, 6, 5, decoded[5] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPW_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.4)
          (ZX.32
            (READ.update))
          (ZX.32
            (READ.expected))
          (READ.boolcas)
          (SHL
            (METHOD.%6)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x4LL),
        
        Int256_zx(
          update, 32
        ),
        
        Int256_zx(
          expected, 32
        ),
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[5] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 6, 5, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_signed10_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_upper27_lower10_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%4)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[3] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_doscale_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.doscale
    (ZX.1
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.index
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.scaling
    (SELECT
      (I2B
        (READ.doscale))
      (CONST.8)
      (CONST.1)))
  (WRITE.address
    (ADD
      (READ.base)
      (MUL
        (READ.index)
        (READ.scaling))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.update
    (ZX.64
      (READ.argument3)))
  (WRITE.expected
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.success
    (APPLY.MEM_cas
      (READ.address)
      (CONST.8)
      (READ.update)
      (READ.expected)
      (READ.boolcas)
      (SHL
        (METHOD.%5)
        (CONST.1))))
  (WRITE.result3
    (IOR
      (ZX.64
        (READ.success))
      (SHL
        (READ.expected)
        (CONST.64))))
  (STORE.14
    (AGGL.PGR
      (METHOD.%5)
      (CONST.1))
    (I2F.128
      (READ.result3))))
*/
  Int256_ address = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ doscale = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ index = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ scaling = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  doscale = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  index = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  scaling = 
    Int256_toBool(
      doscale
    )
    ?
    Int256_fromUInt64(0x8LL)
    :
    Int256_fromUInt64(0x1LL);
  address = 
    Int256_add(
      base, 
      Int256_mul(
        index, 
        scaling
      )
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  update = 
    Int256_zx(
      argument3, 64
    );
  expected = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  success = 
    HELPER(MEM_cas)(this,
      
      address,
      
      Int256_fromUInt64(0x8LL),
      
      update,
      
      expected,
      
      boolcas,
      
      Int256_shl(
        Int256_fromInt64(decoded[4] - Register_kv3_P0), 
        Int256_fromUInt64(0x1LL)
      ));
  result3 = 
    Int256_or(
      Int256_zx(
        success, 64
      ), 
      Int256_shl(
        expected, 
        Int256_fromUInt64(0x40LL)
      )
    );
  HELPER(operandFromValue)(this, 5, 4, 
    Int256_zx(
      result3, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_lsucond_registerY_registerZ_registerU_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%5)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[4] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 5, 4, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_lsucond_registerY_offset27_registerZ_registerU_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%6)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[5] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 6, 5, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_ACSWAPD_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument4
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.boolcas
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument3
    (F2I.128
      (LOAD.2
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument4)
      (READ.argument1))
    (SEQ
      (WRITE.update
        (ZX.64
          (READ.argument3)))
      (WRITE.expected
        (ZX.64
          (SHR
            (READ.argument3)
            (CONST.64))))
      (WRITE.success
        (APPLY.MEM_cas
          (READ.address)
          (CONST.8)
          (READ.update)
          (READ.expected)
          (READ.boolcas)
          (SHL
            (METHOD.%6)
            (CONST.1))))
      (WRITE.result3
        (IOR
          (ZX.64
            (READ.success))
          (SHL
            (READ.expected)
            (CONST.64))))
      (STORE.14
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1))
        (I2F.128
          (READ.result3))))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument4 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ boolcas = Int256_zero;
  Int256_ expected = Int256_zero;
  Int256_ offset = Int256_zero;
  Int256_ result3 = Int256_zero;
  Int256_ success = Int256_zero;
  Int256_ update = Int256_zero;


  argument4 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  boolcas = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument4,
      
      argument1)
  )
  {
    update = 
      Int256_zx(
        argument3, 64
      );
    expected = 
      Int256_zx(
        Int256_shru(
          argument3, 
          Int256_fromUInt64(0x40LL)
        ), 64
      );
    success = 
      HELPER(MEM_cas)(this,
        
        address,
        
        Int256_fromUInt64(0x8LL),
        
        update,
        
        expected,
        
        boolcas,
        
        Int256_shl(
          Int256_fromInt64(decoded[5] - Register_kv3_P0), 
          Int256_fromUInt64(0x1LL)
        ));
    result3 = 
      Int256_or(
        Int256_zx(
          success, 64
        ), 
        Int256_shl(
          expected, 
          Int256_fromUInt64(0x40LL)
        )
      );
    HELPER(operandFromValue)(this, 6, 5, 
      Int256_zx(
        result3, 128
      )
    );
    ;
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromInt64((ImmediateValue)decoded[2-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_DTOUCHL_cachelev_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 0, 2, 1, decoded[1] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_dtouchl
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_dtouchl)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 4, 3, Int256_fromInt64((ImmediateValue)decoded[4-1]));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DTOUCHL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dtouchl
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dtouchl)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_dinvall
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_dinvall)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_DINVALL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_dinvall
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_dinvall)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_signed10_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.10
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 10
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_upper27_lower10_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.37
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 37
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_extend27_upper27_lower10_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.offset
    (SX.64
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.index
    (F2I.64
      (LOAD.0
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.index)))
  (EFFECT.4.MEM_iinvals
    (READ.address)
    (READ.cachelev)))
*/
  Int256_ address = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ index = Int256_zero;


  index = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_add(
      base, 
      index
    );
  HELPER(MEM_iinvals)(this,
    
    address,
    
    cachelev);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_lsucond_registerY_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.address
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ cachelev = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  address = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_lsucond_registerY_offset27_registerZ_double(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.27
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 27
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_IINVALS_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.4
      (METHOD.%2)))
  (WRITE.offset
    (SX.54
      (METHOD.%4)))
  (WRITE.cachelev
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.base
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.address
    (ADD
      (READ.base)
      (READ.offset)))
  (IF
    (TEST.scalarcond
      (READ.argument3)
      (READ.argument1))
    (EFFECT.4.MEM_iinvals
      (READ.address)
      (READ.cachelev))
    (SKIP)))
*/
  Int256_ address = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ base = Int256_zero;
  Int256_ cachelev = Int256_zero;
  Int256_ offset = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 4
    );
  offset = 
    Int256_sx(
      HELPER(operandRead)(this, 3), 54
    );
  cachelev = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  base = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  address = 
    Int256_add(
      base, 
      offset
    );
  if (
    HELPER(scalarcond)(this,
      
      argument3,
      
      argument1)
  )
  {
    HELPER(MEM_iinvals)(this,
      
      address,
      
      cachelev);
  }
;;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_SATUD_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MIN
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.maximum
    (SUB
      (SHL
        (CONST.1)
        (READ.shift))
      (CONST.1)))
  (WRITE.result1
    (MIN
      (READ.maximum)
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ maximum = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_cmp(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 8
    )
    :
    Int256_fromUInt64(0x40LL);
  maximum = 
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1 = 
    Int256_cmp(
      maximum, 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    maximum;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_SATUD_registerW_registerZ_unsigned6_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (ZX.6
      (METHOD.%3)))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MIN
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.maximum
    (SUB
      (SHL
        (CONST.1)
        (READ.shift))
      (CONST.1)))
  (WRITE.result1
    (MIN
      (READ.maximum)
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ maximum = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 6
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_cmp(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 8
    )
    :
    Int256_fromUInt64(0x40LL);
  maximum = 
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1 = 
    Int256_cmp(
      maximum, 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    maximum;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 3, 2, decoded[2] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_32_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_32_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMAHO_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffma_16_16_x8
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffma_16_16_x8)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMSWQ_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_32_32_x4
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_32_32_x4)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMSHO_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffms_16_16_x8
      (READ.RM)
      (READ.argument1)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffms_16_16_x8)(this,
      
      RM,
      
      argument1,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMULHO_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmul_16_16_x8
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmul_16_16_x8)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 6, 5, decoded[5] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.64.fconj_32_32
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.fmulc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%4)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(fmulc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_GPR)(this, 5, 4, 3, decoded[3] - Register_kv3_R0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_FETCH
static void
fetch_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 6, 5, decoded[5] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.128.fconj_32_32_x2
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.fmulc_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32_x2)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(fmulc_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_PGR)(this, 5, 4, 3, decoded[3] - Register_kv3_P0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMAW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdma_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdma_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMAWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdma_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdma_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_QGR)(this, 1, 4, 3, decoded[3] - Register_kv3_Q0);
  HELPER(operandFromRegFile_QGR)(this, 1, 5, 4, decoded[4] - Register_kv3_Q0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdma_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdma_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdms_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdms_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdms_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdms_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdms_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdms_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDAW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmda_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmda_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 3, 2, decoded[2] - Register_kv3_R0);
  HELPER(operandFromRegFile_PGR)(this, 1, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmda_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmda_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 3, 2, decoded[2] - Register_kv3_P0);
  HELPER(operandFromRegFile_QGR)(this, 1, 4, 3, decoded[3] - Register_kv3_Q0);
  HELPER(operandFromRegFile_QGR)(this, 1, 5, 4, decoded[4] - Register_kv3_Q0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmda_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmda_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSAW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmsa_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmsa_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSAWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmsa_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmsa_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMSAWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmsa_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmsa_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDSW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmds_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmds_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDSWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmds_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmds_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMDSWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmds_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmds_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMASW_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmas_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmas_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMASWP_rounding_silent_registerW_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmas_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%3)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmas_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFDMASWQ_rounding_silent_registerM_registerQ_registerR_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.QGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.ffdmas_32_32_x4
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(ffdmas_32_32_x4)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMM212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmm212_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmm212_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMM222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.transpose
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmm222_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.transpose)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;
  Int256_ transpose = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  transpose = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmm222_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      transpose);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmma212_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmma212_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_PGR)(this, 1, 4, 3, decoded[3] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 5, 4, decoded[4] - Register_kv3_P0);
  HELPER(operandFromRegFile_PGR)(this, 1, 6, 5, decoded[5] - Register_kv3_P0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.transpose
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmma222_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)
      (READ.transpose)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;
  Int256_ transpose = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  transpose = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmma222_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1,
      
      transpose);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmms212_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmms212_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMS222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.transpose
    (ZX.2
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fmms222_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)
      (READ.transpose)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;
  Int256_ transpose = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  transpose = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 2
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fmms222_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1,
      
      transpose);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_GPR)(this, 1, 4, 3, decoded[3] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 5, 4, decoded[4] - Register_kv3_R0);
  HELPER(operandFromRegFile_GPR)(this, 1, 6, 5, decoded[5] - Register_kv3_R0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
  HELPER(operandFromValue)(this, 3, 2, Int256_fromUInt64(ModifierMember_value(decoded[3-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.64.fconj_32_32
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.ffmac_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%4)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(ffmac_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMAWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.128.fconj_32_32_x2
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.ffmac_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32_x2)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(ffmac_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMSWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.64.fconj_32_32
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.ffmsc_32_32
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.GPR
      (METHOD.%4)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 64
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 64
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(ffmsc_32_32)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FFMSWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%3)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%2)))
  (WRITE.conjugate
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%6)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument1
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (IF
    (I2B
      (READ.conjugate))
    (WRITE.argument2
      (APPLY.128.fconj_32_32_x2
        (READ.argument2)))
    (SKIP))
  (WRITE.result1
    (APPLY.ffmsc_32_32_x2
      (READ.RM)
      (READ.argument2)
      (READ.argument3)
      (READ.argument1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%4)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ conjugate = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 3
    );
  conjugate = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  if (
    Int256_toBool(
      conjugate
    )
  )
  {
    argument2 = 
      HELPER(fconj_32_32_x2)(this,
        
        argument2);
  }
;
  result1 = 
    HELPER(ffmsc_32_32_x2)(this,
      
      RM,
      
      argument2,
      
      argument3,
      
      argument1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 4, 3, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FADDHO_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fadd_16_16_x8
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fadd_16_16_x8)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_FSBFHO_rounding_silent_registerM_registerP_registerO_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%5)
          (CONST.1)))))
  (WRITE.argument2
    (F2I.128
      (LOAD.1
        (AGGL.PGR
          (METHOD.%4)
          (CONST.1)))))
  (WRITE.RM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.16)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1
    (APPLY.fsbf_16_16_x8
      (READ.RM)
      (READ.argument2)
      (READ.argument3)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_in
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.5)
              (CONST.1)))))
      (WRITE.CS_io
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.1)
              (CONST.1)))))
      (WRITE.CS_ov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.3)
              (CONST.1)))))
      (WRITE.CS_un
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.4)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.5)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_in))))
      (STORE.5
        (AGGL.CS
          (CONST.1)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_io))))
      (STORE.5
        (AGGL.CS
          (CONST.3)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_ov))))
      (STORE.5
        (AGGL.CS
          (CONST.4)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_un)))))
    (SKIP))
  (STORE.5
    (AGGL.PGR
      (METHOD.%3)
      (CONST.1))
    (I2F.128
      (READ.result1))))
*/
  Int256_ CS_in = Int256_zero;
  Int256_ CS_io = Int256_zero;
  Int256_ CS_ov = Int256_zero;
  Int256_ CS_un = Int256_zero;
  Int256_ RM = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 128
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 128
    );
  RM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 16, 2, 1), 2
    )
    :
    rounding;
  result1 = 
    HELPER(fsbf_16_16_x8)(this,
      
      RM,
      
      argument2,
      
      argument3);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_in = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 5, 1, 1), 1
      );
    CS_io = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 1, 1, 1), 1
      );
    CS_ov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 3, 1, 1), 1
      );
    CS_un = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 4, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 5, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_in
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 1, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_io
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 3, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_ov
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 4, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_un
        ), 1
      )
    );
    ;
  }
;
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 128
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_SENDV_channel_registerA_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 1, decoded[1] - Register_kv3_A0);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_SENDV_channel_registerA_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.channel
    (ZX.1
      (METHOD.%1)))
  (WRITE.argument1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (EFFECT.4.sendv
    (READ.argument1)
    (READ.channel)))
*/
  Int256_ argument1 = Int256_zero;
  Int256_ channel = Int256_zero;


  channel = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  HELPER(sendv)(this,
    
    argument1,
    
    channel);;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_RECVV_channel_registerA_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_RECVV_channel_registerA_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.channel
    (ZX.1
      (METHOD.%1)))
  (WRITE.result1
    (APPLY.recvv
      (READ.channel)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%2)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ channel = Int256_zero;
  Int256_ result1 = Int256_zero;


  channel = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 1
    );
  result1 = 
    HELPER(recvv)(this,
      
      channel);
  HELPER(operandFromValue)(this, 2, 1, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_MMA4164BW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 3, ((decoded[0] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 4, ((decoded[0] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 5, ((decoded[1] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 6, ((decoded[1] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 7, ((decoded[2] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 8, ((decoded[2] - Register_kv3_W0) << 1) + 1);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA4164BW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:0)
          (CONST.1)))))
  (WRITE.argument3_0_0
    (ZX.64
      (READ.argument3_0)))
  (WRITE.argument3_0_1
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.64))))
  (WRITE.argument3_0_2
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.128))))
  (WRITE.argument3_0_3
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.192))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:1)
          (CONST.1)))))
  (WRITE.argument3_1_0
    (ZX.64
      (READ.argument3_1)))
  (WRITE.argument3_1_1
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.64))))
  (WRITE.argument3_1_2
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.128))))
  (WRITE.argument3_1_3
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_0
    (APPLY.128.join_64_x2
      (READ.argument3_0_0)
      (READ.argument3_1_0)))
  (WRITE.argument3_r_1
    (APPLY.128.join_64_x2
      (READ.argument3_0_1)
      (READ.argument3_1_1)))
  (WRITE.argument3_r_2
    (APPLY.128.join_64_x2
      (READ.argument3_0_2)
      (READ.argument3_1_2)))
  (WRITE.argument3_r_3
    (APPLY.128.join_64_x2
      (READ.argument3_0_3)
      (READ.argument3_1_3)))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1_0)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.224))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_0_2
    (ZX.32
      (READ.argument1_1)))
  (WRITE.argument1_0_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.32))))
  (WRITE.argument1_1_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.64))))
  (WRITE.argument1_1_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.96))))
  (WRITE.argument1_2_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.128))))
  (WRITE.argument1_2_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.160))))
  (WRITE.argument1_3_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.192))))
  (WRITE.argument1_3_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.224))))
  (WRITE.result1_0_0
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_0)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_1)
      (READ.argument1_0_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_2)
      (READ.argument1_0_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_3)
      (READ.argument1_0_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_0)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_1)
      (READ.argument1_1_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_2)
      (READ.argument1_1_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_3)
      (READ.argument1_1_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_0)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_1)
      (READ.argument1_2_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_2)
      (READ.argument1_2_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_3)
      (READ.argument1_2_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_0)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_1)
      (READ.argument1_3_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_2)
      (READ.argument1_3_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot16add_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_3)
      (READ.argument1_3_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_0_2 = Int256_zero;
  Int256_ argument1_0_3 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_1_2 = Int256_zero;
  Int256_ argument1_1_3 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_2_2 = Int256_zero;
  Int256_ argument1_2_3 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument1_3_2 = Int256_zero;
  Int256_ argument1_3_3 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_0 = Int256_zero;
  Int256_ argument3_0_1 = Int256_zero;
  Int256_ argument3_0_2 = Int256_zero;
  Int256_ argument3_0_3 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_0 = Int256_zero;
  Int256_ argument3_1_1 = Int256_zero;
  Int256_ argument3_1_2 = Int256_zero;
  Int256_ argument3_1_3 = Int256_zero;
  Int256_ argument3_r_0 = Int256_zero;
  Int256_ argument3_r_1 = Int256_zero;
  Int256_ argument3_r_2 = Int256_zero;
  Int256_ argument3_r_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_0 = 
    Int256_zx(
      argument3_0, 64
    );
  argument3_0_1 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_0_2 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_0_3 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_0 = 
    Int256_zx(
      argument3_1, 64
    );
  argument3_1_1 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_1_2 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_1_3 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_0,
      
      argument3_1_0);
  argument3_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_1,
      
      argument3_1_1);
  argument3_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_2,
      
      argument3_1_2);
  argument3_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_3,
      
      argument3_1_3);
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1_0, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_0_2 = 
    Int256_zx(
      argument1_1, 32
    );
  argument1_0_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  result1_0_0 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_0,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_1,
      
      argument1_0_1);
  result1_0_2 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_2,
      
      argument1_0_2);
  result1_0_3 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_3,
      
      argument1_0_3);
  result1_1_0 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_0,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_1,
      
      argument1_1_1);
  result1_1_2 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_2,
      
      argument1_1_2);
  result1_1_3 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_3,
      
      argument1_1_3);
  result1_2_0 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_0,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_1,
      
      argument1_2_1);
  result1_2_2 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_2,
      
      argument1_2_2);
  result1_2_3 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_3,
      
      argument1_2_3);
  result1_3_0 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_0,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_1,
      
      argument1_3_1);
  result1_3_2 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_2,
      
      argument1_3_2);
  result1_3_3 = 
    HELPER(dot16add_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_3,
      
      argument1_3_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_MMA4164BW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 3, ((decoded[0] - Register_kv3_W0) << 1) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 4, ((decoded[0] - Register_kv3_W0) << 1) + 1);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA4164UBW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:0)
          (CONST.1)))))
  (WRITE.argument3_0_0
    (ZX.64
      (READ.argument3_0)))
  (WRITE.argument3_0_1
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.64))))
  (WRITE.argument3_0_2
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.128))))
  (WRITE.argument3_0_3
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.192))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:1)
          (CONST.1)))))
  (WRITE.argument3_1_0
    (ZX.64
      (READ.argument3_1)))
  (WRITE.argument3_1_1
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.64))))
  (WRITE.argument3_1_2
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.128))))
  (WRITE.argument3_1_3
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_0
    (APPLY.128.join_64_x2
      (READ.argument3_0_0)
      (READ.argument3_1_0)))
  (WRITE.argument3_r_1
    (APPLY.128.join_64_x2
      (READ.argument3_0_1)
      (READ.argument3_1_1)))
  (WRITE.argument3_r_2
    (APPLY.128.join_64_x2
      (READ.argument3_0_2)
      (READ.argument3_1_2)))
  (WRITE.argument3_r_3
    (APPLY.128.join_64_x2
      (READ.argument3_0_3)
      (READ.argument3_1_3)))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1_0)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.224))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_0_2
    (ZX.32
      (READ.argument1_1)))
  (WRITE.argument1_0_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.32))))
  (WRITE.argument1_1_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.64))))
  (WRITE.argument1_1_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.96))))
  (WRITE.argument1_2_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.128))))
  (WRITE.argument1_2_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.160))))
  (WRITE.argument1_3_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.192))))
  (WRITE.argument1_3_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.224))))
  (WRITE.result1_0_0
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_0)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_1)
      (READ.argument1_0_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_2)
      (READ.argument1_0_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_3)
      (READ.argument1_0_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_0)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_1)
      (READ.argument1_1_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_2)
      (READ.argument1_1_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_3)
      (READ.argument1_1_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_0)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_1)
      (READ.argument1_2_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_2)
      (READ.argument1_2_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_3)
      (READ.argument1_2_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_0)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_1)
      (READ.argument1_3_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_2)
      (READ.argument1_3_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot16addu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_3)
      (READ.argument1_3_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_0_2 = Int256_zero;
  Int256_ argument1_0_3 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_1_2 = Int256_zero;
  Int256_ argument1_1_3 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_2_2 = Int256_zero;
  Int256_ argument1_2_3 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument1_3_2 = Int256_zero;
  Int256_ argument1_3_3 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_0 = Int256_zero;
  Int256_ argument3_0_1 = Int256_zero;
  Int256_ argument3_0_2 = Int256_zero;
  Int256_ argument3_0_3 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_0 = Int256_zero;
  Int256_ argument3_1_1 = Int256_zero;
  Int256_ argument3_1_2 = Int256_zero;
  Int256_ argument3_1_3 = Int256_zero;
  Int256_ argument3_r_0 = Int256_zero;
  Int256_ argument3_r_1 = Int256_zero;
  Int256_ argument3_r_2 = Int256_zero;
  Int256_ argument3_r_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_0 = 
    Int256_zx(
      argument3_0, 64
    );
  argument3_0_1 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_0_2 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_0_3 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_0 = 
    Int256_zx(
      argument3_1, 64
    );
  argument3_1_1 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_1_2 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_1_3 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_0,
      
      argument3_1_0);
  argument3_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_1,
      
      argument3_1_1);
  argument3_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_2,
      
      argument3_1_2);
  argument3_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_3,
      
      argument3_1_3);
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1_0, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_0_2 = 
    Int256_zx(
      argument1_1, 32
    );
  argument1_0_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  result1_0_0 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_0,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_1,
      
      argument1_0_1);
  result1_0_2 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_2,
      
      argument1_0_2);
  result1_0_3 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_3,
      
      argument1_0_3);
  result1_1_0 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_0,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_1,
      
      argument1_1_1);
  result1_1_2 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_2,
      
      argument1_1_2);
  result1_1_3 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_3,
      
      argument1_1_3);
  result1_2_0 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_0,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_1,
      
      argument1_2_1);
  result1_2_2 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_2,
      
      argument1_2_2);
  result1_2_3 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_3,
      
      argument1_2_3);
  result1_3_0 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_0,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_1,
      
      argument1_3_1);
  result1_3_2 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_2,
      
      argument1_3_2);
  result1_3_3 = 
    HELPER(dot16addu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_3,
      
      argument1_3_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA4164SUBW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:0)
          (CONST.1)))))
  (WRITE.argument3_0_0
    (ZX.64
      (READ.argument3_0)))
  (WRITE.argument3_0_1
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.64))))
  (WRITE.argument3_0_2
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.128))))
  (WRITE.argument3_0_3
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.192))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:1)
          (CONST.1)))))
  (WRITE.argument3_1_0
    (ZX.64
      (READ.argument3_1)))
  (WRITE.argument3_1_1
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.64))))
  (WRITE.argument3_1_2
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.128))))
  (WRITE.argument3_1_3
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_0
    (APPLY.128.join_64_x2
      (READ.argument3_0_0)
      (READ.argument3_1_0)))
  (WRITE.argument3_r_1
    (APPLY.128.join_64_x2
      (READ.argument3_0_1)
      (READ.argument3_1_1)))
  (WRITE.argument3_r_2
    (APPLY.128.join_64_x2
      (READ.argument3_0_2)
      (READ.argument3_1_2)))
  (WRITE.argument3_r_3
    (APPLY.128.join_64_x2
      (READ.argument3_0_3)
      (READ.argument3_1_3)))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1_0)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.224))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_0_2
    (ZX.32
      (READ.argument1_1)))
  (WRITE.argument1_0_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.32))))
  (WRITE.argument1_1_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.64))))
  (WRITE.argument1_1_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.96))))
  (WRITE.argument1_2_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.128))))
  (WRITE.argument1_2_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.160))))
  (WRITE.argument1_3_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.192))))
  (WRITE.argument1_3_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.224))))
  (WRITE.result1_0_0
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_0)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_1)
      (READ.argument1_0_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_2)
      (READ.argument1_0_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_3)
      (READ.argument1_0_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_0)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_1)
      (READ.argument1_1_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_2)
      (READ.argument1_1_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_3)
      (READ.argument1_1_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_0)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_1)
      (READ.argument1_2_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_2)
      (READ.argument1_2_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_3)
      (READ.argument1_2_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_0)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_1)
      (READ.argument1_3_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_2)
      (READ.argument1_3_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot16addsu_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_3)
      (READ.argument1_3_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_0_2 = Int256_zero;
  Int256_ argument1_0_3 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_1_2 = Int256_zero;
  Int256_ argument1_1_3 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_2_2 = Int256_zero;
  Int256_ argument1_2_3 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument1_3_2 = Int256_zero;
  Int256_ argument1_3_3 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_0 = Int256_zero;
  Int256_ argument3_0_1 = Int256_zero;
  Int256_ argument3_0_2 = Int256_zero;
  Int256_ argument3_0_3 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_0 = Int256_zero;
  Int256_ argument3_1_1 = Int256_zero;
  Int256_ argument3_1_2 = Int256_zero;
  Int256_ argument3_1_3 = Int256_zero;
  Int256_ argument3_r_0 = Int256_zero;
  Int256_ argument3_r_1 = Int256_zero;
  Int256_ argument3_r_2 = Int256_zero;
  Int256_ argument3_r_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_0 = 
    Int256_zx(
      argument3_0, 64
    );
  argument3_0_1 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_0_2 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_0_3 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_0 = 
    Int256_zx(
      argument3_1, 64
    );
  argument3_1_1 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_1_2 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_1_3 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_0,
      
      argument3_1_0);
  argument3_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_1,
      
      argument3_1_1);
  argument3_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_2,
      
      argument3_1_2);
  argument3_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_3,
      
      argument3_1_3);
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1_0, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_0_2 = 
    Int256_zx(
      argument1_1, 32
    );
  argument1_0_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  result1_0_0 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_0,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_1,
      
      argument1_0_1);
  result1_0_2 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_2,
      
      argument1_0_2);
  result1_0_3 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_3,
      
      argument1_0_3);
  result1_1_0 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_0,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_1,
      
      argument1_1_1);
  result1_1_2 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_2,
      
      argument1_1_2);
  result1_1_3 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_3,
      
      argument1_1_3);
  result1_2_0 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_0,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_1,
      
      argument1_2_1);
  result1_2_2 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_2,
      
      argument1_2_2);
  result1_2_3 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_3,
      
      argument1_2_3);
  result1_3_0 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_0,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_1,
      
      argument1_3_1);
  result1_3_2 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_2,
      
      argument1_3_2);
  result1_3_3 = 
    HELPER(dot16addsu_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_3,
      
      argument1_3_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA4164USBW_registerAp_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:0)
          (CONST.1)))))
  (WRITE.argument3_0_0
    (ZX.64
      (READ.argument3_0)))
  (WRITE.argument3_0_1
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.64))))
  (WRITE.argument3_0_2
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.128))))
  (WRITE.argument3_0_3
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.192))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3:1)
          (CONST.1)))))
  (WRITE.argument3_1_0
    (ZX.64
      (READ.argument3_1)))
  (WRITE.argument3_1_1
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.64))))
  (WRITE.argument3_1_2
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.128))))
  (WRITE.argument3_1_3
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_0
    (APPLY.128.join_64_x2
      (READ.argument3_0_0)
      (READ.argument3_1_0)))
  (WRITE.argument3_r_1
    (APPLY.128.join_64_x2
      (READ.argument3_0_1)
      (READ.argument3_1_1)))
  (WRITE.argument3_r_2
    (APPLY.128.join_64_x2
      (READ.argument3_0_2)
      (READ.argument3_1_2)))
  (WRITE.argument3_r_3
    (APPLY.128.join_64_x2
      (READ.argument3_0_3)
      (READ.argument3_1_3)))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1_0)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1_0)
        (CONST.224))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_0_2
    (ZX.32
      (READ.argument1_1)))
  (WRITE.argument1_0_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.32))))
  (WRITE.argument1_1_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.64))))
  (WRITE.argument1_1_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.96))))
  (WRITE.argument1_2_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.128))))
  (WRITE.argument1_2_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.160))))
  (WRITE.argument1_3_2
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.192))))
  (WRITE.argument1_3_3
    (ZX.32
      (SHR
        (READ.argument1_1)
        (CONST.224))))
  (WRITE.result1_0_0
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_0)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_1)
      (READ.argument1_0_1)))
  (WRITE.result1_0_2
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_2)
      (READ.argument1_0_2)))
  (WRITE.result1_0_3
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_0)
      (READ.argument3_r_3)
      (READ.argument1_0_3)))
  (WRITE.result1_1_0
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_0)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_1)
      (READ.argument1_1_1)))
  (WRITE.result1_1_2
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_2)
      (READ.argument1_1_2)))
  (WRITE.result1_1_3
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_1)
      (READ.argument3_r_3)
      (READ.argument1_1_3)))
  (WRITE.result1_2_0
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_0)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_1)
      (READ.argument1_2_1)))
  (WRITE.result1_2_2
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_2)
      (READ.argument1_2_2)))
  (WRITE.result1_2_3
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_2)
      (READ.argument3_r_3)
      (READ.argument1_2_3)))
  (WRITE.result1_3_0
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_0)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_1)
      (READ.argument1_3_1)))
  (WRITE.result1_3_2
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_2)
      (READ.argument1_3_2)))
  (WRITE.result1_3_3
    (APPLY.32.dot16addus_8_32
      (READ.argument2_r_3)
      (READ.argument3_r_3)
      (READ.argument1_3_3)))
  (WRITE.result1_0
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (WRITE.result1_1
    (APPLY.256.join_32_x8
      (READ.result1_0_2)
      (READ.result1_0_3)
      (READ.result1_1_2)
      (READ.result1_1_3)
      (READ.result1_2_2)
      (READ.result1_2_3)
      (READ.result1_3_2)
      (READ.result1_3_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_0_2 = Int256_zero;
  Int256_ argument1_0_3 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_1_2 = Int256_zero;
  Int256_ argument1_1_3 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_2_2 = Int256_zero;
  Int256_ argument1_2_3 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument1_3_2 = Int256_zero;
  Int256_ argument1_3_3 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_0 = Int256_zero;
  Int256_ argument3_0_1 = Int256_zero;
  Int256_ argument3_0_2 = Int256_zero;
  Int256_ argument3_0_3 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_0 = Int256_zero;
  Int256_ argument3_1_1 = Int256_zero;
  Int256_ argument3_1_2 = Int256_zero;
  Int256_ argument3_1_3 = Int256_zero;
  Int256_ argument3_r_0 = Int256_zero;
  Int256_ argument3_r_1 = Int256_zero;
  Int256_ argument3_r_2 = Int256_zero;
  Int256_ argument3_r_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_0 = 
    Int256_zx(
      argument3_0, 64
    );
  argument3_0_1 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_0_2 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_0_3 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_0 = 
    Int256_zx(
      argument3_1, 64
    );
  argument3_1_1 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_1_2 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_1_3 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_0,
      
      argument3_1_0);
  argument3_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_1,
      
      argument3_1_1);
  argument3_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_2,
      
      argument3_1_2);
  argument3_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_3,
      
      argument3_1_3);
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1_0, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1_0, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_0_2 = 
    Int256_zx(
      argument1_1, 32
    );
  argument1_0_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_2 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_3 = 
    Int256_zx(
      Int256_shru(
        argument1_1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  result1_0_0 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_0,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_1,
      
      argument1_0_1);
  result1_0_2 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_2,
      
      argument1_0_2);
  result1_0_3 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_0,
      
      argument3_r_3,
      
      argument1_0_3);
  result1_1_0 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_0,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_1,
      
      argument1_1_1);
  result1_1_2 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_2,
      
      argument1_1_2);
  result1_1_3 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_1,
      
      argument3_r_3,
      
      argument1_1_3);
  result1_2_0 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_0,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_1,
      
      argument1_2_1);
  result1_2_2 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_2,
      
      argument1_2_2);
  result1_2_3 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_2,
      
      argument3_r_3,
      
      argument1_2_3);
  result1_3_0 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_0,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_1,
      
      argument1_3_1);
  result1_3_2 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_2,
      
      argument1_3_2);
  result1_3_3 = 
    HELPER(dot16addus_8_32)(this,
      
      argument2_r_3,
      
      argument3_r_3,
      
      argument1_3_3);
  result1_0 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  result1_1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_2,
      
      result1_0_3,
      
      result1_1_2,
      
      result1_1_3,
      
      result1_2_2,
      
      result1_2_3,
      
      result1_3_2,
      
      result1_3_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_MMA444HD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 3, ((decoded[0] - Register_kv3_X0) << 2) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 4, ((decoded[0] - Register_kv3_X0) << 2) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 5, ((decoded[0] - Register_kv3_X0) << 2) + 2);
  HELPER(operandFromRegFile_XVR)(this, 1, 1, 6, ((decoded[0] - Register_kv3_X0) << 2) + 3);
  HELPER(operandFromRegFile_XVR)(this, 1, 2, 1, decoded[1] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA444HD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_2
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.128))))
  (WRITE.argument2_3
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.192))))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:2)
          (CONST.1)))))
  (WRITE.argument1_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4_16_64
      (READ.argument2_0)
      (READ.argument3_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4_16_64
      (READ.argument2_0)
      (READ.argument3_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4_16_64
      (READ.argument2_0)
      (READ.argument3_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4_16_64
      (READ.argument2_0)
      (READ.argument3_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4_16_64
      (READ.argument2_1)
      (READ.argument3_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4_16_64
      (READ.argument2_1)
      (READ.argument3_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4_16_64
      (READ.argument2_1)
      (READ.argument3_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4_16_64
      (READ.argument2_1)
      (READ.argument3_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4_16_64
      (READ.argument2_2)
      (READ.argument3_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4_16_64
      (READ.argument2_2)
      (READ.argument3_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4_16_64
      (READ.argument2_2)
      (READ.argument3_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4_16_64
      (READ.argument2_2)
      (READ.argument3_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4_16_64
      (READ.argument2_3)
      (READ.argument3_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4_16_64
      (READ.argument2_3)
      (READ.argument3_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4_16_64
      (READ.argument2_3)
      (READ.argument3_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4_16_64
      (READ.argument2_3)
      (READ.argument3_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument1_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument1_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument1_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument1_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_2 = Int256_zero;
  Int256_ argument1_3 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument1_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  result1_0_0 = 
    HELPER(dot4_16_64)(this,
      
      argument2_0,
      
      argument3_0);
  result1_0_1 = 
    HELPER(dot4_16_64)(this,
      
      argument2_0,
      
      argument3_1);
  result1_0_2 = 
    HELPER(dot4_16_64)(this,
      
      argument2_0,
      
      argument3_2);
  result1_0_3 = 
    HELPER(dot4_16_64)(this,
      
      argument2_0,
      
      argument3_3);
  result1_1_0 = 
    HELPER(dot4_16_64)(this,
      
      argument2_1,
      
      argument3_0);
  result1_1_1 = 
    HELPER(dot4_16_64)(this,
      
      argument2_1,
      
      argument3_1);
  result1_1_2 = 
    HELPER(dot4_16_64)(this,
      
      argument2_1,
      
      argument3_2);
  result1_1_3 = 
    HELPER(dot4_16_64)(this,
      
      argument2_1,
      
      argument3_3);
  result1_2_0 = 
    HELPER(dot4_16_64)(this,
      
      argument2_2,
      
      argument3_0);
  result1_2_1 = 
    HELPER(dot4_16_64)(this,
      
      argument2_2,
      
      argument3_1);
  result1_2_2 = 
    HELPER(dot4_16_64)(this,
      
      argument2_2,
      
      argument3_2);
  result1_2_3 = 
    HELPER(dot4_16_64)(this,
      
      argument2_2,
      
      argument3_3);
  result1_3_0 = 
    HELPER(dot4_16_64)(this,
      
      argument2_3,
      
      argument3_0);
  result1_3_1 = 
    HELPER(dot4_16_64)(this,
      
      argument2_3,
      
      argument3_1);
  result1_3_2 = 
    HELPER(dot4_16_64)(this,
      
      argument2_3,
      
      argument3_2);
  result1_3_3 = 
    HELPER(dot4_16_64)(this,
      
      argument2_3,
      
      argument3_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_MMA444HD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 4, 1, 3, ((decoded[0] - Register_kv3_X0) << 2) + 0);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 4, ((decoded[0] - Register_kv3_X0) << 2) + 1);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 5, ((decoded[0] - Register_kv3_X0) << 2) + 2);
  HELPER(operandToRegFile_XVR)(this, 4, 1, 6, ((decoded[0] - Register_kv3_X0) << 2) + 3);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA444UHD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_2
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.128))))
  (WRITE.argument2_3
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.192))))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:2)
          (CONST.1)))))
  (WRITE.argument1_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4u_16_64
      (READ.argument2_0)
      (READ.argument3_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4u_16_64
      (READ.argument2_0)
      (READ.argument3_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4u_16_64
      (READ.argument2_0)
      (READ.argument3_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4u_16_64
      (READ.argument2_0)
      (READ.argument3_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4u_16_64
      (READ.argument2_1)
      (READ.argument3_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4u_16_64
      (READ.argument2_1)
      (READ.argument3_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4u_16_64
      (READ.argument2_1)
      (READ.argument3_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4u_16_64
      (READ.argument2_1)
      (READ.argument3_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4u_16_64
      (READ.argument2_2)
      (READ.argument3_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4u_16_64
      (READ.argument2_2)
      (READ.argument3_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4u_16_64
      (READ.argument2_2)
      (READ.argument3_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4u_16_64
      (READ.argument2_2)
      (READ.argument3_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4u_16_64
      (READ.argument2_3)
      (READ.argument3_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4u_16_64
      (READ.argument2_3)
      (READ.argument3_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4u_16_64
      (READ.argument2_3)
      (READ.argument3_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4u_16_64
      (READ.argument2_3)
      (READ.argument3_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument1_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument1_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument1_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument1_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_2 = Int256_zero;
  Int256_ argument1_3 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument1_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  result1_0_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_0,
      
      argument3_0);
  result1_0_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_0,
      
      argument3_1);
  result1_0_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_0,
      
      argument3_2);
  result1_0_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_0,
      
      argument3_3);
  result1_1_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_1,
      
      argument3_0);
  result1_1_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_1,
      
      argument3_1);
  result1_1_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_1,
      
      argument3_2);
  result1_1_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_1,
      
      argument3_3);
  result1_2_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_2,
      
      argument3_0);
  result1_2_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_2,
      
      argument3_1);
  result1_2_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_2,
      
      argument3_2);
  result1_2_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_2,
      
      argument3_3);
  result1_3_0 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_3,
      
      argument3_0);
  result1_3_1 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_3,
      
      argument3_1);
  result1_3_2 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_3,
      
      argument3_2);
  result1_3_3 = 
    HELPER(dot4u_16_64)(this,
      
      argument2_3,
      
      argument3_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA444SUHD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_2
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.128))))
  (WRITE.argument2_3
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.192))))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:2)
          (CONST.1)))))
  (WRITE.argument1_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4su_16_64
      (READ.argument2_0)
      (READ.argument3_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4su_16_64
      (READ.argument2_0)
      (READ.argument3_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4su_16_64
      (READ.argument2_0)
      (READ.argument3_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4su_16_64
      (READ.argument2_0)
      (READ.argument3_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4su_16_64
      (READ.argument2_1)
      (READ.argument3_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4su_16_64
      (READ.argument2_1)
      (READ.argument3_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4su_16_64
      (READ.argument2_1)
      (READ.argument3_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4su_16_64
      (READ.argument2_1)
      (READ.argument3_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4su_16_64
      (READ.argument2_2)
      (READ.argument3_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4su_16_64
      (READ.argument2_2)
      (READ.argument3_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4su_16_64
      (READ.argument2_2)
      (READ.argument3_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4su_16_64
      (READ.argument2_2)
      (READ.argument3_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4su_16_64
      (READ.argument2_3)
      (READ.argument3_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4su_16_64
      (READ.argument2_3)
      (READ.argument3_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4su_16_64
      (READ.argument2_3)
      (READ.argument3_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4su_16_64
      (READ.argument2_3)
      (READ.argument3_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument1_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument1_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument1_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument1_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_2 = Int256_zero;
  Int256_ argument1_3 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument1_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  result1_0_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_0,
      
      argument3_0);
  result1_0_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_0,
      
      argument3_1);
  result1_0_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_0,
      
      argument3_2);
  result1_0_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_0,
      
      argument3_3);
  result1_1_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_1,
      
      argument3_0);
  result1_1_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_1,
      
      argument3_1);
  result1_1_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_1,
      
      argument3_2);
  result1_1_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_1,
      
      argument3_3);
  result1_2_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_2,
      
      argument3_0);
  result1_2_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_2,
      
      argument3_1);
  result1_2_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_2,
      
      argument3_2);
  result1_2_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_2,
      
      argument3_3);
  result1_3_0 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_3,
      
      argument3_0);
  result1_3_1 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_3,
      
      argument3_1);
  result1_3_2 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_3,
      
      argument3_2);
  result1_3_3 = 
    HELPER(dot4su_16_64)(this,
      
      argument2_3,
      
      argument3_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_MMA444USHD_registerAq_registerB_registerD_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument3_0
    (ZX.64
      (READ.argument3)))
  (WRITE.argument3_1
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.64))))
  (WRITE.argument3_2
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.128))))
  (WRITE.argument3_3
    (ZX.64
      (SHR
        (READ.argument3)
        (CONST.192))))
  (WRITE.argument2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.argument2_0
    (ZX.64
      (READ.argument2)))
  (WRITE.argument2_1
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.64))))
  (WRITE.argument2_2
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.128))))
  (WRITE.argument2_3
    (ZX.64
      (SHR
        (READ.argument2)
        (CONST.192))))
  (WRITE.argument1_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:0)
          (CONST.1)))))
  (WRITE.argument1_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:1)
          (CONST.1)))))
  (WRITE.argument1_2
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:2)
          (CONST.1)))))
  (WRITE.argument1_3
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%1:3)
          (CONST.1)))))
  (WRITE.result1_0_0
    (APPLY.64.dot4us_16_64
      (READ.argument2_0)
      (READ.argument3_0)))
  (WRITE.result1_0_1
    (APPLY.64.dot4us_16_64
      (READ.argument2_0)
      (READ.argument3_1)))
  (WRITE.result1_0_2
    (APPLY.64.dot4us_16_64
      (READ.argument2_0)
      (READ.argument3_2)))
  (WRITE.result1_0_3
    (APPLY.64.dot4us_16_64
      (READ.argument2_0)
      (READ.argument3_3)))
  (WRITE.result1_1_0
    (APPLY.64.dot4us_16_64
      (READ.argument2_1)
      (READ.argument3_0)))
  (WRITE.result1_1_1
    (APPLY.64.dot4us_16_64
      (READ.argument2_1)
      (READ.argument3_1)))
  (WRITE.result1_1_2
    (APPLY.64.dot4us_16_64
      (READ.argument2_1)
      (READ.argument3_2)))
  (WRITE.result1_1_3
    (APPLY.64.dot4us_16_64
      (READ.argument2_1)
      (READ.argument3_3)))
  (WRITE.result1_2_0
    (APPLY.64.dot4us_16_64
      (READ.argument2_2)
      (READ.argument3_0)))
  (WRITE.result1_2_1
    (APPLY.64.dot4us_16_64
      (READ.argument2_2)
      (READ.argument3_1)))
  (WRITE.result1_2_2
    (APPLY.64.dot4us_16_64
      (READ.argument2_2)
      (READ.argument3_2)))
  (WRITE.result1_2_3
    (APPLY.64.dot4us_16_64
      (READ.argument2_2)
      (READ.argument3_3)))
  (WRITE.result1_3_0
    (APPLY.64.dot4us_16_64
      (READ.argument2_3)
      (READ.argument3_0)))
  (WRITE.result1_3_1
    (APPLY.64.dot4us_16_64
      (READ.argument2_3)
      (READ.argument3_1)))
  (WRITE.result1_3_2
    (APPLY.64.dot4us_16_64
      (READ.argument2_3)
      (READ.argument3_2)))
  (WRITE.result1_3_3
    (APPLY.64.dot4us_16_64
      (READ.argument2_3)
      (READ.argument3_3)))
  (WRITE.result1_0
    (APPLY.256.join_64_x4
      (READ.result1_0_0)
      (READ.result1_1_0)
      (READ.result1_2_0)
      (READ.result1_3_0)))
  (WRITE.result1_1
    (APPLY.256.join_64_x4
      (READ.result1_0_1)
      (READ.result1_1_1)
      (READ.result1_2_1)
      (READ.result1_3_1)))
  (WRITE.result1_2
    (APPLY.256.join_64_x4
      (READ.result1_0_2)
      (READ.result1_1_2)
      (READ.result1_2_2)
      (READ.result1_3_2)))
  (WRITE.result1_3
    (APPLY.256.join_64_x4
      (READ.result1_0_3)
      (READ.result1_1_3)
      (READ.result1_2_3)
      (READ.result1_3_3)))
  (WRITE.result1_0
    (APPLY.add_64_64_x4
      (READ.argument1_0)
      (READ.result1_0)))
  (WRITE.result1_1
    (APPLY.add_64_64_x4
      (READ.argument1_1)
      (READ.result1_1)))
  (WRITE.result1_2
    (APPLY.add_64_64_x4
      (READ.argument1_2)
      (READ.result1_2)))
  (WRITE.result1_3
    (APPLY.add_64_64_x4
      (READ.argument1_3)
      (READ.result1_3)))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:0)
      (CONST.1))
    (I2F.256
      (READ.result1_0)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:1)
      (CONST.1))
    (I2F.256
      (READ.result1_1)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:2)
      (CONST.1))
    (I2F.256
      (READ.result1_2)))
  (STORE.4
    (AGGL.XVR
      (METHOD.%1:3)
      (CONST.1))
    (I2F.256
      (READ.result1_3))))
*/
  Int256_ argument1_0 = Int256_zero;
  Int256_ argument1_1 = Int256_zero;
  Int256_ argument1_2 = Int256_zero;
  Int256_ argument1_3 = Int256_zero;
  Int256_ argument2 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_2 = Int256_zero;
  Int256_ argument2_3 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_2 = Int256_zero;
  Int256_ argument3_3 = Int256_zero;
  Int256_ result1_0 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_0_2 = Int256_zero;
  Int256_ result1_0_3 = Int256_zero;
  Int256_ result1_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_1_2 = Int256_zero;
  Int256_ result1_1_3 = Int256_zero;
  Int256_ result1_2 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_2_2 = Int256_zero;
  Int256_ result1_2_3 = Int256_zero;
  Int256_ result1_3 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ result1_3_2 = Int256_zero;
  Int256_ result1_3_3 = Int256_zero;


  argument3 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument3_0 = 
    Int256_zx(
      argument3, 64
    );
  argument3_1 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_2 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_3 = 
    Int256_zx(
      Int256_shru(
        argument3, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 256
    );
  argument2_0 = 
    Int256_zx(
      argument2, 64
    );
  argument2_1 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_2 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_3 = 
    Int256_zx(
      Int256_shru(
        argument2, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument1_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 3), 256
    );
  argument1_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 4), 256
    );
  argument1_2 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument1_3 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  result1_0_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_0,
      
      argument3_0);
  result1_0_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_0,
      
      argument3_1);
  result1_0_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_0,
      
      argument3_2);
  result1_0_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_0,
      
      argument3_3);
  result1_1_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_1,
      
      argument3_0);
  result1_1_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_1,
      
      argument3_1);
  result1_1_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_1,
      
      argument3_2);
  result1_1_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_1,
      
      argument3_3);
  result1_2_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_2,
      
      argument3_0);
  result1_2_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_2,
      
      argument3_1);
  result1_2_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_2,
      
      argument3_2);
  result1_2_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_2,
      
      argument3_3);
  result1_3_0 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_3,
      
      argument3_0);
  result1_3_1 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_3,
      
      argument3_1);
  result1_3_2 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_3,
      
      argument3_2);
  result1_3_3 = 
    HELPER(dot4us_16_64)(this,
      
      argument2_3,
      
      argument3_3);
  result1_0 = 
    HELPER(join_64_x4)(this,
      
      result1_0_0,
      
      result1_1_0,
      
      result1_2_0,
      
      result1_3_0);
  result1_1 = 
    HELPER(join_64_x4)(this,
      
      result1_0_1,
      
      result1_1_1,
      
      result1_2_1,
      
      result1_3_1);
  result1_2 = 
    HELPER(join_64_x4)(this,
      
      result1_0_2,
      
      result1_1_2,
      
      result1_2_2,
      
      result1_3_2);
  result1_3 = 
    HELPER(join_64_x4)(this,
      
      result1_0_3,
      
      result1_1_3,
      
      result1_2_3,
      
      result1_3_3);
  result1_0 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_0,
      
      result1_0);
  result1_1 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_1,
      
      result1_1);
  result1_2 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_2,
      
      result1_2);
  result1_3 = 
    HELPER(add_64_64_x4)(this,
      
      argument1_3,
      
      result1_3);
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 1, 3, 
    Int256_zx(
      result1_0, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 4, 
    Int256_zx(
      result1_1, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 5, 
    Int256_zx(
      result1_2, 256
    )
  );
  HELPER(operandFromValue)(this, 1, 6, 
    Int256_zx(
      result1_3, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_FETCH
static void
fetch_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandFromRegFile_XVR)(this, 1, 3, 2, decoded[2] - Register_kv3_A0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 5, ((decoded[3] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 4, 6, ((decoded[3] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromRegFile_XVR)(this, 1, 5, 7, ((decoded[4] - Register_kv3_W0) << 1) + 0);
  HELPER(operandFromRegFile_XVR)(this, 1, 5, 8, ((decoded[4] - Register_kv3_W0) << 1) + 1);
  HELPER(operandFromValue)(this, 1, 0, Int256_fromUInt64(ModifierMember_value(decoded[1-1])));
  HELPER(operandFromValue)(this, 2, 1, Int256_fromUInt64(ModifierMember_value(decoded[2-1])));
}
#endif /* Behavior_FETCH */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%5:0)
          (CONST.1)))))
  (WRITE.argument3_0_0
    (ZX.64
      (READ.argument3_0)))
  (WRITE.argument3_0_1
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.64))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%5:1)
          (CONST.1)))))
  (WRITE.argument3_1_0
    (ZX.64
      (READ.argument3_1)))
  (WRITE.argument3_1_1
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.64))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_0
    (APPLY.128.join_64_x2
      (READ.argument3_0_0)
      (READ.argument3_1_0)))
  (WRITE.argument3_r_1
    (APPLY.128.join_64_x2
      (READ.argument3_0_1)
      (READ.argument3_1_1)))
  (WRITE.argument1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.224))))
  (WRITE.XRM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.20)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1_0_0
    (APPLY.32.fdot8add_16_32_reset
      (READ.XRM)
      (READ.argument2_r_0)
      (READ.argument3_r_0)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_0)
      (READ.argument3_r_1)
      (READ.argument1_0_1)))
  (WRITE.result1_1_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_1)
      (READ.argument3_r_0)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_1)
      (READ.argument3_r_1)
      (READ.argument1_1_1)))
  (WRITE.result1_2_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_2)
      (READ.argument3_r_0)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_2)
      (READ.argument3_r_1)
      (READ.argument1_2_1)))
  (WRITE.result1_3_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_3)
      (READ.argument3_r_0)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_3)
      (READ.argument3_r_1)
      (READ.argument1_3_1)))
  (WRITE.result1
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_xun
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.12)
              (CONST.1)))))
      (WRITE.CS_xin
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.13)
              (CONST.1)))))
      (WRITE.CS_xio
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.9)
              (CONST.1)))))
      (WRITE.CS_xov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.11)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.12)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_xun))))
      (STORE.5
        (AGGL.CS
          (CONST.13)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_xin))))
      (STORE.5
        (AGGL.CS
          (CONST.9)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_xio))))
      (STORE.5
        (AGGL.CS
          (CONST.11)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_xov)))))
    (SKIP))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.5
    (AGGL.XVR
      (METHOD.%3)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ CS_xin = Int256_zero;
  Int256_ CS_xio = Int256_zero;
  Int256_ CS_xov = Int256_zero;
  Int256_ CS_xun = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_0 = Int256_zero;
  Int256_ argument3_0_1 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_0 = Int256_zero;
  Int256_ argument3_1_1 = Int256_zero;
  Int256_ argument3_r_0 = Int256_zero;
  Int256_ argument3_r_1 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_0 = 
    Int256_zx(
      argument3_0, 64
    );
  argument3_0_1 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_0 = 
    Int256_zx(
      argument3_1, 64
    );
  argument3_1_1 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_0,
      
      argument3_1_0);
  argument3_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_1,
      
      argument3_1_1);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  XRM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    )
    :
    rounding;
  result1_0_0 = 
    HELPER(fdot8add_16_32_reset)(this,
      
      XRM,
      
      argument2_r_0,
      
      argument3_r_0,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_0,
      
      argument3_r_1,
      
      argument1_0_1);
  result1_1_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_1,
      
      argument3_r_0,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_1,
      
      argument3_r_1,
      
      argument1_1_1);
  result1_2_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_2,
      
      argument3_r_0,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_2,
      
      argument3_r_1,
      
      argument1_2_1);
  result1_3_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_3,
      
      argument3_r_0,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_3,
      
      argument3_r_1,
      
      argument1_3_1);
  result1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_xun = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 12, 1, 1), 1
      );
    CS_xin = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 13, 1, 1), 1
      );
    CS_xio = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 9, 1, 1), 1
      );
    CS_xov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 11, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 12, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_xun
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 13, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_xin
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 9, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_xio
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 11, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_xov
        ), 1
      )
    );
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_COMMIT
static void
commit_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
  HELPER(operandToRegFile_XVR)(this, 5, 3, 2, decoded[2] - Register_kv3_A0);
}
#endif /* Behavior_COMMIT */
#ifdef Behavior_EXECUTE
static void
execute_v2_FMMA482HW1_xrounding_silent2_registerAo_registerBp_registerDp_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.silent
    (ZX.1
      (METHOD.%2)))
  (WRITE.rounding
    (ZX.3
      (METHOD.%1)))
  (WRITE.argument3_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%5:0)
          (CONST.1)))))
  (WRITE.argument3_0_2
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.128))))
  (WRITE.argument3_0_3
    (ZX.64
      (SHR
        (READ.argument3_0)
        (CONST.192))))
  (WRITE.argument3_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%5:1)
          (CONST.1)))))
  (WRITE.argument3_1_2
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.128))))
  (WRITE.argument3_1_3
    (ZX.64
      (SHR
        (READ.argument3_1)
        (CONST.192))))
  (WRITE.argument2_0
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:0)
          (CONST.1)))))
  (WRITE.argument2_0_0
    (ZX.64
      (READ.argument2_0)))
  (WRITE.argument2_0_1
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.64))))
  (WRITE.argument2_0_2
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.128))))
  (WRITE.argument2_0_3
    (ZX.64
      (SHR
        (READ.argument2_0)
        (CONST.192))))
  (WRITE.argument2_1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%4:1)
          (CONST.1)))))
  (WRITE.argument2_1_0
    (ZX.64
      (READ.argument2_1)))
  (WRITE.argument2_1_1
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.64))))
  (WRITE.argument2_1_2
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.128))))
  (WRITE.argument2_1_3
    (ZX.64
      (SHR
        (READ.argument2_1)
        (CONST.192))))
  (WRITE.argument2_r_0
    (APPLY.128.join_64_x2
      (READ.argument2_0_0)
      (READ.argument2_1_0)))
  (WRITE.argument2_r_1
    (APPLY.128.join_64_x2
      (READ.argument2_0_1)
      (READ.argument2_1_1)))
  (WRITE.argument2_r_2
    (APPLY.128.join_64_x2
      (READ.argument2_0_2)
      (READ.argument2_1_2)))
  (WRITE.argument2_r_3
    (APPLY.128.join_64_x2
      (READ.argument2_0_3)
      (READ.argument2_1_3)))
  (WRITE.argument3_r_2
    (APPLY.128.join_64_x2
      (READ.argument3_0_2)
      (READ.argument3_1_2)))
  (WRITE.argument3_r_3
    (APPLY.128.join_64_x2
      (READ.argument3_0_3)
      (READ.argument3_1_3)))
  (WRITE.argument1
    (F2I.256
      (LOAD.1
        (AGGL.XVR
          (METHOD.%3)
          (CONST.1)))))
  (WRITE.argument1_0_0
    (ZX.32
      (READ.argument1)))
  (WRITE.argument1_0_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.32))))
  (WRITE.argument1_1_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.64))))
  (WRITE.argument1_1_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.96))))
  (WRITE.argument1_2_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.128))))
  (WRITE.argument1_2_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.160))))
  (WRITE.argument1_3_0
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.192))))
  (WRITE.argument1_3_1
    (ZX.32
      (SHR
        (READ.argument1)
        (CONST.224))))
  (WRITE.XRM
    (SELECT
      (EQ
        (READ.rounding)
        (CONST.7))
      (F2I.2
        (LOAD.1
          (AGGL.CS
            (CONST.20)
            (CONST.2))))
      (READ.rounding)))
  (WRITE.result1_0_0
    (APPLY.32.fdot8add_16_32_reset
      (READ.XRM)
      (READ.argument2_r_0)
      (READ.argument3_r_2)
      (READ.argument1_0_0)))
  (WRITE.result1_0_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_0)
      (READ.argument3_r_3)
      (READ.argument1_0_1)))
  (WRITE.result1_1_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_1)
      (READ.argument3_r_2)
      (READ.argument1_1_0)))
  (WRITE.result1_1_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_1)
      (READ.argument3_r_3)
      (READ.argument1_1_1)))
  (WRITE.result1_2_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_2)
      (READ.argument3_r_2)
      (READ.argument1_2_0)))
  (WRITE.result1_2_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_2)
      (READ.argument3_r_3)
      (READ.argument1_2_1)))
  (WRITE.result1_3_0
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_3)
      (READ.argument3_r_2)
      (READ.argument1_3_0)))
  (WRITE.result1_3_1
    (APPLY.32.fdot8add_16_32_noreset
      (READ.XRM)
      (READ.argument2_r_3)
      (READ.argument3_r_3)
      (READ.argument1_3_1)))
  (WRITE.result1
    (APPLY.256.join_32_x8
      (READ.result1_0_0)
      (READ.result1_0_1)
      (READ.result1_1_0)
      (READ.result1_1_1)
      (READ.result1_2_0)
      (READ.result1_2_1)
      (READ.result1_3_0)
      (READ.result1_3_1)))
  (IF
    (EQ
      (READ.silent)
      (CONST.0))
    (SEQ
      (WRITE.CS_xun
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.12)
              (CONST.1)))))
      (WRITE.CS_xin
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.13)
              (CONST.1)))))
      (WRITE.CS_xio
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.9)
              (CONST.1)))))
      (WRITE.CS_xov
        (F2I.1
          (LOAD.5
            (AGGL.CS
              (CONST.11)
              (CONST.1)))))
      (STORE.5
        (AGGL.CS
          (CONST.12)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.funderflow)
            (READ.CS_xun))))
      (STORE.5
        (AGGL.CS
          (CONST.13)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finexact)
            (READ.CS_xin))))
      (STORE.5
        (AGGL.CS
          (CONST.9)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.finvalid)
            (READ.CS_xio))))
      (STORE.5
        (AGGL.CS
          (CONST.11)
          (CONST.1))
        (I2F.1
          (IOR
            (APPLY.foverflow)
            (READ.CS_xov)))))
    (SKIP))
  (STORE.2
    (AGGL.CS
      (CONST.24)
      (CONST.1))
    (I2F.1
      (CONST.1)))
  (STORE.5
    (AGGL.XVR
      (METHOD.%3)
      (CONST.1))
    (I2F.256
      (READ.result1))))
*/
  Int256_ CS_xin = Int256_zero;
  Int256_ CS_xio = Int256_zero;
  Int256_ CS_xov = Int256_zero;
  Int256_ CS_xun = Int256_zero;
  Int256_ XRM = Int256_zero;
  Int256_ argument1 = Int256_zero;
  Int256_ argument1_0_0 = Int256_zero;
  Int256_ argument1_0_1 = Int256_zero;
  Int256_ argument1_1_0 = Int256_zero;
  Int256_ argument1_1_1 = Int256_zero;
  Int256_ argument1_2_0 = Int256_zero;
  Int256_ argument1_2_1 = Int256_zero;
  Int256_ argument1_3_0 = Int256_zero;
  Int256_ argument1_3_1 = Int256_zero;
  Int256_ argument2_0 = Int256_zero;
  Int256_ argument2_0_0 = Int256_zero;
  Int256_ argument2_0_1 = Int256_zero;
  Int256_ argument2_0_2 = Int256_zero;
  Int256_ argument2_0_3 = Int256_zero;
  Int256_ argument2_1 = Int256_zero;
  Int256_ argument2_1_0 = Int256_zero;
  Int256_ argument2_1_1 = Int256_zero;
  Int256_ argument2_1_2 = Int256_zero;
  Int256_ argument2_1_3 = Int256_zero;
  Int256_ argument2_r_0 = Int256_zero;
  Int256_ argument2_r_1 = Int256_zero;
  Int256_ argument2_r_2 = Int256_zero;
  Int256_ argument2_r_3 = Int256_zero;
  Int256_ argument3_0 = Int256_zero;
  Int256_ argument3_0_2 = Int256_zero;
  Int256_ argument3_0_3 = Int256_zero;
  Int256_ argument3_1 = Int256_zero;
  Int256_ argument3_1_2 = Int256_zero;
  Int256_ argument3_1_3 = Int256_zero;
  Int256_ argument3_r_2 = Int256_zero;
  Int256_ argument3_r_3 = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ result1_0_0 = Int256_zero;
  Int256_ result1_0_1 = Int256_zero;
  Int256_ result1_1_0 = Int256_zero;
  Int256_ result1_1_1 = Int256_zero;
  Int256_ result1_2_0 = Int256_zero;
  Int256_ result1_2_1 = Int256_zero;
  Int256_ result1_3_0 = Int256_zero;
  Int256_ result1_3_1 = Int256_zero;
  Int256_ rounding = Int256_zero;
  Int256_ silent = Int256_zero;


  silent = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 1
    );
  rounding = 
    Int256_zx(
      HELPER(operandRead)(this, 0), 3
    );
  argument3_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 7), 256
    );
  argument3_0_2 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_0_3 = 
    Int256_zx(
      Int256_shru(
        argument3_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument3_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 8), 256
    );
  argument3_1_2 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument3_1_3 = 
    Int256_zx(
      Int256_shru(
        argument3_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_0 = 
    Int256_zx(
      HELPER(operandRead)(this, 5), 256
    );
  argument2_0_0 = 
    Int256_zx(
      argument2_0, 64
    );
  argument2_0_1 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_0_2 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_0_3 = 
    Int256_zx(
      Int256_shru(
        argument2_0, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_1 = 
    Int256_zx(
      HELPER(operandRead)(this, 6), 256
    );
  argument2_1_0 = 
    Int256_zx(
      argument2_1, 64
    );
  argument2_1_1 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x40LL)
      ), 64
    );
  argument2_1_2 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0x80LL)
      ), 64
    );
  argument2_1_3 = 
    Int256_zx(
      Int256_shru(
        argument2_1, 
        Int256_fromUInt64(0xc0LL)
      ), 64
    );
  argument2_r_0 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_0,
      
      argument2_1_0);
  argument2_r_1 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_1,
      
      argument2_1_1);
  argument2_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_2,
      
      argument2_1_2);
  argument2_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument2_0_3,
      
      argument2_1_3);
  argument3_r_2 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_2,
      
      argument3_1_2);
  argument3_r_3 = 
    HELPER(join_64_x2)(this,
      
      argument3_0_3,
      
      argument3_1_3);
  argument1 = 
    Int256_zx(
      HELPER(operandRead)(this, 2), 256
    );
  argument1_0_0 = 
    Int256_zx(
      argument1, 32
    );
  argument1_0_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x20LL)
      ), 32
    );
  argument1_1_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x40LL)
      ), 32
    );
  argument1_1_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x60LL)
      ), 32
    );
  argument1_2_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0x80LL)
      ), 32
    );
  argument1_2_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xa0LL)
      ), 32
    );
  argument1_3_0 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xc0LL)
      ), 32
    );
  argument1_3_1 = 
    Int256_zx(
      Int256_shru(
        argument1, 
        Int256_fromUInt64(0xe0LL)
      ), 32
    );
  XRM = 
    Int256_cmp(
      rounding, 
      Int256_fromUInt64(0x7LL)
    ) == 0
    ?
    Int256_zx(
        HELPER(readFromStorage_CS)(this, 1, 20, 2, 1), 2
    )
    :
    rounding;
  result1_0_0 = 
    HELPER(fdot8add_16_32_reset)(this,
      
      XRM,
      
      argument2_r_0,
      
      argument3_r_2,
      
      argument1_0_0);
  result1_0_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_0,
      
      argument3_r_3,
      
      argument1_0_1);
  result1_1_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_1,
      
      argument3_r_2,
      
      argument1_1_0);
  result1_1_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_1,
      
      argument3_r_3,
      
      argument1_1_1);
  result1_2_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_2,
      
      argument3_r_2,
      
      argument1_2_0);
  result1_2_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_2,
      
      argument3_r_3,
      
      argument1_2_1);
  result1_3_0 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_3,
      
      argument3_r_2,
      
      argument1_3_0);
  result1_3_1 = 
    HELPER(fdot8add_16_32_noreset)(this,
      
      XRM,
      
      argument2_r_3,
      
      argument3_r_3,
      
      argument1_3_1);
  result1 = 
    HELPER(join_32_x8)(this,
      
      result1_0_0,
      
      result1_0_1,
      
      result1_1_0,
      
      result1_1_1,
      
      result1_2_0,
      
      result1_2_1,
      
      result1_3_0,
      
      result1_3_1);
  if (
    Int256_cmp(
      silent, 
      Int256_fromUInt64(0LL)
    ) == 0
  )
  {
    CS_xun = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 12, 1, 1), 1
      );
    CS_xin = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 13, 1, 1), 1
      );
    CS_xio = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 9, 1, 1), 1
      );
    CS_xov = 
      Int256_zx(
        HELPER(readFromStorage_CS)(this, 5, 11, 1, 1), 1
      );
    HELPER(writeToStorage_CS)(this, 5, 12, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(funderflow)(this), 
          CS_xun
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 13, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finexact)(this), 
          CS_xin
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 9, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(finvalid)(this), 
          CS_xio
        ), 1
      )
    );
    HELPER(writeToStorage_CS)(this, 5, 11, 1, 1, 
      Int256_zx(
        Int256_or(
          HELPER(foverflow)(this), 
          CS_xov
        ), 1
      )
    );
    ;
  }
;
  HELPER(writeToStorage_CS)(this, 2, 24, 1, 1, 
    Int256_zx(
      Int256_fromUInt64(0x1LL), 1
    )
  );
  HELPER(operandFromValue)(this, 3, 2, 
    Int256_zx(
      result1, 256
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_SATUDH_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.16))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MIN
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.maximum
    (SUB
      (SHL
        (CONST.1)
        (READ.shift))
      (CONST.1)))
  (WRITE.result1
    (MIN
      (READ.maximum)
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ maximum = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0x10LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_cmp(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 8
    )
    :
    Int256_fromUInt64(0x40LL);
  maximum = 
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1 = 
    Int256_cmp(
      maximum, 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    maximum;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifdef Behavior_EXECUTE
static void
execute_v2_SATUDW_registerW_registerZ_simple(void *this, OperandDecoded *decoded, Processor processor)
{
/*
(SEQ
  (WRITE.argument3
    (CONST.32))
  (WRITE.argument2
    (F2I.64
      (LOAD.1
        (AGGL.GPR
          (METHOD.%2)
          (CONST.1)))))
  (WRITE.shift
    (MIN
      (CONST.64)
      (ZX.8
        (READ.argument3))))
  (WRITE.maximum
    (SUB
      (SHL
        (CONST.1)
        (READ.shift))
      (CONST.1)))
  (WRITE.result1
    (MIN
      (READ.maximum)
      (ZX.64
        (READ.argument2))))
  (STORE.2
    (AGGL.GPR
      (METHOD.%1)
      (CONST.1))
    (I2F.64
      (READ.result1))))
*/
  Int256_ argument2 = Int256_zero;
  Int256_ argument3 = Int256_zero;
  Int256_ maximum = Int256_zero;
  Int256_ result1 = Int256_zero;
  Int256_ shift = Int256_zero;


  argument3 = 
    Int256_fromUInt64(0x20LL);
  argument2 = 
    Int256_zx(
      HELPER(operandRead)(this, 1), 64
    );
  shift = 
    Int256_cmp(
      Int256_fromUInt64(0x40LL), 
      Int256_zx(
        argument3, 8
      )
    ) > 0
    ?
    Int256_zx(
      argument3, 8
    )
    :
    Int256_fromUInt64(0x40LL);
  maximum = 
    Int256_sub(
      Int256_shl(
        Int256_fromUInt64(0x1LL), 
        shift
      ), 
      Int256_fromUInt64(0x1LL)
    );
  result1 = 
    Int256_cmp(
      maximum, 
      Int256_zx(
        argument2, 64
      )
    ) > 0
    ?
    Int256_zx(
      argument2, 64
    )
    :
    maximum;
  HELPER(operandFromValue)(this, 1, 0, 
    Int256_zx(
      result1, 64
    )
  );;

}
#endif /* Behavior_EXECUTE */
#ifndef Behavior
#define Behavior(OPCODE,FETCH,EXECUTE,COMMIT)
#else
Behavior(v1_AWAIT_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_AWAIT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SLEEP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_SLEEP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_STOP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_STOP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_BARRIER_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_BARRIER_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_TLBREAD_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBREAD_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_TLBPROBE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBPROBE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_TLBWRITE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBWRITE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_TLBDINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBDINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_TLBIINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBIINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_ERROP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_ERROP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_RET_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_RET_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_RFE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_RFE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IGOTO_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_IGOTO_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_ICALL_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_ICALL_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SCALL_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_SCALL_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SCALL_sysnumber_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_SCALL_sysnumber_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_LOOPDO_registerZ_pcrel17_simple,FETCH(fetch_v1_LOOPDO_registerZ_pcrel17_simple),EXECUTE(execute_v1_LOOPDO_registerZ_pcrel17_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_WFXL_systemT2_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v1_WFXL_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemAlone_registerZ_simple))
Behavior(v1_WFXL_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v1_WFXM_systemT2_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v1_WFXM_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemAlone_registerZ_simple))
Behavior(v1_WFXM_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v1_GET_registerZ_systemS2_simple,FETCH(fetch_v1_GET_registerZ_systemS2_simple),EXECUTE(execute_v1_GET_registerZ_systemS2_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_GET_registerZ_systemS3_simple,FETCH(fetch_v1_GET_registerZ_systemS2_simple),EXECUTE(execute_v1_GET_registerZ_systemS2_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_IGET_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_IGET_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SET_systemT3_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v1_SET_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v1_SET_systemRA_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v1_SET_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v1_RSWAP_registerZ_systemS4_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v1_RSWAP_registerZ_systemAlone_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v1_RSWAP_registerZ_systemS3_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v1_WAITIT_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_WAITIT_registerZ_simple),COMMIT(commit_v1_WAITIT_registerZ_simple))
Behavior(v1_SYNCGROUP_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_SYNCGROUP_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_GOTO_pcrel27_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_GOTO_pcrel27_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_CALL_pcrel27_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_CALL_pcrel27_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_CB_branchcond_registerZ_pcrel17_simple,FETCH(fetch_v1_CB_branchcond_registerZ_pcrel17_simple),EXECUTE(execute_v1_CB_branchcond_registerZ_pcrel17_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_LBZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LBS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LBS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LBS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LBS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LHZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LHS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LHS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LHS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LHS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LWZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LWS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LWS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LWS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LWS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LD_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LD_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LD_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_LD_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LD_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LD_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v1_LD_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LD_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_LQ_variant_registerM_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_signed10_registerZ_simple),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v1_LQ_variant_registerM_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_upper27_lower10_registerZ_double),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v1_LQ_variant_registerM_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v1_LQ_variant_lsucond_registerY_registerM_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_offset27_registerZ_double),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v1_LQ_variant_lsucond_registerY_registerM_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v1_LQ_variant_doscale_registerM_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple),COMMIT(commit_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple))
Behavior(v1_LO_variant_registerN_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_signed10_registerZ_simple),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v1_LO_variant_registerN_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_upper27_lower10_registerZ_double),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v1_LO_variant_registerN_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v1_LO_variant_lsucond_registerY_registerN_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v1_LO_variant_lsucond_registerY_registerN_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_offset27_registerZ_double),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v1_LO_variant_lsucond_registerY_registerN_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v1_LO_variant_doscale_registerN_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LO_variant_doscale_registerN_registerY_registerZ_simple),COMMIT(commit_v1_LO_variant_doscale_registerN_registerY_registerZ_simple))
Behavior(v1_LV_speculate_registerA_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_signed10_registerZ_simple),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v1_LV_speculate_registerA_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_upper27_lower10_registerZ_double),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v1_LV_speculate_registerA_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v1_LV_speculate_lsucond_registerY_registerA_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_offset27_registerZ_double),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v1_LV_speculate_lsucond_registerY_registerA_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v1_LV_speculate_doscale_registerA_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple),COMMIT(commit_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple))
Behavior(v1_LV_column_speculate_registerAq_signed10_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v1_LV_column_speculate_registerAq_upper27_lower10_registerZ_double,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_upper27_lower10_registerZ_double),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v1_LV_column_speculate_registerAq_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple))
Behavior(v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double))
Behavior(v1_LV_column_speculate_lsucond_registerY_registerAq_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double))
Behavior(v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple))
Behavior(v1_SB_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SB_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SB_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SB_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SB_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SH_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SH_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SH_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SH_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SH_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SW_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SW_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SW_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SD_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SD_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SD_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_signed10_registerZ_registerU_simple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_signed10_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_extend27_upper27_lower10_registerZ_registerU_triple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_extend27_upper27_lower10_registerZ_registerU_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SQ_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_SQ_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_signed10_registerZ_registerV_simple,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_signed10_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_upper27_lower10_registerZ_registerV_double,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_upper27_lower10_registerZ_registerV_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_extend27_upper27_lower10_registerZ_registerV_triple,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_extend27_upper27_lower10_registerZ_registerV_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_doscale_registerY_registerZ_registerV_simple,FETCH(fetch_v1_SO_doscale_registerY_registerZ_registerV_simple),EXECUTE(execute_v1_SO_doscale_registerY_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_lsucond_registerY_registerZ_registerV_simple,FETCH(fetch_v1_SO_doscale_registerY_registerZ_registerV_simple),EXECUTE(execute_v1_SO_lsucond_registerY_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_lsucond_registerY_offset27_registerZ_registerV_double,FETCH(fetch_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),EXECUTE(execute_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SO_lsucond_registerY_extend27_offset27_registerZ_registerV_triple,FETCH(fetch_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),EXECUTE(execute_v1_SO_lsucond_registerY_extend27_offset27_registerZ_registerV_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_signed10_registerZ_registerE_simple,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_signed10_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_upper27_lower10_registerZ_registerE_double,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_upper27_lower10_registerZ_registerE_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_extend27_upper27_lower10_registerZ_registerE_triple,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_extend27_upper27_lower10_registerZ_registerE_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_doscale_registerY_registerZ_registerE_simple,FETCH(fetch_v1_SV_doscale_registerY_registerZ_registerE_simple),EXECUTE(execute_v1_SV_doscale_registerY_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_lsucond_registerY_registerZ_registerE_simple,FETCH(fetch_v1_SV_doscale_registerY_registerZ_registerE_simple),EXECUTE(execute_v1_SV_lsucond_registerY_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_lsucond_registerY_offset27_registerZ_registerE_double,FETCH(fetch_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),EXECUTE(execute_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_SV_lsucond_registerY_extend27_offset27_registerZ_registerE_triple,FETCH(fetch_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),EXECUTE(execute_v1_SV_lsucond_registerY_extend27_offset27_registerZ_registerE_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_ACSWAPW_signed10_registerZ_registerU_simple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPW_signed10_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPW_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPW_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPW_extend27_upper27_lower10_registerZ_registerU_triple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPW_extend27_upper27_lower10_registerZ_registerU_triple),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v1_ACSWAPW_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPW_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v1_ACSWAPW_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_ACSWAPW_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v1_ACSWAPD_signed10_registerZ_registerU_simple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPD_signed10_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPD_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPD_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPD_extend27_upper27_lower10_registerZ_registerU_triple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPD_extend27_upper27_lower10_registerZ_registerU_triple),COMMIT(commit_v1_ACSWAPW_signed10_registerZ_registerU_simple))
Behavior(v1_ACSWAPD_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPD_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v1_ACSWAPD_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_ACSWAPD_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v1_ACSWAPD_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_ACSWAPD_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v1_ACSWAPD_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_ACSWAPD_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v1_ALCLRW_registerW_signed10_registerZ_simple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_signed10_registerZ_simple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRW_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRW_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRW_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALCLRW_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALCLRD_registerW_signed10_registerZ_simple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_signed10_registerZ_simple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRD_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRD_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRD_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_ALCLRD_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v1_ALCLRD_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALCLRD_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALCLRD_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v1_ALADDW_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_signed10_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDW_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDW_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDW_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v1_ALADDW_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v1_ALADDW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v1_ALADDD_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_signed10_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDD_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDD_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_ALADDD_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v1_ALADDD_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v1_ALADDD_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDD_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v1_ALADDD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v1_DTOUCHL_signed10_registerZ_simple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DTOUCHL_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_upper27_lower10_registerZ_double,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DTOUCHL_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DTOUCHL_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_registerY_registerZ_simple),EXECUTE(execute_v1_DTOUCHL_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_lsucond_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_registerZ_simple),EXECUTE(execute_v1_DTOUCHL_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DTOUCHL_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DTOUCHL_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_signed10_registerZ_simple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DINVALL_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_upper27_lower10_registerZ_double,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DINVALL_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DINVALL_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_registerY_registerZ_simple),EXECUTE(execute_v1_DINVALL_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_lsucond_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_registerZ_simple),EXECUTE(execute_v1_DINVALL_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DINVALL_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVALL_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DINVALL_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_signed10_registerZ_simple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DZEROL_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_upper27_lower10_registerZ_double,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DZEROL_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_DZEROL_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_registerY_registerZ_simple),EXECUTE(execute_v1_DZEROL_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_lsucond_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_registerZ_simple),EXECUTE(execute_v1_DZEROL_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DZEROL_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DZEROL_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_DZEROL_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_signed10_registerZ_simple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_IINVALS_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_upper27_lower10_registerZ_double,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_IINVALS_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_DTOUCHL_signed10_registerZ_simple),EXECUTE(execute_v1_IINVALS_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_registerY_registerZ_simple),EXECUTE(execute_v1_IINVALS_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_lsucond_registerY_registerZ_simple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_registerZ_simple),EXECUTE(execute_v1_IINVALS_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_IINVALS_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVALS_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v1_DTOUCHL_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v1_IINVALS_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_DINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_DINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_IINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_IINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_FENCE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_FENCE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_NOP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_NOP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v1_STSUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_STSUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MIND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MIND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MIND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MIND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDND_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORND_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMM8_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMM8_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMM8_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMM8_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMM8_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMMT8_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMMT8_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMMT8_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMMT8_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBMMT8_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX4D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX8D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX16D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX2D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX4D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX8D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX16D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDUWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDUWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFUWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFUWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LANDD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNANDD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LORD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNORD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_STSUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_STSUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_XORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NXORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDNW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDNW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ANDNW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORNW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORNW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ORNW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGUW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGUW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGRW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRUW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGRUW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LANDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LANDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNANDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LNANDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LORW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LORW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNORW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LNORW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ABDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ABDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MINWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MINUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MAXWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MAXUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCWC_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDCWC_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCWC_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFCWC_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDSWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDSWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFSWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFSWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX2WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX4WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX8WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX16WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX2WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX4WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX8WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX16WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGRWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGRUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LANDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LANDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNANDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNANDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LORWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LORWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNORWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNORWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ABDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ABDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MINHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MINUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MINUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MAXHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_MAXUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAXUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDCHCP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCHCP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCHCP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDCHCP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFCHCP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCHCP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCHCP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFCHCP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDSHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDSHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDSHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFSHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFSHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFSHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX2HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX4HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX8HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX16HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX2HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX4HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX8HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_SBFX16HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGRHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_AVGRUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_AVGRUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LANDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LANDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNANDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNANDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LORHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LORHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_LNORHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_LNORHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_ADDX2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX2UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX4UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX8UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDX16UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX2UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX4UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX8UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFX16UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDCD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFCD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCD_I_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCD_I_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ADDCD_I_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDCD_I_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCD_I_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCD_I_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SBFCD_I_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFCD_I_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FNEGD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FABSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FSRECD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSRSRD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FWIDENLWD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLWD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FWIDENMWD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMWD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_FNEGW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FABSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FRECW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FRECW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_FRSRW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FRSRW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v1_FSRECW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSRSRW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FWIDENLHW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLHW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FWIDENMHW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMHW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FNARROWWH_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FNARROWWH_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_FNEGWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FABSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FSRECWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSRSRWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FWIDENLHWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLHWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FWIDENMHWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMHWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple,FETCH(fetch_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_FNEGHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FABSHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FNARROWWHQ_rounding2_silent2_registerW_registerP_simple,FETCH(fetch_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FNARROWWHQ_rounding2_silent2_registerW_registerP_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_EXTFS_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_EXTFS_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLRF_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_CLRF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SATD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SATD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SATD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SATD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ROLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ROLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ROLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ROLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_RORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_RORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_RORW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_RORW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ROLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ROLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ROLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ROLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_RORWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_RORWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_RORWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_RORWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRSHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLLHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRAHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SRLHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SLSHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_COMPD_comparison_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_signed10_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPD_comparison_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPD_comparison_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPW_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPW_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPW_comparison_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPW_comparison_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPWD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPWD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPUWD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPUWD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPNWP_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPNWP_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_COMPNHQ_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPNHQ_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_CMOVED_scalarcond_registerZ_registerW_upper27_lower10_double,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_upper27_lower10_double),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_CMOVED_scalarcond_registerZ_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_CMOVED_scalarcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),EXECUTE(execute_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_MAKE_registerW_signed16_simple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_signed16_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAKE_registerW_extend6_upper27_lower10_double,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_extend6_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_MAKE_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_PCREL_registerW_signed16_simple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_signed16_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_PCREL_registerW_extend6_upper27_lower10_double,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_extend6_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_PCREL_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLZW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CBSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CTZW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLZD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CBSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CTZD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLZWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CLSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CBSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CTZWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXLHWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXLHWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXMHWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXMHWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXLBHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXLBHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXMBHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXMBHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_CMOVEHQ_simdcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),EXECUTE(execute_v1_CMOVEHQ_simdcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v1_FCOMPW_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPW_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCOMPW_floatcomp_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_FCOMPW_floatcomp_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCOMPD_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPD_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCOMPD_floatcomp_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_FCOMPD_floatcomp_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCOMPNWP_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPNWP_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCOMPNHQ_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPNHQ_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSDIVD_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVD_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCDIVD_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVD_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSDIVW_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVW_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCDIVW_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVW_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FSDIVWP_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVWP_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FCDIVWP_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVWP_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v1_FMIND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMIND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMAXD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMINW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMAXW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMINWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMAXWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMINHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FMAXHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FLOATWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FLOATW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FLOATUD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FLOATUWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FLOATUW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDUD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDUWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FIXEDUW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_MADDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUZDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUZDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUZDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUZDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFUZDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUZDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULGLXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGLXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULGMXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGMXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CMULGHXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGHXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_CRCBELMW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCBELMW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCBELMW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCBELMW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCBELLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCBELLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCBELLW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCBELLW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCLELMW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCLELMW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCLELMW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCLELMW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCLELLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCLELLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_CRCLELLW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCLELLW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2WD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2WD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2WD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2UWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2UWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2UWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2SUWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2SUWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2SUWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2SUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2W_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2W_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2W_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_DOT2WDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2WDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_DOT2UWDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2UWDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_DOT2SUWDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2SUWDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULWQ_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_MULWQ_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_DOT2WZP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2WZP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWDC_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWDC_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULCWDC_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULCWDC_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MSBFW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MULW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v1_MADDWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MADDSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MMA212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MMA212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MSBFSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MMS212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MMS212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MULSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_MM212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MM212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_FFMAD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMAWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMAHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULWDP_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDP_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDP_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDP_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDP_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDP_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMULHWQ_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHWQ_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULHWQ_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHWQ_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULHWQ_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHWQ_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMULWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULWDC_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDC_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDC_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDC_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDC_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWDC_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULWDC_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWDC_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMULCWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULCWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULCWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULCWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULCWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULCWDC_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWDC_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULCWDC_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWDC_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULCWDC_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULCWDC_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FMULCWDC_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULCWDC_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FADDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FADDWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FADDHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FADDDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FADDWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FADDCWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDCWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDCWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDCWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDCWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDCWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDCWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDCWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FADDCDC_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDCDC_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FADDCWCP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDCWCP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FSBFD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FSBFWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FSBFHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FSBFDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FSBFWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FSBFCWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFCWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFCWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFCWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFCWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFCWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFCWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFCWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FSBFCDC_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFCDC_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FSBFCWCP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFCWCP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FFMAHW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMAW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMAWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMAWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMAWDP_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWDP_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAWDP_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWDP_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAWDP_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAWDP_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FFMAHWQ_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHWQ_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAHWQ_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHWQ_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAHWQ_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMAHWQ_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMAHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FFMSHW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_FFMAD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FFMSWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FFMSWDP_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWDP_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSWDP_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWDP_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSWDP_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSWDP_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FFMSHWQ_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHWQ_registerM_registerZ_signed10_simple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSHWQ_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHWQ_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSHWQ_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_FFMSHWQ_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FMULWDP_registerM_registerZ_signed10_simple))
Behavior(v1_FFMSHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FADDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FADDW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FADDW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FSBFW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FSBFW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FSBFW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULHW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULHW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULW_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULW_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FMULWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FMULWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FMULWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FDOT2W_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2W_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2W_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2W_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2W_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2W_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2W_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FDOT2W_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FDOT2WD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2WD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2WD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2WD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2WD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_FDOT2WD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_FFMAD_registerW_registerZ_signed10_simple))
Behavior(v1_FDOT2WD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FDOT2WD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v1_FDOT2WZP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FDOT2WZP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FDOT2WDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FDOT2WDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_FMM212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMM212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v1_COPYQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_COPYQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v1_COPYO_registerN_registerR_simple,FETCH(fetch_v1_COPYO_registerN_registerR_simple),EXECUTE(execute_v1_COPYO_registerN_registerR_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_MOVETQ_registerAl_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MOVETQ_registerAl_registerZ_registerY_simple),COMMIT(commit_v1_MOVETQ_registerAl_registerZ_registerY_simple))
Behavior(v1_MOVETQ_registerAh_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MOVETQ_registerAl_registerZ_registerY_simple),COMMIT(commit_v1_MOVETQ_registerAl_registerZ_registerY_simple))
Behavior(v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_ALIGNO_registerN_registerBo_registerCe_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_ALIGNO_registerN_registerBo_registerCe_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_ALIGNV_registerA_registerBo_registerCe_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_ALIGNV_registerA_registerBe_registerCo_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_ALIGNV_registerA_registerBo_registerCe_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_MT44D_registerAq_registerBq_simple,FETCH(fetch_v1_MT44D_registerAq_registerBq_simple),EXECUTE(execute_v1_MT44D_registerAq_registerBq_simple),COMMIT(commit_v1_MT44D_registerAq_registerBq_simple))
Behavior(v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple,FETCH(fetch_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple),COMMIT(commit_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple))
Behavior(v1_MMA484UBW_registerAp_registerBp_registerC_registerD_simple,FETCH(fetch_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_MMA484UBW_registerAp_registerBp_registerC_registerD_simple),COMMIT(commit_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple))
Behavior(v1_MMA484SUBW_registerAp_registerBp_registerC_registerD_simple,FETCH(fetch_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_MMA484SUBW_registerAp_registerBp_registerC_registerD_simple),COMMIT(commit_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple))
Behavior(v1_MMA484USBW_registerAp_registerBp_registerC_registerD_simple,FETCH(fetch_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_MMA484USBW_registerAp_registerBp_registerC_registerD_simple),COMMIT(commit_v1_MMA484BW_registerAp_registerBp_registerC_registerD_simple))
Behavior(v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444UHBD0_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444UHBD0_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444SUHBD0_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444SUHBD0_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444USHBD0_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444USHBD0_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444HBD1_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444HBD1_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444UHBD1_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444UHBD1_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444SUHBD1_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444SUHBD1_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444USHBD1_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444USHBD1_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444HD_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444HD_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444UHD_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444UHD_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444SUHD_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444SUHD_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_MMA444USHD_registerAq_registerBq_registerC_registerD_simple,FETCH(fetch_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple),EXECUTE(execute_v1_MMA444USHD_registerAq_registerBq_registerC_registerD_simple),COMMIT(commit_v1_MMA444HBD0_registerAq_registerBq_registerC_registerD_simple))
Behavior(v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple,FETCH(fetch_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple),COMMIT(commit_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple))
Behavior(v1_FMMA242HW1_registerA1_registerBp_registerC_registerD_simple,FETCH(fetch_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_FMMA242HW1_registerA1_registerBp_registerC_registerD_simple),COMMIT(commit_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple))
Behavior(v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple,FETCH(fetch_v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple),COMMIT(commit_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple))
Behavior(v1_FMMA242HW3_registerA3_registerBp_registerC_registerD_simple,FETCH(fetch_v1_FMMA242HW2_registerA2_registerBp_registerC_registerD_simple),EXECUTE(execute_v1_FMMA242HW3_registerA3_registerBp_registerC_registerD_simple),COMMIT(commit_v1_FMMA242HW0_registerA0_registerBp_registerC_registerD_simple))
Behavior(v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),COMMIT(commit_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple))
Behavior(v1_CONVDHV1_roundint_saturate_registerAh_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVDHV1_roundint_saturate_registerAh_registerBq_simple),COMMIT(commit_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple))
Behavior(v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple),COMMIT(commit_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple))
Behavior(v1_CONVWBV1_roundint_saturate_registerAy_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVWBV1_roundint_saturate_registerAy_registerBq_simple),COMMIT(commit_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple))
Behavior(v1_CONVWBV2_roundint_saturate_registerAz_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVWBV2_roundint_saturate_registerAz_registerBq_simple),COMMIT(commit_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple))
Behavior(v1_CONVWBV3_roundint_saturate_registerAt_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVWBV3_roundint_saturate_registerAt_registerBq_simple),COMMIT(commit_v1_CONVWBV0_roundint_saturate_registerAx_registerBq_simple))
Behavior(v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple,FETCH(fetch_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple),EXECUTE(execute_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple,FETCH(fetch_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple),EXECUTE(execute_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple),COMMIT(commit_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple))
Behavior(v1_COPYD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_COPYD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NOTD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NOTD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NEGD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ZXBD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXBD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXBD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXBD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ZXHD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXHD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXHD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXHD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ZXWD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXWD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SXWD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXWD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SATDH_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SATDH_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_SATDW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SATDW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_COPYW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_COPYW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NOTW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NOTW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NEGW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NEGWP_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGWP_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABSWP_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSWP_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_NEGHQ_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGHQ_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_ABSHQ_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSHQ_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v1_COPYV_registerA_registerBe_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_COPYV_registerA_registerBo_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v1_MOVEFO_registerN_registerBe_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v1_MOVEFO_registerN_registerBo_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_AWAIT_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_AWAIT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SLEEP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_SLEEP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_STOP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_STOP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_BARRIER_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_BARRIER_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_TLBREAD_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBREAD_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_TLBPROBE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBPROBE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_TLBWRITE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBWRITE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_TLBDINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBDINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_TLBIINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_TLBIINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_ERROP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_ERROP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_BREAK_brknumber_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v2_BREAK_brknumber_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_RET_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_RET_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_RFE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_RFE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IGOTO_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_IGOTO_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_ICALL_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_ICALL_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SCALL_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_SCALL_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SCALL_sysnumber_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_SCALL_sysnumber_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_LOOPDO_registerZ_pcrel17_simple,FETCH(fetch_v1_LOOPDO_registerZ_pcrel17_simple),EXECUTE(execute_v1_LOOPDO_registerZ_pcrel17_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_WFXL_systemT2_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v2_WFXL_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemAlone_registerZ_simple))
Behavior(v2_WFXL_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXL_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v2_WFXM_systemT2_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v2_WFXM_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemAlone_registerZ_simple))
Behavior(v2_WFXM_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_WFXM_systemT2_registerZ_simple),COMMIT(commit_v1_WFXL_systemT2_registerZ_simple))
Behavior(v2_GET_registerZ_systemS2_simple,FETCH(fetch_v1_GET_registerZ_systemS2_simple),EXECUTE(execute_v1_GET_registerZ_systemS2_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_GET_registerZ_systemS3_simple,FETCH(fetch_v1_GET_registerZ_systemS2_simple),EXECUTE(execute_v1_GET_registerZ_systemS2_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_IGET_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_IGET_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SET_systemT3_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v2_SET_systemAlone_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v2_SET_systemRA_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v2_SET_systemT4_registerZ_simple,FETCH(fetch_v1_WFXL_systemT2_registerZ_simple),EXECUTE(execute_v1_SET_systemT3_registerZ_simple),COMMIT(commit_v1_SET_systemT3_registerZ_simple))
Behavior(v2_RSWAP_registerZ_systemS4_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v2_RSWAP_registerZ_systemAlone_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v2_RSWAP_registerZ_systemS3_simple,FETCH(fetch_v1_RSWAP_registerZ_systemS4_simple),EXECUTE(execute_v1_RSWAP_registerZ_systemS4_simple),COMMIT(commit_v1_RSWAP_registerZ_systemS4_simple))
Behavior(v2_WAITIT_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_WAITIT_registerZ_simple),COMMIT(commit_v1_WAITIT_registerZ_simple))
Behavior(v2_SYNCGROUP_registerZ_simple,FETCH(fetch_v1_IGOTO_registerZ_simple),EXECUTE(execute_v1_SYNCGROUP_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_GOTO_pcrel27_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_GOTO_pcrel27_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_CALL_pcrel27_simple,FETCH(fetch_v1_SCALL_sysnumber_simple),EXECUTE(execute_v1_CALL_pcrel27_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_CB_branchcond_registerZ_pcrel17_simple,FETCH(fetch_v1_CB_branchcond_registerZ_pcrel17_simple),EXECUTE(execute_v1_CB_branchcond_registerZ_pcrel17_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_LBZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LBS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LBS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LBS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LBS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LBS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LBS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LHZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LHZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LHS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LHS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LHS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LHS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LHS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LHS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LWZ_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWZ_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWZ_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWZ_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWZ_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWZ_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWZ_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LWZ_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LWS_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWS_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWS_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LWS_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LWS_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWS_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LWS_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LWS_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LWS_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LD_variant_registerW_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_signed10_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LD_variant_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LD_variant_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LD_variant_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_LD_variant_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LD_variant_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LD_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LD_variant_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple))
Behavior(v2_LD_variant_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LD_variant_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_LQ_variant_registerM_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_signed10_registerZ_simple),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v2_LQ_variant_registerM_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_upper27_lower10_registerZ_double),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v2_LQ_variant_registerM_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LQ_variant_registerM_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LQ_variant_registerM_signed10_registerZ_simple))
Behavior(v2_LQ_variant_lsucond_registerY_registerM_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v2_LQ_variant_lsucond_registerY_registerM_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_offset27_registerZ_double),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v2_LQ_variant_lsucond_registerY_registerM_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LQ_variant_lsucond_registerY_registerM_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LQ_variant_lsucond_registerY_registerM_registerZ_simple))
Behavior(v2_LQ_variant_doscale_registerM_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple),COMMIT(commit_v1_LQ_variant_doscale_registerM_registerY_registerZ_simple))
Behavior(v2_LO_variant_registerN_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_signed10_registerZ_simple),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v2_LO_variant_registerN_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_upper27_lower10_registerZ_double),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v2_LO_variant_registerN_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LO_variant_registerN_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LO_variant_registerN_signed10_registerZ_simple))
Behavior(v2_LO_variant_lsucond_registerY_registerN_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v2_LO_variant_lsucond_registerY_registerN_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_offset27_registerZ_double),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v2_LO_variant_lsucond_registerY_registerN_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LO_variant_lsucond_registerY_registerN_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LO_variant_lsucond_registerY_registerN_registerZ_simple))
Behavior(v2_LO_variant_doscale_registerN_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LO_variant_doscale_registerN_registerY_registerZ_simple),COMMIT(commit_v1_LO_variant_doscale_registerN_registerY_registerZ_simple))
Behavior(v2_LV_speculate_registerA_signed10_registerZ_simple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_signed10_registerZ_simple),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v2_LV_speculate_registerA_upper27_lower10_registerZ_double,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_upper27_lower10_registerZ_double),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v2_LV_speculate_registerA_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LBZ_variant_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_LV_speculate_registerA_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v2_LV_speculate_lsucond_registerY_registerA_registerZ_simple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v2_LV_speculate_lsucond_registerY_registerA_offset27_registerZ_double,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_offset27_registerZ_double),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v2_LV_speculate_lsucond_registerY_registerA_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LBZ_variant_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_LV_speculate_lsucond_registerY_registerA_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v2_LV_speculate_doscale_registerA_registerY_registerZ_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple),COMMIT(commit_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple))
Behavior(v2_LV_column_speculate_registerAq_signed10_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v2_LV_column_speculate_registerAq_upper27_lower10_registerZ_double,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_upper27_lower10_registerZ_double),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v2_LV_column_speculate_registerAq_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_LV_column_speculate_registerAq_signed10_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_registerAq_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_LV_column_speculate_registerAq_signed10_registerZ_simple))
Behavior(v2_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_registerZ_simple))
Behavior(v2_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double))
Behavior(v2_LV_column_speculate_lsucond_registerY_registerAq_extend27_offset27_registerZ_triple,FETCH(fetch_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double),EXECUTE(execute_v1_LV_column_speculate_lsucond_registerY_registerAq_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LV_column_speculate_lsucond_registerY_registerAq_offset27_registerZ_double))
Behavior(v2_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple,FETCH(fetch_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple),EXECUTE(execute_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple),COMMIT(commit_v1_LV_column_speculate_doscale_registerAq_registerY_registerZ_simple))
Behavior(v2_SB_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SB_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SB_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SB_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SB_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SB_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SH_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SH_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SH_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SH_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SH_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SH_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SW_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SW_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SW_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SW_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_signed10_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_SD_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SD_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_SD_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SD_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_SD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_signed10_registerZ_registerU_simple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_signed10_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_extend27_upper27_lower10_registerZ_registerU_triple,FETCH(fetch_v1_SQ_signed10_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_extend27_upper27_lower10_registerZ_registerU_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v1_SQ_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v1_SQ_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SQ_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v1_SQ_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v1_SQ_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_signed10_registerZ_registerV_simple,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_signed10_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_upper27_lower10_registerZ_registerV_double,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_upper27_lower10_registerZ_registerV_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_extend27_upper27_lower10_registerZ_registerV_triple,FETCH(fetch_v1_SO_signed10_registerZ_registerV_simple),EXECUTE(execute_v1_SO_extend27_upper27_lower10_registerZ_registerV_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_doscale_registerY_registerZ_registerV_simple,FETCH(fetch_v1_SO_doscale_registerY_registerZ_registerV_simple),EXECUTE(execute_v1_SO_doscale_registerY_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_lsucond_registerY_registerZ_registerV_simple,FETCH(fetch_v1_SO_doscale_registerY_registerZ_registerV_simple),EXECUTE(execute_v1_SO_lsucond_registerY_registerZ_registerV_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_lsucond_registerY_offset27_registerZ_registerV_double,FETCH(fetch_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),EXECUTE(execute_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SO_lsucond_registerY_extend27_offset27_registerZ_registerV_triple,FETCH(fetch_v1_SO_lsucond_registerY_offset27_registerZ_registerV_double),EXECUTE(execute_v1_SO_lsucond_registerY_extend27_offset27_registerZ_registerV_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_signed10_registerZ_registerE_simple,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_signed10_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_upper27_lower10_registerZ_registerE_double,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_upper27_lower10_registerZ_registerE_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_extend27_upper27_lower10_registerZ_registerE_triple,FETCH(fetch_v1_SV_signed10_registerZ_registerE_simple),EXECUTE(execute_v1_SV_extend27_upper27_lower10_registerZ_registerE_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_doscale_registerY_registerZ_registerE_simple,FETCH(fetch_v1_SV_doscale_registerY_registerZ_registerE_simple),EXECUTE(execute_v1_SV_doscale_registerY_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_lsucond_registerY_registerZ_registerE_simple,FETCH(fetch_v1_SV_doscale_registerY_registerZ_registerE_simple),EXECUTE(execute_v1_SV_lsucond_registerY_registerZ_registerE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_lsucond_registerY_offset27_registerZ_registerE_double,FETCH(fetch_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),EXECUTE(execute_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_SV_lsucond_registerY_extend27_offset27_registerZ_registerE_triple,FETCH(fetch_v1_SV_lsucond_registerY_offset27_registerZ_registerE_double),EXECUTE(execute_v1_SV_lsucond_registerY_extend27_offset27_registerZ_registerE_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v2_ACSWAPW_boolcas_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPW_boolcas_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPW_boolcas_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPW_boolcas_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPW_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v2_ACSWAPW_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPD_boolcas_signed10_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPD_boolcas_signed10_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v2_ACSWAPD_boolcas_upper27_lower10_registerZ_registerU_double,FETCH(fetch_v2_ACSWAPW_boolcas_signed10_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPD_boolcas_upper27_lower10_registerZ_registerU_double),COMMIT(commit_v1_ACSWAPW_doscale_registerY_registerZ_registerU_simple))
Behavior(v2_ACSWAPD_boolcas_doscale_registerY_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPD_boolcas_doscale_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPD_boolcas_lsucond_registerY_registerZ_registerU_simple,FETCH(fetch_v2_ACSWAPW_boolcas_doscale_registerY_registerZ_registerU_simple),EXECUTE(execute_v2_ACSWAPD_boolcas_lsucond_registerY_registerZ_registerU_simple),COMMIT(commit_v1_ACSWAPW_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPD_boolcas_lsucond_registerY_offset27_registerZ_registerU_double,FETCH(fetch_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v2_ACSWAPD_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),COMMIT(commit_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ACSWAPD_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple,FETCH(fetch_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double),EXECUTE(execute_v2_ACSWAPD_boolcas_lsucond_registerY_extend27_offset27_registerZ_registerU_triple),COMMIT(commit_v2_ACSWAPW_boolcas_lsucond_registerY_offset27_registerZ_registerU_double))
Behavior(v2_ALCLRW_registerW_signed10_registerZ_simple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_signed10_registerZ_simple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRW_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRW_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRW_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRW_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRW_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALCLRW_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRW_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALCLRD_registerW_signed10_registerZ_simple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_signed10_registerZ_simple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRD_registerW_upper27_lower10_registerZ_double,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_upper27_lower10_registerZ_double),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRD_registerW_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v1_ALCLRW_registerW_signed10_registerZ_simple),EXECUTE(execute_v1_ALCLRD_registerW_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_ALCLRW_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRD_doscale_registerW_registerY_registerZ_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_ALCLRD_doscale_registerW_registerY_registerZ_simple),COMMIT(commit_v1_LBZ_variant_registerW_signed10_registerZ_simple))
Behavior(v2_ALCLRD_lsucond_registerY_registerW_registerZ_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_registerZ_simple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALCLRD_lsucond_registerY_registerW_offset27_registerZ_double,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_offset27_registerZ_double),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALCLRD_lsucond_registerY_registerW_extend27_offset27_registerZ_triple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_offset27_registerZ_double),EXECUTE(execute_v1_ALCLRD_lsucond_registerY_registerW_extend27_offset27_registerZ_triple),COMMIT(commit_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple))
Behavior(v2_ALADDW_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_signed10_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDW_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDW_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDW_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v2_ALADDW_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDW_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v2_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v2_ALADDW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDW_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v2_ALADDD_signed10_registerZ_registerT_simple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_signed10_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDD_upper27_lower10_registerZ_registerT_double,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_upper27_lower10_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDD_extend27_upper27_lower10_registerZ_registerT_triple,FETCH(fetch_v1_SB_signed10_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_extend27_upper27_lower10_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_ALADDD_doscale_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_doscale_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v2_ALADDD_lsucond_registerY_registerZ_registerT_simple,FETCH(fetch_v1_SB_doscale_registerY_registerZ_registerT_simple),EXECUTE(execute_v1_ALADDD_lsucond_registerY_registerZ_registerT_simple),COMMIT(commit_v1_ALADDW_doscale_registerY_registerZ_registerT_simple))
Behavior(v2_ALADDD_lsucond_registerY_offset27_registerZ_registerT_double,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDD_lsucond_registerY_offset27_registerZ_registerT_double),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v2_ALADDD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple,FETCH(fetch_v1_SB_lsucond_registerY_offset27_registerZ_registerT_double),EXECUTE(execute_v1_ALADDD_lsucond_registerY_extend27_offset27_registerZ_registerT_triple),COMMIT(commit_v1_ALADDW_lsucond_registerY_offset27_registerZ_registerT_double))
Behavior(v2_DTOUCHL_cachelev_signed10_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DTOUCHL_cachelev_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_upper27_lower10_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DTOUCHL_cachelev_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DTOUCHL_cachelev_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_registerY_registerZ_simple),EXECUTE(execute_v2_DTOUCHL_cachelev_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple),EXECUTE(execute_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DTOUCHL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_DTOUCHL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_signed10_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DINVALL_cachelev_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_upper27_lower10_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DINVALL_cachelev_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_DINVALL_cachelev_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_registerY_registerZ_simple),EXECUTE(execute_v2_DINVALL_cachelev_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_lsucond_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple),EXECUTE(execute_v2_DINVALL_cachelev_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_DINVALL_cachelev_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVALL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_DINVALL_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_signed10_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_IINVALS_cachelev_signed10_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_upper27_lower10_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_IINVALS_cachelev_upper27_lower10_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_extend27_upper27_lower10_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_signed10_registerZ_simple),EXECUTE(execute_v2_IINVALS_cachelev_extend27_upper27_lower10_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_registerY_registerZ_simple),EXECUTE(execute_v2_IINVALS_cachelev_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_lsucond_registerY_registerZ_simple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_registerZ_simple),EXECUTE(execute_v2_IINVALS_cachelev_lsucond_registerY_registerZ_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_lsucond_registerY_offset27_registerZ_double,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_IINVALS_cachelev_lsucond_registerY_offset27_registerZ_double),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVALS_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple,FETCH(fetch_v2_DTOUCHL_cachelev_lsucond_registerY_offset27_registerZ_double),EXECUTE(execute_v2_IINVALS_cachelev_lsucond_registerY_extend27_offset27_registerZ_triple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_DINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_DINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_IINVAL_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_IINVAL_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_FENCE_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_FENCE_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_NOP_simple,FETCH(fetch_v1_AWAIT_simple),EXECUTE(execute_v1_NOP_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_STSUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_STSUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MIND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MIND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MIND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MIND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MIND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDND_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORND_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORND_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORND_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORND_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORND_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMM8_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMM8_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMM8_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMM8_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMM8_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMM8_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMMT8_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMMT8_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMMT8_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMMT8_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBMMT8_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBMMT8_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX4D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX8D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX16D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX2D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX4D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX8D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX16D_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16D_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16D_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16D_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDUWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDUWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFUWD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFUWD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LANDD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNANDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNANDD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LORD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNORD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNORD_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORD_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_STSUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_STSUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_XORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_XORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NXORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_NXORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDNW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDNW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ANDNW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ANDNW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORNW_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_signed10_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORNW_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ORNW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ORNW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDSW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFSW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16W_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16W_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGUW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGUW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGRW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRUW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRUW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_AVGRUW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LANDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LANDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNANDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNANDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LNANDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LORW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LORW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNORW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_LNORW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ABDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ABDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MINWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MINUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MAXWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MAXUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCWC_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDCWC_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCWC_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFCWC_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDSWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDSWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFSWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFSWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX2WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX4WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX8WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX16WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX2WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX4WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX8WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX16WP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16WP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16WP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16WP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGRWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGRUWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRUWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRUWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LANDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LANDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNANDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNANDWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LORWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LORWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNORWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNORWP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORWP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ABDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ABDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ABDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MINHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MINUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MINUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MINUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MINUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MAXHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_MAXUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MAXUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAXUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_MAXUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDCHCP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCHCP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCHCP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDCHCP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFCHCP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCHCP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCHCP_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFCHCP_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDSHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDSHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDSHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDSHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFSHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFSHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFSHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFSHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX2HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX2HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX4HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX4HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX8HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX8HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX16HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_ADDX16HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX2HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX2HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX4HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX4HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX8HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX8HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_SBFX16HQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16HQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16HQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_SBFX16HQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGRHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_AVGRUHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_AVGRUHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_AVGRUHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_AVGRUHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LANDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LANDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LANDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LANDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNANDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNANDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNANDHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNANDHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LORHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LORHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LORHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LORHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_LNORHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_LNORHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_LNORHQ_splat32_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_LNORHQ_splat32_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_ADDX2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16WD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16WD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX2UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX2UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX4UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX4UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX4UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX8UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX8UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX8UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDX16UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDX16UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDX16UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX2UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX2UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX4UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX4UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX4UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX8UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX8UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX8UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFX16UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFX16UWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFX16UWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDCD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFCD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCD_I_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ADDCD_I_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ADDCD_I_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ADDCD_I_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCD_I_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SBFCD_I_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SBFCD_I_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SBFCD_I_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FNEGD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FABSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FSRECD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSRSRD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FWIDENLWD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLWD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FWIDENMWD_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMWD_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FNARROWDW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_FNEGW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FABSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FRECW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FRECW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_FRSRW_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FRSRW_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ALADDW_signed10_registerZ_registerT_simple))
Behavior(v2_FSRECW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSRSRW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FWIDENLHW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLHW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FWIDENMHW_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMHW_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FNARROWWH_rounding2_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FNARROWWH_rounding2_silent2_registerW_registerZ_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_FNEGWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FABSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FSRECWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FSRECWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSRSRWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FSRSRWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FWIDENLHWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENLHWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FWIDENMHWP_silent2_registerW_registerZ_simple,FETCH(fetch_v1_FSRECD_silent2_registerW_registerZ_simple),EXECUTE(execute_v1_FWIDENMHWP_silent2_registerW_registerZ_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FNARROWDWP_rounding2_silent2_registerW_registerP_simple,FETCH(fetch_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_FNEGHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FNEGHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FABSHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_FABSHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FNARROWWHQ_rounding2_silent2_registerW_registerP_simple,FETCH(fetch_v1_FNARROWDWP_rounding2_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FNARROWWHQ_rounding2_silent2_registerW_registerP_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_INSF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_EXTFS_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_EXTFS_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLRF_registerW_registerZ_stopbit2_stopbit4_startbit_simple,FETCH(fetch_v1_EXTFZ_registerW_registerZ_stopbit2_stopbit4_startbit_simple),EXECUTE(execute_v1_CLRF_registerW_registerZ_stopbit2_stopbit4_startbit_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SATD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SATD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATUD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_SATUD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATUD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v2_SATUD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSD_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSD_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ROLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ROLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ROLW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ROLW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_RORW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_RORW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_RORW_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_RORW_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ROLWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_ROLWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ROLWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_ROLWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_RORWPS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_RORWPS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_RORWPS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_RORWPS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRSHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRSHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRSHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLLHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLLHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLLHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRAHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRAHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRAHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SRLHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SRLHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SRLHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSHQS_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_SLSHQS_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SLSHQS_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_SLSHQS_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_COMPD_comparison_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_signed10_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPD_comparison_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPD_comparison_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPW_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPW_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPW_comparison_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_COMPW_comparison_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPWD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPWD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPUWD_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPUWD_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPNWP_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPNWP_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_COMPNHQ_comparison_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_COMPNHQ_comparison_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_CMOVED_scalarcond_registerZ_registerW_signed10_simple,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_CMOVED_scalarcond_registerZ_registerW_upper27_lower10_double,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_upper27_lower10_double),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_CMOVED_scalarcond_registerZ_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_CMOVED_scalarcond_registerZ_registerW_signed10_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_CMOVED_scalarcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_ALCLRW_lsucond_registerY_registerW_registerZ_simple),EXECUTE(execute_v1_CMOVED_scalarcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_CMOVEWP_simdcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),EXECUTE(execute_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_MAKE_registerW_signed16_simple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_signed16_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAKE_registerW_extend6_upper27_lower10_double,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_extend6_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_MAKE_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_MAKE_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_PCREL_registerW_signed16_simple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_signed16_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_PCREL_registerW_extend6_upper27_lower10_double,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_extend6_upper27_lower10_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_PCREL_registerW_extend27_upper27_lower10_triple,FETCH(fetch_v1_MAKE_registerW_signed16_simple),EXECUTE(execute_v1_PCREL_registerW_extend27_upper27_lower10_triple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLZW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CBSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CTZW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLZD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CBSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CTZD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLZWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLZWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CLSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CLSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CBSWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CBSWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CTZWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_CTZWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXLHWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXLHWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXMHWP_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXMHWP_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXLBHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXLBHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXMBHQ_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXMBHQ_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_CMOVEHQ_simdcond_registerZ_registerW_registerY_simple,FETCH(fetch_v1_CMOVEWP_simdcond_registerZ_registerW_registerY_simple),EXECUTE(execute_v1_CMOVEHQ_simdcond_registerZ_registerW_registerY_simple),COMMIT(commit_v1_FNARROWDW_rounding2_silent2_registerW_registerZ_simple))
Behavior(v2_FCOMPW_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPW_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCOMPW_floatcomp_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_FCOMPW_floatcomp_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCOMPD_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPD_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCOMPD_floatcomp_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double),EXECUTE(execute_v1_FCOMPD_floatcomp_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCOMPNWP_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPNWP_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCOMPNHQ_floatcomp_registerW_registerZ_registerY_simple,FETCH(fetch_v1_ALCLRW_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FCOMPNHQ_floatcomp_registerW_registerZ_registerY_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSDIVD_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVD_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCDIVD_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVD_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSDIVW_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVW_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCDIVW_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVW_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FSDIVWP_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FSDIVWP_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FCDIVWP_silent2_registerW_registerP_simple,FETCH(fetch_v1_FSDIVD_silent2_registerW_registerP_simple),EXECUTE(execute_v1_FCDIVWP_silent2_registerW_registerP_simple),COMMIT(commit_v1_ADDX2D_splat32_registerW_registerZ_upper27_lower5_double))
Behavior(v2_FMIND_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMIND_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMAXD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMINW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMAXW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMINWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMAXWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMINHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMINHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FMAXHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FMAXHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FLOATWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FLOATW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FLOATUD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FLOATUWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FLOATUW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FLOATUW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDUD_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUD_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDUWP_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUWP_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FIXEDUW_rounding_silent_registerW_registerZ_unsigned6_simple,FETCH(fetch_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple),EXECUTE(execute_v1_FIXEDUW_rounding_silent_registerW_registerZ_unsigned6_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_MADDD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUZDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUZDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUZDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_MADDDT_registerM_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUZDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUZDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFUZDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUZDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULDT_registerM_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_signed10_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULDT_registerM_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULDT_registerM_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CMULDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULGLXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGLXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULGMXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGMXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CMULGHXDT_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDDT_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_CMULGHXDT_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_CRCBELMW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCBELMW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCBELMW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCBELMW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCBELLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCBELLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCBELLW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCBELLW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCLELMW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCLELMW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCLELMW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCLELMW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCLELLW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_CRCLELLW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_CRCLELLW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_CRCLELLW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2WD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2WD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2WD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2WD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2WD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2UWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2UWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2UWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2UWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2UWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2SUWD_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2SUWD_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2SUWD_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2SUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2SUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2W_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2W_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2W_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2W_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_DOT2W_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_DOT2WDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2WDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_DOT2UWDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2UWDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_DOT2SUWDP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2SUWDP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULWQ_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_MULWQ_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_DOT2WZP_registerM_registerP_registerO_simple,FETCH(fetch_v1_DOT2WDP_registerM_registerP_registerO_simple),EXECUTE(execute_v1_DOT2WZP_registerM_registerP_registerO_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULWP_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWP_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWP_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWP_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWP_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULHQ_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULHQ_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULHQ_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULHQ_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULHQ_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWC_registerW_registerZ_signed10_simple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_signed10_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWC_registerW_registerZ_upper27_lower10_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_upper27_lower10_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWC_registerW_registerZ_extend27_upper27_lower10_triple,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_extend27_upper27_lower10_triple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULCWC_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULCWC_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWDC_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWDC_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULCWDC_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULCWDC_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUHWQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUHWQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MADDW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MADDW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_MADDD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MSBFW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_MADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MSBFW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULSUWD_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUWD_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULSUWD_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULSUWD_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULW_registerW_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULW_registerW_registerZ_registerY_simple),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MULW_registerW_registerZ_upper27_lower5_double,FETCH(fetch_v1_ADDD_registerW_registerZ_signed10_simple),EXECUTE(execute_v1_MULW_registerW_registerZ_upper27_lower5_double),COMMIT(commit_v1_MADDD_registerW_registerZ_signed10_simple))
Behavior(v2_MADDWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MADDSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MADDSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MMA212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MMA212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MSBFSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MSBFSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MMS212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_MADDHWQ_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_MMS212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MULSUWDP_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MULSUWDP_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_MM212W_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MM212W_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_FFMAD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMAHO_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMAHO_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMSD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMSWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMSHO_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FFMAWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMSHO_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMULD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMULHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMULWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMULHO_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FMULHO_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple))
Behavior(v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FFDMAW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v2_FFDMAW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMAWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFDMAWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFDMSW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v2_FFDMSW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMSWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFDMSWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMSWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMSWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFDMDAW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFDMDAW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple),EXECUTE(execute_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFDMSAW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFDMSAW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMSAWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple),EXECUTE(execute_v2_FFDMSAWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMSAWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMSAWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFDMDSW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFDMDSW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMDSWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple),EXECUTE(execute_v2_FFDMDSWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMDSWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMDSWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFDMASW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFDMASW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMASWP_rounding_silent_registerW_registerP_registerO_simple,FETCH(fetch_v2_FFDMDAWP_rounding_silent_registerW_registerP_registerO_simple),EXECUTE(execute_v2_FFDMASWP_rounding_silent_registerW_registerP_registerO_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFDMASWQ_rounding_silent_registerM_registerQ_registerR_simple,FETCH(fetch_v2_FFDMDAWQ_rounding_silent_registerM_registerQ_registerR_simple),EXECUTE(execute_v2_FFDMASWQ_rounding_silent_registerM_registerQ_registerR_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMM212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v2_FMM212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMM222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FMM222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v2_FMMA212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v2_FMMS212W_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FMMS222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FMMS222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple))
Behavior(v2_FFMAWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMAWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FFMSWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v2_FFMAWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v2_FFMSWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v2_FMULWC_conjugate_rounding_silent_registerW_registerZ_registerY_simple))
Behavior(v2_FFMSWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v2_FMMA222W_multransm_multransl_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FFMSWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v2_FMULWCP_conjugate_rounding_silent_registerM_registerP_registerO_simple))
Behavior(v2_FADDD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FADDWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FADDHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FADDDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FADDWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FADDHO_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FADDHO_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FADDCWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDCWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FADDCDC_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDCDC_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FADDCWCP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FADDCWCP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FSBFD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FSBFWP_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFWP_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FSBFHQ_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFHQ_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FSBFDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FSBFWQ_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFWQ_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FSBFHO_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v2_FSBFHO_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FSBFCWC_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFCWC_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FSBFCDC_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFCDC_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FSBFCWCP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FSBFCWCP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMAHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMAHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMAHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMSHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_FFMAD_rounding_silent_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FFMSWDP_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSWDP_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FFMSHWQ_rounding_silent_registerM_registerZ_registerY_simple,FETCH(fetch_v1_FFMAWDP_rounding_silent_registerM_registerZ_registerY_simple),EXECUTE(execute_v1_FFMSHWQ_rounding_silent_registerM_registerZ_registerY_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FADDW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FADDW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FSBFW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FSBFW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULHW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULHW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULW_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULW_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FMULWD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FMULWD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FDOT2W_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FDOT2W_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FDOT2WD_rounding_silent_registerW_registerZ_registerY_simple,FETCH(fetch_v1_LBZ_variant_doscale_registerW_registerY_registerZ_simple),EXECUTE(execute_v1_FDOT2WD_rounding_silent_registerW_registerZ_registerY_simple),COMMIT(commit_v1_FLOATD_rounding_silent_registerW_registerZ_unsigned6_simple))
Behavior(v2_FDOT2WZP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FDOT2WZP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_FDOT2WDP_rounding_silent_registerM_registerP_registerO_simple,FETCH(fetch_v1_FMULWQ_rounding_silent_registerM_registerP_registerO_simple),EXECUTE(execute_v1_FDOT2WDP_rounding_silent_registerM_registerP_registerO_simple),COMMIT(commit_v1_FMULWDP_rounding_silent_registerM_registerZ_registerY_simple))
Behavior(v2_COPYQ_registerM_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_COPYQ_registerM_registerZ_registerY_simple),COMMIT(commit_v1_MADDHWQ_registerM_registerZ_registerY_simple))
Behavior(v2_COPYO_registerN_registerR_simple,FETCH(fetch_v1_COPYO_registerN_registerR_simple),EXECUTE(execute_v1_COPYO_registerN_registerR_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_MOVETQ_registerAl_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MOVETQ_registerAl_registerZ_registerY_simple),COMMIT(commit_v1_MOVETQ_registerAl_registerZ_registerY_simple))
Behavior(v2_MOVETQ_registerAh_registerZ_registerY_simple,FETCH(fetch_v1_STSUD_registerW_registerZ_registerY_simple),EXECUTE(execute_v1_MOVETQ_registerAl_registerZ_registerY_simple),COMMIT(commit_v1_MOVETQ_registerAl_registerZ_registerY_simple))
Behavior(v2_SENDV_channel_registerA_simple,FETCH(fetch_v2_SENDV_channel_registerA_simple),EXECUTE(execute_v2_SENDV_channel_registerA_simple),COMMIT(commit_v1_AWAIT_simple))
Behavior(v2_RECVV_channel_registerA_simple,FETCH(fetch_v2_RECVV_channel_registerA_simple),EXECUTE(execute_v2_RECVV_channel_registerA_simple),COMMIT(commit_v1_LV_speculate_registerA_signed10_registerZ_simple))
Behavior(v2_ALIGNO_registerN_registerBe_registerCo_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_ALIGNO_registerN_registerBo_registerCe_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_ALIGNO_registerN_registerBe_registerCo_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_ALIGNO_registerN_registerBo_registerCe_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_ALIGNV_registerA_registerBe_registerCo_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_ALIGNV_registerA_registerBo_registerCe_byteshift_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_byteshift_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_ALIGNV_registerA_registerBe_registerCo_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_ALIGNV_registerA_registerBo_registerCe_registerZ_simple,FETCH(fetch_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),EXECUTE(execute_v1_ALIGNO_registerN_registerBe_registerCo_registerZ_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_MT44D_registerAq_registerBq_simple,FETCH(fetch_v1_MT44D_registerAq_registerBq_simple),EXECUTE(execute_v1_MT44D_registerAq_registerBq_simple),COMMIT(commit_v1_MT44D_registerAq_registerBq_simple))
Behavior(v2_MMA4164BW_registerAp_registerBp_registerDp_simple,FETCH(fetch_v2_MMA4164BW_registerAp_registerBp_registerDp_simple),EXECUTE(execute_v2_MMA4164BW_registerAp_registerBp_registerDp_simple),COMMIT(commit_v2_MMA4164BW_registerAp_registerBp_registerDp_simple))
Behavior(v2_MMA4164UBW_registerAp_registerBp_registerDp_simple,FETCH(fetch_v2_MMA4164BW_registerAp_registerBp_registerDp_simple),EXECUTE(execute_v2_MMA4164UBW_registerAp_registerBp_registerDp_simple),COMMIT(commit_v2_MMA4164BW_registerAp_registerBp_registerDp_simple))
Behavior(v2_MMA4164SUBW_registerAp_registerBp_registerDp_simple,FETCH(fetch_v2_MMA4164BW_registerAp_registerBp_registerDp_simple),EXECUTE(execute_v2_MMA4164SUBW_registerAp_registerBp_registerDp_simple),COMMIT(commit_v2_MMA4164BW_registerAp_registerBp_registerDp_simple))
Behavior(v2_MMA4164USBW_registerAp_registerBp_registerDp_simple,FETCH(fetch_v2_MMA4164BW_registerAp_registerBp_registerDp_simple),EXECUTE(execute_v2_MMA4164USBW_registerAp_registerBp_registerDp_simple),COMMIT(commit_v2_MMA4164BW_registerAp_registerBp_registerDp_simple))
Behavior(v2_MMA444HD_registerAq_registerB_registerD_simple,FETCH(fetch_v2_MMA444HD_registerAq_registerB_registerD_simple),EXECUTE(execute_v2_MMA444HD_registerAq_registerB_registerD_simple),COMMIT(commit_v2_MMA444HD_registerAq_registerB_registerD_simple))
Behavior(v2_MMA444UHD_registerAq_registerB_registerD_simple,FETCH(fetch_v2_MMA444HD_registerAq_registerB_registerD_simple),EXECUTE(execute_v2_MMA444UHD_registerAq_registerB_registerD_simple),COMMIT(commit_v2_MMA444HD_registerAq_registerB_registerD_simple))
Behavior(v2_MMA444SUHD_registerAq_registerB_registerD_simple,FETCH(fetch_v2_MMA444HD_registerAq_registerB_registerD_simple),EXECUTE(execute_v2_MMA444SUHD_registerAq_registerB_registerD_simple),COMMIT(commit_v2_MMA444HD_registerAq_registerB_registerD_simple))
Behavior(v2_MMA444USHD_registerAq_registerB_registerD_simple,FETCH(fetch_v2_MMA444HD_registerAq_registerB_registerD_simple),EXECUTE(execute_v2_MMA444USHD_registerAq_registerB_registerD_simple),COMMIT(commit_v2_MMA444HD_registerAq_registerB_registerD_simple))
Behavior(v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple,FETCH(fetch_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple),EXECUTE(execute_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple),COMMIT(commit_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple))
Behavior(v2_FMMA482HW1_xrounding_silent2_registerAo_registerBp_registerDp_simple,FETCH(fetch_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple),EXECUTE(execute_v2_FMMA482HW1_xrounding_silent2_registerAo_registerBp_registerDp_simple),COMMIT(commit_v2_FMMA482HW0_xrounding_silent2_registerAe_registerBp_registerDp_simple))
Behavior(v2_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple,FETCH(fetch_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple),EXECUTE(execute_v1_FSCALEWV_xrounding_silent2_rectify_registerA_registerB_simple),COMMIT(commit_v1_LV_speculate_lsucond_registerY_registerA_registerZ_simple))
Behavior(v2_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple,FETCH(fetch_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple),EXECUTE(execute_v1_FNARROWWHV_xrounding_silent2_registerA_registerBp_simple),COMMIT(commit_v1_LV_speculate_doscale_registerA_registerY_registerZ_simple))
Behavior(v2_CONVDHV0_roundint_saturate_registerAl_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),COMMIT(commit_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple))
Behavior(v2_CONVDHV1_roundint_saturate_registerAh_registerBq_simple,FETCH(fetch_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple),EXECUTE(execute_v1_CONVDHV1_roundint_saturate_registerAh_registerBq_simple),COMMIT(commit_v1_CONVDHV0_roundint_saturate_registerAl_registerBq_simple))
Behavior(v2_COPYD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_COPYD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NOTD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NOTD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NEGD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABSD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ZXBD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXBD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXBD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXBD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ZXHD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXHD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXHD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXHD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ZXWD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ZXWD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SXWD_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SXWD_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATDH_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SATDH_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATUDH_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v2_SATUDH_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATDW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_SATDW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_SATUDW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v2_SATUDW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_COPYW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_COPYW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NOTW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NOTW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NEGW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABSW_registerW_registerZ_simple,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSW_registerW_registerZ_simple),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NEGWP_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGWP_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABSWP_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSWP_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_NEGHQ_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_NEGHQ_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_ABSHQ_registerW_registerZ_double,FETCH(fetch_v1_FNEGD_registerW_registerZ_simple),EXECUTE(execute_v1_ABSHQ_registerW_registerZ_double),COMMIT(commit_v1_GET_registerZ_systemS2_simple))
Behavior(v2_COPYV_registerA_registerBe_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_COPYV_registerA_registerBo_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_ALIGNV_registerA_registerBe_registerCo_byteshift_simple))
Behavior(v2_MOVEFO_registerN_registerBe_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
Behavior(v2_MOVEFO_registerN_registerBo_simple,FETCH(fetch_v1_COPYV_registerA_registerBe_simple),EXECUTE(execute_v1_COPYV_registerA_registerBe_simple),COMMIT(commit_v1_COPYO_registerN_registerR_simple))
#endif
#undef Behavior

#ifndef BehaviorDeclare
#define BehaviorDeclare(ID, DECLARE)
#else
BehaviorDeclare(MEM_cas,DECLARE(Int256_ HELPER(MEM_cas)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4, Int256_ opnd5, Int256_ opnd6);))
BehaviorDeclare(MEM_dinval,DECLARE(void HELPER(MEM_dinval)(void *this);))
BehaviorDeclare(MEM_dinvall,DECLARE(void HELPER(MEM_dinvall)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(MEM_dtouchl,DECLARE(void HELPER(MEM_dtouchl)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(MEM_dzerol,DECLARE(void HELPER(MEM_dzerol)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(MEM_faa,DECLARE(Int256_ HELPER(MEM_faa)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(MEM_fence,DECLARE(void HELPER(MEM_fence)(void *this);))
BehaviorDeclare(MEM_iinval,DECLARE(void HELPER(MEM_iinval)(void *this);))
BehaviorDeclare(MEM_iinvals,DECLARE(void HELPER(MEM_iinvals)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(MEM_load,DECLARE(Int256_ HELPER(MEM_load)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(MEM_store,DECLARE(void HELPER(MEM_store)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(MEM_swap,DECLARE(Int256_ HELPER(MEM_swap)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(_BMM_8,DECLARE(Int256_ HELPER(_BMM_8)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(_BMT_8,DECLARE(Int256_ HELPER(_BMT_8)(void *this, Int256_ opnd1);))
BehaviorDeclare(add_32_32_x8,DECLARE(Int256_ HELPER(add_32_32_x8)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(add_64_64_x4,DECLARE(Int256_ HELPER(add_64_64_x4)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(barrier,DECLARE(void HELPER(barrier)(void *this);))
BehaviorDeclare(break,DECLARE(void HELPER(break)(void *this, Int256_ opnd1);))
BehaviorDeclare(clm_64_128,DECLARE(Int256_ HELPER(clm_64_128)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(comparison_16,DECLARE(bool HELPER(comparison_16)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(comparison_32,DECLARE(bool HELPER(comparison_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(comparison_64,DECLARE(bool HELPER(comparison_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(crc32_be_u32,DECLARE(Int256_ HELPER(crc32_be_u32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot16add_8_32,DECLARE(Int256_ HELPER(dot16add_8_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(dot16addsu_8_32,DECLARE(Int256_ HELPER(dot16addsu_8_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(dot16addu_8_32,DECLARE(Int256_ HELPER(dot16addu_8_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(dot16addus_8_32,DECLARE(Int256_ HELPER(dot16addus_8_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(dot4_16_64,DECLARE(Int256_ HELPER(dot4_16_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot4su_16_64,DECLARE(Int256_ HELPER(dot4su_16_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot4u_16_64,DECLARE(Int256_ HELPER(dot4u_16_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot4us_16_64,DECLARE(Int256_ HELPER(dot4us_16_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot8_8_32,DECLARE(Int256_ HELPER(dot8_8_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot8su_8_32,DECLARE(Int256_ HELPER(dot8su_8_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot8u_8_32,DECLARE(Int256_ HELPER(dot8u_8_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(dot8us_8_32,DECLARE(Int256_ HELPER(dot8us_8_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fadd_16_16_x4,DECLARE(Int256_ HELPER(fadd_16_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_16_16_x8,DECLARE(Int256_ HELPER(fadd_16_16_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_32_32,DECLARE(Int256_ HELPER(fadd_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_32_32_x2,DECLARE(Int256_ HELPER(fadd_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_32_32_x4,DECLARE(Int256_ HELPER(fadd_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_64_64,DECLARE(Int256_ HELPER(fadd_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fadd_64_64_x2,DECLARE(Int256_ HELPER(fadd_64_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(faddcc_32_32,DECLARE(Int256_ HELPER(faddcc_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(faddcc_32_32_x2,DECLARE(Int256_ HELPER(faddcc_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(faddcc_64_64,DECLARE(Int256_ HELPER(faddcc_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fcdiv_32,DECLARE(Int256_ HELPER(fcdiv_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fcdiv_32_x2,DECLARE(Int256_ HELPER(fcdiv_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fcdiv_64,DECLARE(Int256_ HELPER(fcdiv_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fconj_32_32,DECLARE(Int256_ HELPER(fconj_32_32)(void *this, Int256_ opnd1);))
BehaviorDeclare(fconj_32_32_x2,DECLARE(Int256_ HELPER(fconj_32_32_x2)(void *this, Int256_ opnd1);))
BehaviorDeclare(fdivbyzero,DECLARE(Int256_ HELPER(fdivbyzero)(void *this);))
BehaviorDeclare(fdot2_32_32,DECLARE(Int256_ HELPER(fdot2_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fdot2_32_32_x2,DECLARE(Int256_ HELPER(fdot2_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fdot2_32_64,DECLARE(Int256_ HELPER(fdot2_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fdot2_32_64_x2,DECLARE(Int256_ HELPER(fdot2_32_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fdot4add_16_32_noreset,DECLARE(Int256_ HELPER(fdot4add_16_32_noreset)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fdot4add_16_32_reset,DECLARE(Int256_ HELPER(fdot4add_16_32_reset)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fdot8add_16_32_noreset,DECLARE(Int256_ HELPER(fdot8add_16_32_noreset)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fdot8add_16_32_reset,DECLARE(Int256_ HELPER(fdot8add_16_32_reset)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdma_32_32,DECLARE(Int256_ HELPER(ffdma_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdma_32_32_x2,DECLARE(Int256_ HELPER(ffdma_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdma_32_32_x4,DECLARE(Int256_ HELPER(ffdma_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdmas_32_32,DECLARE(Int256_ HELPER(ffdmas_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmas_32_32_x2,DECLARE(Int256_ HELPER(ffdmas_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmas_32_32_x4,DECLARE(Int256_ HELPER(ffdmas_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmda_32_32,DECLARE(Int256_ HELPER(ffdmda_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmda_32_32_x2,DECLARE(Int256_ HELPER(ffdmda_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmda_32_32_x4,DECLARE(Int256_ HELPER(ffdmda_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmds_32_32,DECLARE(Int256_ HELPER(ffdmds_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmds_32_32_x2,DECLARE(Int256_ HELPER(ffdmds_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmds_32_32_x4,DECLARE(Int256_ HELPER(ffdmds_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdms_32_32,DECLARE(Int256_ HELPER(ffdms_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdms_32_32_x2,DECLARE(Int256_ HELPER(ffdms_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdms_32_32_x4,DECLARE(Int256_ HELPER(ffdms_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(ffdmsa_32_32,DECLARE(Int256_ HELPER(ffdmsa_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmsa_32_32_x2,DECLARE(Int256_ HELPER(ffdmsa_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffdmsa_32_32_x4,DECLARE(Int256_ HELPER(ffdmsa_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_16_16_x4,DECLARE(Int256_ HELPER(ffma_16_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_16_16_x8,DECLARE(Int256_ HELPER(ffma_16_16_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_16_32,DECLARE(Int256_ HELPER(ffma_16_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_16_32_x4,DECLARE(Int256_ HELPER(ffma_16_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_32_32,DECLARE(Int256_ HELPER(ffma_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_32_32_x2,DECLARE(Int256_ HELPER(ffma_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_32_32_x4,DECLARE(Int256_ HELPER(ffma_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_32_64,DECLARE(Int256_ HELPER(ffma_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_32_64_x2,DECLARE(Int256_ HELPER(ffma_32_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffma_64_64,DECLARE(Int256_ HELPER(ffma_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffmac_32_32,DECLARE(Int256_ HELPER(ffmac_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffmac_32_32_x2,DECLARE(Int256_ HELPER(ffmac_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_16_16_x4,DECLARE(Int256_ HELPER(ffms_16_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_16_16_x8,DECLARE(Int256_ HELPER(ffms_16_16_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_16_32,DECLARE(Int256_ HELPER(ffms_16_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_16_32_x4,DECLARE(Int256_ HELPER(ffms_16_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_32_32,DECLARE(Int256_ HELPER(ffms_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_32_32_x2,DECLARE(Int256_ HELPER(ffms_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_32_32_x4,DECLARE(Int256_ HELPER(ffms_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_32_64,DECLARE(Int256_ HELPER(ffms_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_32_64_x2,DECLARE(Int256_ HELPER(ffms_32_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffms_64_64,DECLARE(Int256_ HELPER(ffms_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffmsc_32_32,DECLARE(Int256_ HELPER(ffmsc_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(ffmsc_32_32_x2,DECLARE(Int256_ HELPER(ffmsc_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(finexact,DECLARE(Int256_ HELPER(finexact)(void *this);))
BehaviorDeclare(finvalid,DECLARE(Int256_ HELPER(finvalid)(void *this);))
BehaviorDeclare(fixed_32,DECLARE(Int256_ HELPER(fixed_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fixed_32_x2,DECLARE(Int256_ HELPER(fixed_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fixed_64,DECLARE(Int256_ HELPER(fixed_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fixedu_32,DECLARE(Int256_ HELPER(fixedu_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fixedu_32_x2,DECLARE(Int256_ HELPER(fixedu_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fixedu_64,DECLARE(Int256_ HELPER(fixedu_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(float_32,DECLARE(Int256_ HELPER(float_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(float_32_x2,DECLARE(Int256_ HELPER(float_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(float_64,DECLARE(Int256_ HELPER(float_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatcomp_16,DECLARE(bool HELPER(floatcomp_16)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatcomp_32,DECLARE(bool HELPER(floatcomp_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatcomp_64,DECLARE(bool HELPER(floatcomp_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatu_32,DECLARE(Int256_ HELPER(floatu_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatu_32_x2,DECLARE(Int256_ HELPER(floatu_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(floatu_64,DECLARE(Int256_ HELPER(floatu_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmax_16_x4,DECLARE(Int256_ HELPER(fmax_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmax_32,DECLARE(Int256_ HELPER(fmax_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmax_32_x2,DECLARE(Int256_ HELPER(fmax_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmax_64,DECLARE(Int256_ HELPER(fmax_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmin_16_x4,DECLARE(Int256_ HELPER(fmin_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmin_32,DECLARE(Int256_ HELPER(fmin_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmin_32_x2,DECLARE(Int256_ HELPER(fmin_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmin_64,DECLARE(Int256_ HELPER(fmin_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fmm212_32_32,DECLARE(Int256_ HELPER(fmm212_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmm222_32_32,DECLARE(Int256_ HELPER(fmm222_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fmm2awq,DECLARE(Int256_ HELPER(fmm2awq)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fmm2swq,DECLARE(Int256_ HELPER(fmm2swq)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fmm2wq,DECLARE(Int256_ HELPER(fmm2wq)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmma212_32_32,DECLARE(Int256_ HELPER(fmma212_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fmma222_32_32,DECLARE(Int256_ HELPER(fmma222_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4, Int256_ opnd5);))
BehaviorDeclare(fmms212_32_32,DECLARE(Int256_ HELPER(fmms212_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(fmms222_32_32,DECLARE(Int256_ HELPER(fmms222_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4, Int256_ opnd5);))
BehaviorDeclare(fmul_16_16_x4,DECLARE(Int256_ HELPER(fmul_16_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_16_16_x8,DECLARE(Int256_ HELPER(fmul_16_16_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_16_32,DECLARE(Int256_ HELPER(fmul_16_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_16_32_x4,DECLARE(Int256_ HELPER(fmul_16_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_32_32,DECLARE(Int256_ HELPER(fmul_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_32_32_x2,DECLARE(Int256_ HELPER(fmul_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_32_32_x4,DECLARE(Int256_ HELPER(fmul_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_32_64,DECLARE(Int256_ HELPER(fmul_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_32_64_x2,DECLARE(Int256_ HELPER(fmul_32_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmul_64_64,DECLARE(Int256_ HELPER(fmul_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmulc_32_32,DECLARE(Int256_ HELPER(fmulc_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmulc_32_32_x2,DECLARE(Int256_ HELPER(fmulc_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmulc_32_64,DECLARE(Int256_ HELPER(fmulc_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmulcc_32_32,DECLARE(Int256_ HELPER(fmulcc_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fmulcc_32_64,DECLARE(Int256_ HELPER(fmulcc_32_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fnarrow_32_16,DECLARE(Int256_ HELPER(fnarrow_32_16)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fnarrow_32_16_x4,DECLARE(Int256_ HELPER(fnarrow_32_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fnarrow_32_16_x8_noreset,DECLARE(Int256_ HELPER(fnarrow_32_16_x8_noreset)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fnarrow_32_16_x8_reset,DECLARE(Int256_ HELPER(fnarrow_32_16_x8_reset)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fnarrow_64_32,DECLARE(Int256_ HELPER(fnarrow_64_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fnarrow_64_32_x2,DECLARE(Int256_ HELPER(fnarrow_64_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(foverflow,DECLARE(Int256_ HELPER(foverflow)(void *this);))
BehaviorDeclare(fpow2scale_32_32_x8,DECLARE(Int256_ HELPER(fpow2scale_32_32_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(frec_32,DECLARE(Int256_ HELPER(frec_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(frelu_32_32_x8_noreset,DECLARE(Int256_ HELPER(frelu_32_32_x8_noreset)(void *this, Int256_ opnd1);))
BehaviorDeclare(frsq_32,DECLARE(Int256_ HELPER(frsq_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fsbf_16_16_x4,DECLARE(Int256_ HELPER(fsbf_16_16_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_16_16_x8,DECLARE(Int256_ HELPER(fsbf_16_16_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_32_32,DECLARE(Int256_ HELPER(fsbf_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_32_32_x2,DECLARE(Int256_ HELPER(fsbf_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_32_32_x4,DECLARE(Int256_ HELPER(fsbf_32_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_64_64,DECLARE(Int256_ HELPER(fsbf_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbf_64_64_x2,DECLARE(Int256_ HELPER(fsbf_64_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbfcc_32_32,DECLARE(Int256_ HELPER(fsbfcc_32_32)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbfcc_32_32_x2,DECLARE(Int256_ HELPER(fsbfcc_32_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsbfcc_64_64,DECLARE(Int256_ HELPER(fsbfcc_64_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(fsdiv_32,DECLARE(Int256_ HELPER(fsdiv_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fsdiv_32_x2,DECLARE(Int256_ HELPER(fsdiv_32_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fsdiv_64,DECLARE(Int256_ HELPER(fsdiv_64)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(fsrec_32,DECLARE(Int256_ HELPER(fsrec_32)(void *this, Int256_ opnd1);))
BehaviorDeclare(fsrec_32_x2,DECLARE(Int256_ HELPER(fsrec_32_x2)(void *this, Int256_ opnd1);))
BehaviorDeclare(fsrec_64,DECLARE(Int256_ HELPER(fsrec_64)(void *this, Int256_ opnd1);))
BehaviorDeclare(fsrsr_32,DECLARE(Int256_ HELPER(fsrsr_32)(void *this, Int256_ opnd1);))
BehaviorDeclare(fsrsr_32_x2,DECLARE(Int256_ HELPER(fsrsr_32_x2)(void *this, Int256_ opnd1);))
BehaviorDeclare(fsrsr_64,DECLARE(Int256_ HELPER(fsrsr_64)(void *this, Int256_ opnd1);))
BehaviorDeclare(funderflow,DECLARE(Int256_ HELPER(funderflow)(void *this);))
BehaviorDeclare(fwiden_16_32,DECLARE(Int256_ HELPER(fwiden_16_32)(void *this, Int256_ opnd1);))
BehaviorDeclare(fwiden_16_32_x2,DECLARE(Int256_ HELPER(fwiden_16_32_x2)(void *this, Int256_ opnd1);))
BehaviorDeclare(fwiden_32_64,DECLARE(Int256_ HELPER(fwiden_32_64)(void *this, Int256_ opnd1);))
BehaviorDeclare(gcm_bb_64_128,DECLARE(Int256_ HELPER(gcm_bb_64_128)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(gcm_bt_64_128,DECLARE(Int256_ HELPER(gcm_bt_64_128)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(gcm_tt_64_128,DECLARE(Int256_ HELPER(gcm_tt_64_128)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(get,DECLARE(Int256_ HELPER(get)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(get_check_access,DECLARE(bool HELPER(get_check_access)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(idle,DECLARE(void HELPER(idle)(void *this, Int256_ opnd1);))
BehaviorDeclare(insert_64,DECLARE(Int256_ HELPER(insert_64)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(invaldtlb,DECLARE(void HELPER(invaldtlb)(void *this);))
BehaviorDeclare(invalitlb,DECLARE(void HELPER(invalitlb)(void *this);))
BehaviorDeclare(join_32_x4,DECLARE(Int256_ HELPER(join_32_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(join_32_x8,DECLARE(Int256_ HELPER(join_32_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4, Int256_ opnd5, Int256_ opnd6, Int256_ opnd7, Int256_ opnd8);))
BehaviorDeclare(join_64_x2,DECLARE(Int256_ HELPER(join_64_x2)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(join_64_x4,DECLARE(Int256_ HELPER(join_64_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(mmi_owner,DECLARE(bool HELPER(mmi_owner)(void *this);))
BehaviorDeclare(probetlb,DECLARE(void HELPER(probetlb)(void *this);))
BehaviorDeclare(readtlb,DECLARE(void HELPER(readtlb)(void *this);))
BehaviorDeclare(recvv,DECLARE(Int256_ HELPER(recvv)(void *this, Int256_ opnd1);))
BehaviorDeclare(reflect_32,DECLARE(Int256_ HELPER(reflect_32)(void *this, Int256_ opnd1);))
BehaviorDeclare(rfe,DECLARE(void HELPER(rfe)(void *this);))
BehaviorDeclare(rfe_owner,DECLARE(bool HELPER(rfe_owner)(void *this);))
BehaviorDeclare(round_32_x8,DECLARE(Int256_ HELPER(round_32_x8)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(round_64_x4,DECLARE(Int256_ HELPER(round_64_x4)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(sat_32_8_x8,DECLARE(Int256_ HELPER(sat_32_8_x8)(void *this, Int256_ opnd1);))
BehaviorDeclare(sat_64_16_x4,DECLARE(Int256_ HELPER(sat_64_16_x4)(void *this, Int256_ opnd1);))
BehaviorDeclare(satu_32_8_x8,DECLARE(Int256_ HELPER(satu_32_8_x8)(void *this, Int256_ opnd1);))
BehaviorDeclare(satu_64_16_x4,DECLARE(Int256_ HELPER(satu_64_16_x4)(void *this, Int256_ opnd1);))
BehaviorDeclare(scalarcond,DECLARE(bool HELPER(scalarcond)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(sendv,DECLARE(void HELPER(sendv)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(set_check_access,DECLARE(bool HELPER(set_check_access)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3);))
BehaviorDeclare(simplecond_16,DECLARE(bool HELPER(simplecond_16)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(simplecond_32,DECLARE(bool HELPER(simplecond_32)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(stop_owner,DECLARE(bool HELPER(stop_owner)(void *this);))
BehaviorDeclare(sxb_x4,DECLARE(Int256_ HELPER(sxb_x4)(void *this, Int256_ opnd1);))
BehaviorDeclare(syncgroup,DECLARE(void HELPER(syncgroup)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(syncgroup_owner,DECLARE(bool HELPER(syncgroup_owner)(void *this);))
BehaviorDeclare(syscall,DECLARE(void HELPER(syscall)(void *this, Int256_ opnd1);))
BehaviorDeclare(throw_OPCODE,DECLARE(void HELPER(throw_OPCODE)(void *this);))
BehaviorDeclare(transpose_64_4x4_0,DECLARE(Int256_ HELPER(transpose_64_4x4_0)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(transpose_64_4x4_1,DECLARE(Int256_ HELPER(transpose_64_4x4_1)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(transpose_64_4x4_2,DECLARE(Int256_ HELPER(transpose_64_4x4_2)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(transpose_64_4x4_3,DECLARE(Int256_ HELPER(transpose_64_4x4_3)(void *this, Int256_ opnd1, Int256_ opnd2, Int256_ opnd3, Int256_ opnd4);))
BehaviorDeclare(waitit,DECLARE(Int256_ HELPER(waitit)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(wfxl,DECLARE(Int256_ HELPER(wfxl)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(wfxl_check_access,DECLARE(bool HELPER(wfxl_check_access)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(wfxm,DECLARE(Int256_ HELPER(wfxm)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(wfxm_check_access,DECLARE(bool HELPER(wfxm_check_access)(void *this, Int256_ opnd1, Int256_ opnd2);))
BehaviorDeclare(writetlb,DECLARE(void HELPER(writetlb)(void *this);))
BehaviorDeclare(zxb_x4,DECLARE(Int256_ HELPER(zxb_x4)(void *this, Int256_ opnd1);))
#endif
#undef BehaviorDeclare

#ifndef Behavior_MAXRANK
#define Behavior_MAXRANK 13
#endif/*Behavior_MAXRANK*/

